
RTOS-E8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e78  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004f88  08004f88  00005f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b4  080050b4  00007014  2**0
                  CONTENTS
  4 .ARM          00000000  080050b4  080050b4  00007014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050b4  080050b4  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050b4  080050b4  000060b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050b8  080050b8  000060b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080050bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c8  20000014  080050d0  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019dc  080050d0  000079dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116d9  00000000  00000000  0000703d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b71  00000000  00000000  00018716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001b288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cef  00000000  00000000  0001c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025dc  00000000  00000000  0001d037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122aa  00000000  00000000  0001f613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000911ef  00000000  00000000  000318bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2aac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a0  00000000  00000000  000c2af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c7090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f70 	.word	0x08004f70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08004f70 	.word	0x08004f70

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	StartFlag = 1;
 8000154:	4b21      	ldr	r3, [pc, #132]	@ (80001dc <main+0x8c>)
 8000156:	2201      	movs	r2, #1
 8000158:	701a      	strb	r2, [r3, #0]
	GreenFlag = 1;
 800015a:	4b21      	ldr	r3, [pc, #132]	@ (80001e0 <main+0x90>)
 800015c:	2201      	movs	r2, #1
 800015e:	701a      	strb	r2, [r3, #0]
	RedFlag = 1;
 8000160:	4b20      	ldr	r3, [pc, #128]	@ (80001e4 <main+0x94>)
 8000162:	2201      	movs	r2, #1
 8000164:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fac1 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f85b 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f895 	bl	800029c <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000178:	481b      	ldr	r0, [pc, #108]	@ (80001e8 <main+0x98>)
 800017a:	f000 fd71 	bl	8000c60 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800017e:	f001 fc17 	bl	80019b0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CriticalResourceSemaphore */
  CriticalResourceSemaphoreHandle = osSemaphoreNew(1, 1, &CriticalResourceSemaphore_attributes);
 8000182:	4a1a      	ldr	r2, [pc, #104]	@ (80001ec <main+0x9c>)
 8000184:	2101      	movs	r1, #1
 8000186:	2001      	movs	r0, #1
 8000188:	f001 fd50 	bl	8001c2c <osSemaphoreNew>
 800018c:	4603      	mov	r3, r0
 800018e:	4a18      	ldr	r2, [pc, #96]	@ (80001f0 <main+0xa0>)
 8000190:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000192:	4a18      	ldr	r2, [pc, #96]	@ (80001f4 <main+0xa4>)
 8000194:	2100      	movs	r1, #0
 8000196:	4818      	ldr	r0, [pc, #96]	@ (80001f8 <main+0xa8>)
 8000198:	f001 fc70 	bl	8001a7c <osThreadNew>
 800019c:	4603      	mov	r3, r0
 800019e:	4a17      	ldr	r2, [pc, #92]	@ (80001fc <main+0xac>)
 80001a0:	6013      	str	r3, [r2, #0]

  /* creation of redLed */
  redLedHandle = osThreadNew(RedLed, NULL, &redLed_attributes);
 80001a2:	4a17      	ldr	r2, [pc, #92]	@ (8000200 <main+0xb0>)
 80001a4:	2100      	movs	r1, #0
 80001a6:	4817      	ldr	r0, [pc, #92]	@ (8000204 <main+0xb4>)
 80001a8:	f001 fc68 	bl	8001a7c <osThreadNew>
 80001ac:	4603      	mov	r3, r0
 80001ae:	4a16      	ldr	r2, [pc, #88]	@ (8000208 <main+0xb8>)
 80001b0:	6013      	str	r3, [r2, #0]

  /* creation of greenLed */
  greenLedHandle = osThreadNew(GreenLed, NULL, &greenLed_attributes);
 80001b2:	4a16      	ldr	r2, [pc, #88]	@ (800020c <main+0xbc>)
 80001b4:	2100      	movs	r1, #0
 80001b6:	4816      	ldr	r0, [pc, #88]	@ (8000210 <main+0xc0>)
 80001b8:	f001 fc60 	bl	8001a7c <osThreadNew>
 80001bc:	4603      	mov	r3, r0
 80001be:	4a15      	ldr	r2, [pc, #84]	@ (8000214 <main+0xc4>)
 80001c0:	6013      	str	r3, [r2, #0]

  /* creation of orangeLed */
  orangeLedHandle = osThreadNew(OrangeLed, NULL, &orangeLed_attributes);
 80001c2:	4a15      	ldr	r2, [pc, #84]	@ (8000218 <main+0xc8>)
 80001c4:	2100      	movs	r1, #0
 80001c6:	4815      	ldr	r0, [pc, #84]	@ (800021c <main+0xcc>)
 80001c8:	f001 fc58 	bl	8001a7c <osThreadNew>
 80001cc:	4603      	mov	r3, r0
 80001ce:	4a14      	ldr	r2, [pc, #80]	@ (8000220 <main+0xd0>)
 80001d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d2:	f001 fc1f 	bl	8001a14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d6:	bf00      	nop
 80001d8:	e7fd      	b.n	80001d6 <main+0x86>
 80001da:	bf00      	nop
 80001dc:	20000044 	.word	0x20000044
 80001e0:	20000046 	.word	0x20000046
 80001e4:	20000045 	.word	0x20000045
 80001e8:	40011000 	.word	0x40011000
 80001ec:	08005078 	.word	0x08005078
 80001f0:	20000040 	.word	0x20000040
 80001f4:	08004fe8 	.word	0x08004fe8
 80001f8:	0800035d 	.word	0x0800035d
 80001fc:	20000030 	.word	0x20000030
 8000200:	0800500c 	.word	0x0800500c
 8000204:	0800036d 	.word	0x0800036d
 8000208:	20000034 	.word	0x20000034
 800020c:	08005030 	.word	0x08005030
 8000210:	080003dd 	.word	0x080003dd
 8000214:	20000038 	.word	0x20000038
 8000218:	08005054 	.word	0x08005054
 800021c:	08000491 	.word	0x08000491
 8000220:	2000003c 	.word	0x2000003c

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f004 fe62 	bl	8004efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fd32 	bl	8000cc4 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000266:	f000 f935 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f000 ffa0 	bl	80011c8 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028e:	f000 f921 	bl	80004d4 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	@ 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	4b27      	ldr	r3, [pc, #156]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a26      	ldr	r2, [pc, #152]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b24      	ldr	r3, [pc, #144]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	4b21      	ldr	r3, [pc, #132]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a20      	ldr	r2, [pc, #128]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0304 	and.w	r3, r3, #4
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_GPIO_Init+0xb4>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80002fe:	4815      	ldr	r0, [pc, #84]	@ (8000354 <MX_GPIO_Init+0xb8>)
 8000300:	f000 fcae 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2101      	movs	r1, #1
 8000308:	4813      	ldr	r0, [pc, #76]	@ (8000358 <MX_GPIO_Init+0xbc>)
 800030a:	f000 fca9 	bl	8000c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800030e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2302      	movs	r3, #2
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	480b      	ldr	r0, [pc, #44]	@ (8000354 <MX_GPIO_Init+0xb8>)
 8000328:	f000 fb16 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800032c:	2301      	movs	r3, #1
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2302      	movs	r3, #2
 800033a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	4619      	mov	r1, r3
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_GPIO_Init+0xbc>)
 8000344:	f000 fb08 	bl	8000958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000348:	bf00      	nop
 800034a:	3720      	adds	r7, #32
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000
 8000354:	40011000 	.word	0x40011000
 8000358:	40010800 	.word	0x40010800

0800035c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f001 fc33 	bl	8001bd0 <osDelay>
 800036a:	e7fb      	b.n	8000364 <StartDefaultTask+0x8>

0800036c <RedLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLed */
void RedLed(void *argument)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLed */
  /* Infinite loop */
  for(;;)
  {
      RedFlag = 1;
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <RedLed+0x60>)
 8000376:	2201      	movs	r2, #1
 8000378:	701a      	strb	r2, [r3, #0]
      // Turn on Red LED
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000380:	4813      	ldr	r0, [pc, #76]	@ (80003d0 <RedLed+0x64>)
 8000382:	f000 fc6d 	bl	8000c60 <HAL_GPIO_WritePin>

      // Enter critical section
      osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <RedLed+0x68>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a13      	ldr	r2, [pc, #76]	@ (80003d8 <RedLed+0x6c>)
 800038c:	8812      	ldrh	r2, [r2, #0]
 800038e:	4611      	mov	r1, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fce7 	bl	8001d64 <osSemaphoreAcquire>
      AccessSharedData();
 8000396:	f000 f857 	bl	8000448 <AccessSharedData>
      osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <RedLed+0x68>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fd46 	bl	8001e30 <osSemaphoreRelease>

      // Turn off Red LED
      osDelay(550);
 80003a4:	f240 2026 	movw	r0, #550	@ 0x226
 80003a8:	f001 fc12 	bl	8001bd0 <osDelay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003b2:	4807      	ldr	r0, [pc, #28]	@ (80003d0 <RedLed+0x64>)
 80003b4:	f000 fc54 	bl	8000c60 <HAL_GPIO_WritePin>

      RedFlag = 0;
 80003b8:	4b04      	ldr	r3, [pc, #16]	@ (80003cc <RedLed+0x60>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
      // Delay for 100 milliseconds
      osDelay(550);
 80003be:	f240 2026 	movw	r0, #550	@ 0x226
 80003c2:	f001 fc05 	bl	8001bd0 <osDelay>
  {
 80003c6:	bf00      	nop
 80003c8:	e7d4      	b.n	8000374 <RedLed+0x8>
 80003ca:	bf00      	nop
 80003cc:	20000045 	.word	0x20000045
 80003d0:	40011000 	.word	0x40011000
 80003d4:	20000040 	.word	0x20000040
 80003d8:	20000000 	.word	0x20000000

080003dc <GreenLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLed */
void GreenLed(void *argument)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLed */
  /* Infinite loop */
  for(;;)
  {
      GreenFlag = 1;
 80003e4:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <GreenLed+0x5c>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
      // Turn on Green LED
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003f0:	4812      	ldr	r0, [pc, #72]	@ (800043c <GreenLed+0x60>)
 80003f2:	f000 fc35 	bl	8000c60 <HAL_GPIO_WritePin>

      // Enter critical section
      osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <GreenLed+0x64>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a12      	ldr	r2, [pc, #72]	@ (8000444 <GreenLed+0x68>)
 80003fc:	8812      	ldrh	r2, [r2, #0]
 80003fe:	4611      	mov	r1, r2
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fcaf 	bl	8001d64 <osSemaphoreAcquire>
      AccessSharedData();
 8000406:	f000 f81f 	bl	8000448 <AccessSharedData>
      osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 800040a:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <GreenLed+0x64>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fd0e 	bl	8001e30 <osSemaphoreRelease>

      // Turn off Green LED
      osDelay(200);
 8000414:	20c8      	movs	r0, #200	@ 0xc8
 8000416:	f001 fbdb 	bl	8001bd0 <osDelay>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000420:	4806      	ldr	r0, [pc, #24]	@ (800043c <GreenLed+0x60>)
 8000422:	f000 fc1d 	bl	8000c60 <HAL_GPIO_WritePin>

      GreenFlag = 0;
 8000426:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <GreenLed+0x5c>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
      // Delay for 500 milliseconds
      osDelay(200);
 800042c:	20c8      	movs	r0, #200	@ 0xc8
 800042e:	f001 fbcf 	bl	8001bd0 <osDelay>
  {
 8000432:	bf00      	nop
 8000434:	e7d6      	b.n	80003e4 <GreenLed+0x8>
 8000436:	bf00      	nop
 8000438:	20000046 	.word	0x20000046
 800043c:	40011000 	.word	0x40011000
 8000440:	20000040 	.word	0x20000040
 8000444:	20000000 	.word	0x20000000

08000448 <AccessSharedData>:
  }
  /* USER CODE END GreenLed */
}

void AccessSharedData(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
    if (StartFlag == 1) {
 800044c:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <AccessSharedData+0x40>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d103      	bne.n	800045c <AccessSharedData+0x14>
        // Set Start flag to Down to indicate resource is in use
        StartFlag = 0;
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <AccessSharedData+0x40>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
 800045a:	e005      	b.n	8000468 <AccessSharedData+0x20>
    } else {
        // Resource contention: Turn on Blue LED
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000462:	480a      	ldr	r0, [pc, #40]	@ (800048c <AccessSharedData+0x44>)
 8000464:	f000 fbfc 	bl	8000c60 <HAL_GPIO_WritePin>
    }

    // Simulate read/write operations with a delay of 500 milliseconds
//    SimulateReadWriteOperation();
    HAL_Delay(500);
 8000468:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800046c:	f000 f970 	bl	8000750 <HAL_Delay>

    // Set Start flag back to Up to indicate resource is free
    StartFlag = 1;
 8000470:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <AccessSharedData+0x40>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]

    // Turn off Blue LED (if it was turned on during contention)
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800047c:	4803      	ldr	r0, [pc, #12]	@ (800048c <AccessSharedData+0x44>)
 800047e:	f000 fbef 	bl	8000c60 <HAL_GPIO_WritePin>
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000044 	.word	0x20000044
 800048c:	40011000 	.word	0x40011000

08000490 <OrangeLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OrangeLed */
void OrangeLed(void *argument)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeLed */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000498:	2101      	movs	r1, #1
 800049a:	4804      	ldr	r0, [pc, #16]	@ (80004ac <OrangeLed+0x1c>)
 800049c:	f000 fbf8 	bl	8000c90 <HAL_GPIO_TogglePin>
	  osDelay(50);
 80004a0:	2032      	movs	r0, #50	@ 0x32
 80004a2:	f001 fb95 	bl	8001bd0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80004a6:	bf00      	nop
 80004a8:	e7f6      	b.n	8000498 <OrangeLed+0x8>
 80004aa:	bf00      	nop
 80004ac:	40010800 	.word	0x40010800

080004b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d101      	bne.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004c2:	f000 f929 	bl	8000718 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40000800 	.word	0x40000800

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <Error_Handler+0x8>

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <HAL_MspInit+0x68>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a17      	ldr	r2, [pc, #92]	@ (8000548 <HAL_MspInit+0x68>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <HAL_MspInit+0x68>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <HAL_MspInit+0x68>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a11      	ldr	r2, [pc, #68]	@ (8000548 <HAL_MspInit+0x68>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <HAL_MspInit+0x68>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	210f      	movs	r1, #15
 800051a:	f06f 0001 	mvn.w	r0, #1
 800051e:	f000 f9f0 	bl	8000902 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <HAL_MspInit+0x6c>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	@ (800054c <HAL_MspInit+0x6c>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08e      	sub	sp, #56	@ 0x38
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000558:	2300      	movs	r3, #0
 800055a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800055c:	2300      	movs	r3, #0
 800055e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000560:	2300      	movs	r3, #0
 8000562:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000566:	4b34      	ldr	r3, [pc, #208]	@ (8000638 <HAL_InitTick+0xe8>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	4a33      	ldr	r2, [pc, #204]	@ (8000638 <HAL_InitTick+0xe8>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	61d3      	str	r3, [r2, #28]
 8000572:	4b31      	ldr	r3, [pc, #196]	@ (8000638 <HAL_InitTick+0xe8>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800057e:	f107 0210 	add.w	r2, r7, #16
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4611      	mov	r1, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f000 ff79 	bl	8001480 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800058e:	6a3b      	ldr	r3, [r7, #32]
 8000590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000594:	2b00      	cmp	r3, #0
 8000596:	d103      	bne.n	80005a0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000598:	f000 ff5e 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 800059c:	6378      	str	r0, [r7, #52]	@ 0x34
 800059e:	e004      	b.n	80005aa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005a0:	f000 ff5a 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 80005a4:	4603      	mov	r3, r0
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ac:	4a23      	ldr	r2, [pc, #140]	@ (800063c <HAL_InitTick+0xec>)
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	0c9b      	lsrs	r3, r3, #18
 80005b4:	3b01      	subs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <HAL_InitTick+0xf0>)
 80005ba:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <HAL_InitTick+0xf4>)
 80005bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <HAL_InitTick+0xf0>)
 80005c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005c4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000640 <HAL_InitTick+0xf0>)
 80005c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <HAL_InitTick+0xf0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000640 <HAL_InitTick+0xf0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <HAL_InitTick+0xf0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005de:	4818      	ldr	r0, [pc, #96]	@ (8000640 <HAL_InitTick+0xf0>)
 80005e0:	f000 ff9c 	bl	800151c <HAL_TIM_Base_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80005ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d11b      	bne.n	800062a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005f2:	4813      	ldr	r0, [pc, #76]	@ (8000640 <HAL_InitTick+0xf0>)
 80005f4:	f000 ffea 	bl	80015cc <HAL_TIM_Base_Start_IT>
 80005f8:	4603      	mov	r3, r0
 80005fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80005fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000602:	2b00      	cmp	r3, #0
 8000604:	d111      	bne.n	800062a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000606:	201e      	movs	r0, #30
 8000608:	f000 f997 	bl	800093a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b0f      	cmp	r3, #15
 8000610:	d808      	bhi.n	8000624 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000612:	2200      	movs	r2, #0
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	201e      	movs	r0, #30
 8000618:	f000 f973 	bl	8000902 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800061c:	4a0a      	ldr	r2, [pc, #40]	@ (8000648 <HAL_InitTick+0xf8>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	e002      	b.n	800062a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000624:	2301      	movs	r3, #1
 8000626:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800062a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800062e:	4618      	mov	r0, r3
 8000630:	3738      	adds	r7, #56	@ 0x38
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	431bde83 	.word	0x431bde83
 8000640:	20000048 	.word	0x20000048
 8000644:	40000800 	.word	0x40000800
 8000648:	20000008 	.word	0x20000008

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <NMI_Handler+0x4>

08000654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <MemManage_Handler+0x4>

08000664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <UsageFault_Handler+0x4>

08000674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000684:	4802      	ldr	r0, [pc, #8]	@ (8000690 <TIM4_IRQHandler+0x10>)
 8000686:	f000 fff3 	bl	8001670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000048 	.word	0x20000048

08000694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a0:	f7ff fff8 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006a6:	490c      	ldr	r1, [pc, #48]	@ (80006d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a09      	ldr	r2, [pc, #36]	@ (80006e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006bc:	4c09      	ldr	r4, [pc, #36]	@ (80006e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ca:	f004 fc1f 	bl	8004f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fd3f 	bl	8000150 <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80006dc:	080050bc 	.word	0x080050bc
  ldr r2, =_sbss
 80006e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80006e4:	200019dc 	.word	0x200019dc

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <HAL_Init+0x28>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	@ (8000714 <HAL_Init+0x28>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f8f5 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	200f      	movs	r0, #15
 8000704:	f7ff ff24 	bl	8000550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f7ff feea 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <HAL_IncTick+0x1c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_IncTick+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a03      	ldr	r2, [pc, #12]	@ (8000738 <HAL_IncTick+0x20>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	2000000c 	.word	0x2000000c
 8000738:	20000090 	.word	0x20000090

0800073c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b02      	ldr	r3, [pc, #8]	@ (800074c <HAL_GetTick+0x10>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000090 	.word	0x20000090

08000750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000758:	f7ff fff0 	bl	800073c <HAL_GetTick>
 800075c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000768:	d005      	beq.n	8000776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_Delay+0x44>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000776:	bf00      	nop
 8000778:	f7ff ffe0 	bl	800073c <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d8f7      	bhi.n	8000778 <HAL_Delay+0x28>
  {
  }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000000c 	.word	0x2000000c

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	db0b      	blt.n	8000826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 021f 	and.w	r2, r3, #31
 8000814:	4906      	ldr	r1, [pc, #24]	@ (8000830 <__NVIC_EnableIRQ+0x34>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	095b      	lsrs	r3, r3, #5
 800081c:	2001      	movs	r0, #1
 800081e:	fa00 f202 	lsl.w	r2, r0, r2
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	e000e100 	.word	0xe000e100

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	@ (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	@ (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f1c3 0307 	rsb	r3, r3, #7
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	bf28      	it	cs
 80008a6:	2304      	movcs	r3, #4
 80008a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3304      	adds	r3, #4
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d902      	bls.n	80008b8 <NVIC_EncodePriority+0x30>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3b03      	subs	r3, #3
 80008b6:	e000      	b.n	80008ba <NVIC_EncodePriority+0x32>
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43da      	mvns	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	401a      	ands	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43d9      	mvns	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	4313      	orrs	r3, r2
         );
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3724      	adds	r7, #36	@ 0x24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff4f 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff64 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ffb2 	bl	8000888 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff81 	bl	8000834 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff57 	bl	80007fc <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b08b      	sub	sp, #44	@ 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e169      	b.n	8000c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800096c:	2201      	movs	r2, #1
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	429a      	cmp	r2, r3
 8000986:	f040 8158 	bne.w	8000c3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a9a      	ldr	r2, [pc, #616]	@ (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d05e      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 8000994:	4a98      	ldr	r2, [pc, #608]	@ (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d875      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 800099a:	4a98      	ldr	r2, [pc, #608]	@ (8000bfc <HAL_GPIO_Init+0x2a4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d058      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009a0:	4a96      	ldr	r2, [pc, #600]	@ (8000bfc <HAL_GPIO_Init+0x2a4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d86f      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009a6:	4a96      	ldr	r2, [pc, #600]	@ (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d052      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009ac:	4a94      	ldr	r2, [pc, #592]	@ (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d869      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009b2:	4a94      	ldr	r2, [pc, #592]	@ (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d04c      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009b8:	4a92      	ldr	r2, [pc, #584]	@ (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d863      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009be:	4a92      	ldr	r2, [pc, #584]	@ (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d046      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
 80009c4:	4a90      	ldr	r2, [pc, #576]	@ (8000c08 <HAL_GPIO_Init+0x2b0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d85d      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d82a      	bhi.n	8000a24 <HAL_GPIO_Init+0xcc>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d859      	bhi.n	8000a86 <HAL_GPIO_Init+0x12e>
 80009d2:	a201      	add	r2, pc, #4	@ (adr r2, 80009d8 <HAL_GPIO_Init+0x80>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a2d 	.word	0x08000a2d
 80009e0:	08000a3f 	.word	0x08000a3f
 80009e4:	08000a81 	.word	0x08000a81
 80009e8:	08000a87 	.word	0x08000a87
 80009ec:	08000a87 	.word	0x08000a87
 80009f0:	08000a87 	.word	0x08000a87
 80009f4:	08000a87 	.word	0x08000a87
 80009f8:	08000a87 	.word	0x08000a87
 80009fc:	08000a87 	.word	0x08000a87
 8000a00:	08000a87 	.word	0x08000a87
 8000a04:	08000a87 	.word	0x08000a87
 8000a08:	08000a87 	.word	0x08000a87
 8000a0c:	08000a87 	.word	0x08000a87
 8000a10:	08000a87 	.word	0x08000a87
 8000a14:	08000a87 	.word	0x08000a87
 8000a18:	08000a87 	.word	0x08000a87
 8000a1c:	08000a35 	.word	0x08000a35
 8000a20:	08000a49 	.word	0x08000a49
 8000a24:	4a79      	ldr	r2, [pc, #484]	@ (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d013      	beq.n	8000a52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2a:	e02c      	b.n	8000a86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e029      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e024      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	3308      	adds	r3, #8
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e01f      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	330c      	adds	r3, #12
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e01a      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	623b      	str	r3, [r7, #32]
          break;
 8000a5e:	e013      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d105      	bne.n	8000a74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69fa      	ldr	r2, [r7, #28]
 8000a70:	611a      	str	r2, [r3, #16]
          break;
 8000a72:	e009      	b.n	8000a88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	615a      	str	r2, [r3, #20]
          break;
 8000a7e:	e003      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
          break;
 8000a84:	e000      	b.n	8000a88 <HAL_GPIO_Init+0x130>
          break;
 8000a86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	2bff      	cmp	r3, #255	@ 0xff
 8000a8c:	d801      	bhi.n	8000a92 <HAL_GPIO_Init+0x13a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	e001      	b.n	8000a96 <HAL_GPIO_Init+0x13e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	2bff      	cmp	r3, #255	@ 0xff
 8000a9c:	d802      	bhi.n	8000aa4 <HAL_GPIO_Init+0x14c>
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0x152>
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa6:	3b08      	subs	r3, #8
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	6a39      	ldr	r1, [r7, #32]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80b1 	beq.w	8000c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a4c      	ldr	r2, [pc, #304]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af0:	4a48      	ldr	r2, [pc, #288]	@ (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a40      	ldr	r2, [pc, #256]	@ (8000c18 <HAL_GPIO_Init+0x2c0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d013      	beq.n	8000b44 <HAL_GPIO_Init+0x1ec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c1c <HAL_GPIO_Init+0x2c4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d00d      	beq.n	8000b40 <HAL_GPIO_Init+0x1e8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3e      	ldr	r2, [pc, #248]	@ (8000c20 <HAL_GPIO_Init+0x2c8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d007      	beq.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c24 <HAL_GPIO_Init+0x2cc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d101      	bne.n	8000b38 <HAL_GPIO_Init+0x1e0>
 8000b34:	2303      	movs	r3, #3
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_Init+0x1ee>
 8000b44:	2300      	movs	r3, #0
 8000b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b56:	492f      	ldr	r1, [pc, #188]	@ (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b70:	4b2d      	ldr	r3, [pc, #180]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	492c      	ldr	r1, [pc, #176]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4928      	ldr	r1, [pc, #160]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	4922      	ldr	r1, [pc, #136]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60cb      	str	r3, [r1, #12]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	491e      	ldr	r1, [pc, #120]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4918      	ldr	r1, [pc, #96]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4914      	ldr	r1, [pc, #80]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d021      	beq.n	8000c2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	490e      	ldr	r1, [pc, #56]	@ (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
 8000bf4:	e021      	b.n	8000c3a <HAL_GPIO_Init+0x2e2>
 8000bf6:	bf00      	nop
 8000bf8:	10320000 	.word	0x10320000
 8000bfc:	10310000 	.word	0x10310000
 8000c00:	10220000 	.word	0x10220000
 8000c04:	10210000 	.word	0x10210000
 8000c08:	10120000 	.word	0x10120000
 8000c0c:	10110000 	.word	0x10110000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40011400 	.word	0x40011400
 8000c28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_GPIO_Init+0x304>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4909      	ldr	r1, [pc, #36]	@ (8000c5c <HAL_GPIO_Init+0x304>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f47f ae8e 	bne.w	800096c <HAL_GPIO_Init+0x14>
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	372c      	adds	r7, #44	@ 0x2c
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c70:	787b      	ldrb	r3, [r7, #1]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	041a      	lsls	r2, r3, #16
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	611a      	str	r2, [r3, #16]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	041a      	lsls	r2, r3, #16
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43d9      	mvns	r1, r3
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	611a      	str	r2, [r3, #16]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
	...

08000cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e272      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 8087 	beq.w	8000df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce4:	4b92      	ldr	r3, [pc, #584]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d00c      	beq.n	8000d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf0:	4b8f      	ldr	r3, [pc, #572]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d112      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5e>
 8000cfc:	4b8c      	ldr	r3, [pc, #560]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d08:	d10b      	bne.n	8000d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0a:	4b89      	ldr	r3, [pc, #548]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d06c      	beq.n	8000df0 <HAL_RCC_OscConfig+0x12c>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d168      	bne.n	8000df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e24c      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d2a:	d106      	bne.n	8000d3a <HAL_RCC_OscConfig+0x76>
 8000d2c:	4b80      	ldr	r3, [pc, #512]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a7f      	ldr	r2, [pc, #508]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e02e      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10c      	bne.n	8000d5c <HAL_RCC_OscConfig+0x98>
 8000d42:	4b7b      	ldr	r3, [pc, #492]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a7a      	ldr	r2, [pc, #488]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b78      	ldr	r3, [pc, #480]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a77      	ldr	r2, [pc, #476]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	e01d      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0xbc>
 8000d66:	4b72      	ldr	r3, [pc, #456]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a71      	ldr	r2, [pc, #452]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b6f      	ldr	r3, [pc, #444]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a6e      	ldr	r2, [pc, #440]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e00b      	b.n	8000d98 <HAL_RCC_OscConfig+0xd4>
 8000d80:	4b6b      	ldr	r3, [pc, #428]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a6a      	ldr	r2, [pc, #424]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b68      	ldr	r3, [pc, #416]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a67      	ldr	r2, [pc, #412]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d013      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fccc 	bl	800073c <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da8:	f7ff fcc8 	bl	800073c <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b64      	cmp	r3, #100	@ 0x64
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e200      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dba:	4b5d      	ldr	r3, [pc, #372]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f0      	beq.n	8000da8 <HAL_RCC_OscConfig+0xe4>
 8000dc6:	e014      	b.n	8000df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fcb8 	bl	800073c <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fcb4 	bl	800073c <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	@ 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e1ec      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	4b53      	ldr	r3, [pc, #332]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f0      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x10c>
 8000dee:	e000      	b.n	8000df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d063      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 030c 	and.w	r3, r3, #12
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00b      	beq.n	8000e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d11c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x18c>
 8000e16:	4b46      	ldr	r3, [pc, #280]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d116      	bne.n	8000e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e22:	4b43      	ldr	r3, [pc, #268]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_OscConfig+0x176>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d001      	beq.n	8000e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e1c0      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4939      	ldr	r1, [pc, #228]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4e:	e03a      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d020      	beq.n	8000e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e58:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fc6d 	bl	800073c <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e66:	f7ff fc69 	bl	800073c <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1a1      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e78:	4b2d      	ldr	r3, [pc, #180]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f0      	beq.n	8000e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e84:	4b2a      	ldr	r3, [pc, #168]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4927      	ldr	r1, [pc, #156]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
 8000e98:	e015      	b.n	8000ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9a:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fc4c 	bl	800073c <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc48 	bl	800073c <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e180      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d03a      	beq.n	8000f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d019      	beq.n	8000f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee0:	f7ff fc2c 	bl	800073c <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fc28 	bl	800073c <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e160      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 faea 	bl	80014e0 <RCC_Delay>
 8000f0c:	e01c      	b.n	8000f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_RCC_OscConfig+0x274>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f14:	f7ff fc12 	bl	800073c <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1a:	e00f      	b.n	8000f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fc0e 	bl	800073c <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d908      	bls.n	8000f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e146      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000
 8000f34:	42420000 	.word	0x42420000
 8000f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3c:	4b92      	ldr	r3, [pc, #584]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e9      	bne.n	8000f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80a6 	beq.w	80010a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10d      	bne.n	8000f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b88      	ldr	r3, [pc, #544]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a87      	ldr	r2, [pc, #540]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b85      	ldr	r3, [pc, #532]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f82:	4b82      	ldr	r3, [pc, #520]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d118      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a7e      	ldr	r2, [pc, #504]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fbcf 	bl	800073c <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff fbcb 	bl	800073c <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	@ 0x64
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e103      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	4b75      	ldr	r3, [pc, #468]	@ (800118c <HAL_RCC_OscConfig+0x4c8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d106      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x312>
 8000fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a6e      	ldr	r2, [pc, #440]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6213      	str	r3, [r2, #32]
 8000fd4:	e02d      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x334>
 8000fde:	4b6a      	ldr	r3, [pc, #424]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a69      	ldr	r2, [pc, #420]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	4b67      	ldr	r3, [pc, #412]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a66      	ldr	r2, [pc, #408]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	e01c      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d10c      	bne.n	800101a <HAL_RCC_OscConfig+0x356>
 8001000:	4b61      	ldr	r3, [pc, #388]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a60      	ldr	r2, [pc, #384]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	4b5e      	ldr	r3, [pc, #376]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a5d      	ldr	r2, [pc, #372]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	e00b      	b.n	8001032 <HAL_RCC_OscConfig+0x36e>
 800101a:	4b5b      	ldr	r3, [pc, #364]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a5a      	ldr	r2, [pc, #360]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b58      	ldr	r3, [pc, #352]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a57      	ldr	r2, [pc, #348]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d015      	beq.n	8001066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103a:	f7ff fb7f 	bl	800073c <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	e00a      	b.n	8001058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001042:	f7ff fb7b 	bl	800073c <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001050:	4293      	cmp	r3, r2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e0b1      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001058:	4b4b      	ldr	r3, [pc, #300]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0ee      	beq.n	8001042 <HAL_RCC_OscConfig+0x37e>
 8001064:	e014      	b.n	8001090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fb69 	bl	800073c <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	e00a      	b.n	8001084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff fb65 	bl	800073c <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107c:	4293      	cmp	r3, r2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e09b      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001084:	4b40      	ldr	r3, [pc, #256]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1ee      	bne.n	800106e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d105      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001096:	4b3c      	ldr	r3, [pc, #240]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a3b      	ldr	r2, [pc, #236]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8087 	beq.w	80011ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ac:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d061      	beq.n	800117c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d146      	bne.n	800114e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c0:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <HAL_RCC_OscConfig+0x4cc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fb39 	bl	800073c <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ce:	f7ff fb35 	bl	800073c <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e06d      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f0      	bne.n	80010ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f4:	d108      	bne.n	8001108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	4921      	ldr	r1, [pc, #132]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a19      	ldr	r1, [r3, #32]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001118:	430b      	orrs	r3, r1
 800111a:	491b      	ldr	r1, [pc, #108]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_RCC_OscConfig+0x4cc>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fb09 	bl	800073c <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff fb05 	bl	800073c <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e03d      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x46a>
 800114c:	e035      	b.n	80011ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <HAL_RCC_OscConfig+0x4cc>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff faf2 	bl	800073c <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115c:	f7ff faee 	bl	800073c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e026      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x498>
 800117a:	e01e      	b.n	80011ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d107      	bne.n	8001194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e019      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
 8001188:	40021000 	.word	0x40021000
 800118c:	40007000 	.word	0x40007000
 8001190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_RCC_OscConfig+0x500>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0d0      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d910      	bls.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b67      	ldr	r3, [pc, #412]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4965      	ldr	r1, [pc, #404]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0b8      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001224:	4b59      	ldr	r3, [pc, #356]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a58      	ldr	r2, [pc, #352]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800122e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123c:	4b53      	ldr	r3, [pc, #332]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001248:	4b50      	ldr	r3, [pc, #320]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	494d      	ldr	r1, [pc, #308]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d040      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e07f      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001286:	4b41      	ldr	r3, [pc, #260]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e073      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b3d      	ldr	r3, [pc, #244]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e06b      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a6:	4b39      	ldr	r3, [pc, #228]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f023 0203 	bic.w	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4936      	ldr	r1, [pc, #216]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff fa40 	bl	800073c <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c0:	f7ff fa3c 	bl	800073c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e053      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 020c 	and.w	r2, r3, #12
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1eb      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d210      	bcs.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 0207 	bic.w	r2, r3, #7
 80012fe:	4922      	ldr	r1, [pc, #136]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e032      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4916      	ldr	r1, [pc, #88]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	490e      	ldr	r1, [pc, #56]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001356:	f000 f821 	bl	800139c <HAL_RCC_GetSysClockFreq>
 800135a:	4602      	mov	r2, r0
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	490a      	ldr	r1, [pc, #40]	@ (8001390 <HAL_RCC_ClockConfig+0x1c8>)
 8001368:	5ccb      	ldrb	r3, [r1, r3]
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_RCC_ClockConfig+0x1cc>)
 8001370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_ClockConfig+0x1d0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8ea 	bl	8000550 <HAL_InitTick>

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000
 800138c:	40021000 	.word	0x40021000
 8001390:	08005088 	.word	0x08005088
 8001394:	20000004 	.word	0x20000004
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x94>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x30>
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_GetSysClockFreq+0x36>
 80013ca:	e027      	b.n	800141c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ce:	613b      	str	r3, [r7, #16]
      break;
 80013d0:	e027      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d010      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	0c5b      	lsrs	r3, r3, #17
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	4a11      	ldr	r2, [pc, #68]	@ (800143c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fe:	fb03 f202 	mul.w	r2, r3, r2
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	fbb2 f3f3 	udiv	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e004      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a0c      	ldr	r2, [pc, #48]	@ (8001440 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	613b      	str	r3, [r7, #16]
      break;
 800141a:	e002      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_RCC_GetSysClockFreq+0x98>)
 800141e:	613b      	str	r3, [r7, #16]
      break;
 8001420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001422:	693b      	ldr	r3, [r7, #16]
}
 8001424:	4618      	mov	r0, r3
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	007a1200 	.word	0x007a1200
 8001438:	080050a0 	.word	0x080050a0
 800143c:	080050b0 	.word	0x080050b0
 8001440:	003d0900 	.word	0x003d0900

08001444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001448:	4b02      	ldr	r3, [pc, #8]	@ (8001454 <HAL_RCC_GetHCLKFreq+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800145c:	f7ff fff2 	bl	8001444 <HAL_RCC_GetHCLKFreq>
 8001460:	4602      	mov	r2, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4903      	ldr	r1, [pc, #12]	@ (800147c <HAL_RCC_GetPCLK1Freq+0x24>)
 800146e:	5ccb      	ldrb	r3, [r1, r3]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	08005098 	.word	0x08005098

08001480 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	220f      	movs	r2, #15
 800148e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_RCC_GetClockConfig+0x58>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0203 	and.w	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_RCC_GetClockConfig+0x58>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_RCC_GetClockConfig+0x58>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_RCC_GetClockConfig+0x58>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0207 	and.w	r2, r3, #7
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40022000 	.word	0x40022000

080014e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <RCC_Delay+0x34>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <RCC_Delay+0x38>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0a5b      	lsrs	r3, r3, #9
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
 80014fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014fc:	bf00      	nop
  }
  while (Delay --);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1e5a      	subs	r2, r3, #1
 8001502:	60fa      	str	r2, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f9      	bne.n	80014fc <RCC_Delay+0x1c>
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	20000004 	.word	0x20000004
 8001518:	10624dd3 	.word	0x10624dd3

0800151c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e041      	b.n	80015b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f839 	bl	80015ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3304      	adds	r3, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f000 f9b4 	bl	80018c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d001      	beq.n	80015e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e03a      	b.n	800165a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <HAL_TIM_Base_Start_IT+0x98>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00e      	beq.n	8001624 <HAL_TIM_Base_Start_IT+0x58>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800160e:	d009      	beq.n	8001624 <HAL_TIM_Base_Start_IT+0x58>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <HAL_TIM_Base_Start_IT+0x9c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d004      	beq.n	8001624 <HAL_TIM_Base_Start_IT+0x58>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a13      	ldr	r2, [pc, #76]	@ (800166c <HAL_TIM_Base_Start_IT+0xa0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d111      	bne.n	8001648 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b06      	cmp	r3, #6
 8001634:	d010      	beq.n	8001658 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0201 	orr.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001646:	e007      	b.n	8001658 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40012c00 	.word	0x40012c00
 8001668:	40000400 	.word	0x40000400
 800166c:	40000800 	.word	0x40000800

08001670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b02      	cmp	r3, #2
 8001684:	d122      	bne.n	80016cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b02      	cmp	r3, #2
 8001692:	d11b      	bne.n	80016cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0202 	mvn.w	r2, #2
 800169c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f8ed 	bl	8001892 <HAL_TIM_IC_CaptureCallback>
 80016b8:	e005      	b.n	80016c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8e0 	bl	8001880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f8ef 	bl	80018a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d122      	bne.n	8001720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d11b      	bne.n	8001720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0204 	mvn.w	r2, #4
 80016f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2202      	movs	r2, #2
 80016f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f8c3 	bl	8001892 <HAL_TIM_IC_CaptureCallback>
 800170c:	e005      	b.n	800171a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8b6 	bl	8001880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f8c5 	bl	80018a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b08      	cmp	r3, #8
 800172c:	d122      	bne.n	8001774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b08      	cmp	r3, #8
 800173a:	d11b      	bne.n	8001774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f06f 0208 	mvn.w	r2, #8
 8001744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2204      	movs	r2, #4
 800174a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f899 	bl	8001892 <HAL_TIM_IC_CaptureCallback>
 8001760:	e005      	b.n	800176e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f88c 	bl	8001880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f89b 	bl	80018a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b10      	cmp	r3, #16
 8001780:	d122      	bne.n	80017c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2b10      	cmp	r3, #16
 800178e:	d11b      	bne.n	80017c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f06f 0210 	mvn.w	r2, #16
 8001798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2208      	movs	r2, #8
 800179e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f86f 	bl	8001892 <HAL_TIM_IC_CaptureCallback>
 80017b4:	e005      	b.n	80017c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f862 	bl	8001880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f871 	bl	80018a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d10e      	bne.n	80017f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d107      	bne.n	80017f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f06f 0201 	mvn.w	r2, #1
 80017ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7fe fe5e 	bl	80004b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	2b80      	cmp	r3, #128	@ 0x80
 8001800:	d10e      	bne.n	8001820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180c:	2b80      	cmp	r3, #128	@ 0x80
 800180e:	d107      	bne.n	8001820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8bf 	bl	800199e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800182a:	2b40      	cmp	r3, #64	@ 0x40
 800182c:	d10e      	bne.n	800184c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001838:	2b40      	cmp	r3, #64	@ 0x40
 800183a:	d107      	bne.n	800184c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f835 	bl	80018b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	2b20      	cmp	r3, #32
 8001858:	d10e      	bne.n	8001878 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	2b20      	cmp	r3, #32
 8001866:	d107      	bne.n	8001878 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0220 	mvn.w	r2, #32
 8001870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f88a 	bl	800198c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a29      	ldr	r2, [pc, #164]	@ (8001980 <TIM_Base_SetConfig+0xb8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00b      	beq.n	80018f8 <TIM_Base_SetConfig+0x30>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e6:	d007      	beq.n	80018f8 <TIM_Base_SetConfig+0x30>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a26      	ldr	r2, [pc, #152]	@ (8001984 <TIM_Base_SetConfig+0xbc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d003      	beq.n	80018f8 <TIM_Base_SetConfig+0x30>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a25      	ldr	r2, [pc, #148]	@ (8001988 <TIM_Base_SetConfig+0xc0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d108      	bne.n	800190a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <TIM_Base_SetConfig+0xb8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00b      	beq.n	800192a <TIM_Base_SetConfig+0x62>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001918:	d007      	beq.n	800192a <TIM_Base_SetConfig+0x62>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a19      	ldr	r2, [pc, #100]	@ (8001984 <TIM_Base_SetConfig+0xbc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d003      	beq.n	800192a <TIM_Base_SetConfig+0x62>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <TIM_Base_SetConfig+0xc0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d108      	bne.n	800193c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a07      	ldr	r2, [pc, #28]	@ (8001980 <TIM_Base_SetConfig+0xb8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d103      	bne.n	8001970 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	615a      	str	r2, [r3, #20]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40012c00 	.word	0x40012c00
 8001984:	40000400 	.word	0x40000400
 8001988:	40000800 	.word	0x40000800

0800198c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019b6:	f3ef 8305 	mrs	r3, IPSR
 80019ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80019bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019c2:	f3ef 8310 	mrs	r3, PRIMASK
 80019c6:	607b      	str	r3, [r7, #4]
  return(result);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <osKernelInitialize+0x32>
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <osKernelInitialize+0x60>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d109      	bne.n	80019ea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019d6:	f3ef 8311 	mrs	r3, BASEPRI
 80019da:	603b      	str	r3, [r7, #0]
  return(result);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80019e2:	f06f 0305 	mvn.w	r3, #5
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e00c      	b.n	8001a04 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <osKernelInitialize+0x60>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <osKernelInitialize+0x60>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e002      	b.n	8001a04 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000094 	.word	0x20000094

08001a14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a1a:	f3ef 8305 	mrs	r3, IPSR
 8001a1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10f      	bne.n	8001a46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a26:	f3ef 8310 	mrs	r3, PRIMASK
 8001a2a:	607b      	str	r3, [r7, #4]
  return(result);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <osKernelStart+0x32>
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <osKernelStart+0x64>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d109      	bne.n	8001a4e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a3a:	f3ef 8311 	mrs	r3, BASEPRI
 8001a3e:	603b      	str	r3, [r7, #0]
  return(result);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a46:	f06f 0305 	mvn.w	r3, #5
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e00e      	b.n	8001a6c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <osKernelStart+0x64>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <osKernelStart+0x64>)
 8001a58:	2202      	movs	r2, #2
 8001a5a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001a5c:	f001 fd1e 	bl	800349c <vTaskStartScheduler>
      stat = osOK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e002      	b.n	8001a6c <osKernelStart+0x58>
    } else {
      stat = osError;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000094 	.word	0x20000094

08001a7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b092      	sub	sp, #72	@ 0x48
 8001a80:	af04      	add	r7, sp, #16
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a8c:	f3ef 8305 	mrs	r3, IPSR
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 8094 	bne.w	8001bc2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a9e:	623b      	str	r3, [r7, #32]
  return(result);
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 808d 	bne.w	8001bc2 <osThreadNew+0x146>
 8001aa8:	4b48      	ldr	r3, [pc, #288]	@ (8001bcc <osThreadNew+0x150>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d106      	bne.n	8001abe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8001ab4:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 8082 	bne.w	8001bc2 <osThreadNew+0x146>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d07e      	beq.n	8001bc2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001ac8:	2318      	movs	r3, #24
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8001acc:	2300      	movs	r3, #0
 8001ace:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001ad0:	f107 031b 	add.w	r3, r7, #27
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d045      	beq.n	8001b6e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <osThreadNew+0x74>
        name = attr->name;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <osThreadNew+0x9a>
 8001b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b06:	2b38      	cmp	r3, #56	@ 0x38
 8001b08:	d805      	bhi.n	8001b16 <osThreadNew+0x9a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <osThreadNew+0x9e>
        return (NULL);
 8001b16:	2300      	movs	r3, #0
 8001b18:	e054      	b.n	8001bc4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00e      	beq.n	8001b50 <osThreadNew+0xd4>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b5b      	cmp	r3, #91	@ 0x5b
 8001b38:	d90a      	bls.n	8001b50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d006      	beq.n	8001b50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <osThreadNew+0xd4>
        mem = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4e:	e010      	b.n	8001b72 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10c      	bne.n	8001b72 <osThreadNew+0xf6>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d108      	bne.n	8001b72 <osThreadNew+0xf6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d104      	bne.n	8001b72 <osThreadNew+0xf6>
          mem = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b6c:	e001      	b.n	8001b72 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8001b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d110      	bne.n	8001b9a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b80:	9202      	str	r2, [sp, #8]
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f001 fab2 	bl	80030f8 <xTaskCreateStatic>
 8001b94:	4603      	mov	r3, r0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e013      	b.n	8001bc2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d110      	bne.n	8001bc2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f001 faff 	bl	80031b6 <xTaskCreate>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <osThreadNew+0x146>
          hTask = NULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001bc2:	697b      	ldr	r3, [r7, #20]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3738      	adds	r7, #56	@ 0x38
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000094 	.word	0x20000094

08001bd0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bd8:	f3ef 8305 	mrs	r3, IPSR
 8001bdc:	613b      	str	r3, [r7, #16]
  return(result);
 8001bde:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10f      	bne.n	8001c04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001be4:	f3ef 8310 	mrs	r3, PRIMASK
 8001be8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d109      	bne.n	8001c04 <osDelay+0x34>
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <osDelay+0x58>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d109      	bne.n	8001c0c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8001bfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <osDelay+0x3c>
    stat = osErrorISR;
 8001c04:	f06f 0305 	mvn.w	r3, #5
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e007      	b.n	8001c1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f001 fc0a 	bl	8003430 <vTaskDelay>
    }
  }

  return (stat);
 8001c1c:	697b      	ldr	r3, [r7, #20]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000094 	.word	0x20000094

08001c2c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	@ 0x30
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c3c:	f3ef 8305 	mrs	r3, IPSR
 8001c40:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f040 8086 	bne.w	8001d56 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c4e:	617b      	str	r3, [r7, #20]
  return(result);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d17f      	bne.n	8001d56 <osSemaphoreNew+0x12a>
 8001c56:	4b42      	ldr	r3, [pc, #264]	@ (8001d60 <osSemaphoreNew+0x134>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d105      	bne.n	8001c6a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8001c62:	613b      	str	r3, [r7, #16]
  return(result);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d175      	bne.n	8001d56 <osSemaphoreNew+0x12a>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d072      	beq.n	8001d56 <osSemaphoreNew+0x12a>
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d86e      	bhi.n	8001d56 <osSemaphoreNew+0x12a>
    mem = -1;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d015      	beq.n	8001cb0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <osSemaphoreNew+0x6e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b4f      	cmp	r3, #79	@ 0x4f
 8001c92:	d902      	bls.n	8001c9a <osSemaphoreNew+0x6e>
        mem = 1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	623b      	str	r3, [r7, #32]
 8001c98:	e00c      	b.n	8001cb4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d108      	bne.n	8001cb4 <osSemaphoreNew+0x88>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d104      	bne.n	8001cb4 <osSemaphoreNew+0x88>
          mem = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	e001      	b.n	8001cb4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d04c      	beq.n	8001d56 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d128      	bne.n	8001d14 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d10a      	bne.n	8001cde <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	9200      	str	r2, [sp, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f000 fa4f 	bl	8002178 <xQueueGenericCreateStatic>
 8001cda:	6278      	str	r0, [r7, #36]	@ 0x24
 8001cdc:	e005      	b.n	8001cea <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8001cde:	2203      	movs	r2, #3
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f000 fac4 	bl	8002270 <xQueueGenericCreate>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d022      	beq.n	8001d36 <osSemaphoreNew+0x10a>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01f      	beq.n	8001d36 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cfe:	f000 fb87 	bl	8002410 <xQueueGenericSend>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d016      	beq.n	8001d36 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8001d08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d0a:	f001 f823 	bl	8002d54 <vQueueDelete>
            hSemaphore = NULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d12:	e010      	b.n	8001d36 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d108      	bne.n	8001d2c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fb06 	bl	8002334 <xQueueCreateCountingSemaphoreStatic>
 8001d28:	6278      	str	r0, [r7, #36]	@ 0x24
 8001d2a:	e004      	b.n	8001d36 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fb39 	bl	80023a6 <xQueueCreateCountingSemaphore>
 8001d34:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00c      	beq.n	8001d56 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <osSemaphoreNew+0x11e>
          name = attr->name;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	e001      	b.n	8001d4e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001d4e:	69f9      	ldr	r1, [r7, #28]
 8001d50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d52:	f001 f94b 	bl	8002fec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3728      	adds	r7, #40	@ 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000094 	.word	0x20000094

08001d64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d103      	bne.n	8001d84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001d7c:	f06f 0303 	mvn.w	r3, #3
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e04b      	b.n	8001e1c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d84:	f3ef 8305 	mrs	r3, IPSR
 8001d88:	617b      	str	r3, [r7, #20]
  return(result);
 8001d8a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10f      	bne.n	8001db0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d90:	f3ef 8310 	mrs	r3, PRIMASK
 8001d94:	613b      	str	r3, [r7, #16]
  return(result);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <osSemaphoreAcquire+0x4c>
 8001d9c:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <osSemaphoreAcquire+0xc4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d128      	bne.n	8001df6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001da4:	f3ef 8311 	mrs	r3, BASEPRI
 8001da8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d022      	beq.n	8001df6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8001db6:	f06f 0303 	mvn.w	r3, #3
 8001dba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001dbc:	e02d      	b.n	8001e1a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2100      	movs	r1, #0
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	f000 ff40 	bl	8002c50 <xQueueReceiveFromISR>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d003      	beq.n	8001dde <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8001dd6:	f06f 0302 	mvn.w	r3, #2
 8001dda:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001ddc:	e01d      	b.n	8001e1a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01a      	beq.n	8001e1a <osSemaphoreAcquire+0xb6>
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <osSemaphoreAcquire+0xc8>)
 8001de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f3bf 8f4f 	dsb	sy
 8001df0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8001df4:	e011      	b.n	8001e1a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	69b8      	ldr	r0, [r7, #24]
 8001dfa:	f000 fe19 	bl	8002a30 <xQueueSemaphoreTake>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d00b      	beq.n	8001e1c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8001e0a:	f06f 0301 	mvn.w	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	e004      	b.n	8001e1c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8001e12:	f06f 0302 	mvn.w	r3, #2
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	e000      	b.n	8001e1c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8001e1a:	bf00      	nop
      }
    }
  }

  return (stat);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000094 	.word	0x20000094
 8001e2c:	e000ed04 	.word	0xe000ed04

08001e30 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8001e46:	f06f 0303 	mvn.w	r3, #3
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	e03e      	b.n	8001ecc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e4e:	f3ef 8305 	mrs	r3, IPSR
 8001e52:	617b      	str	r3, [r7, #20]
  return(result);
 8001e54:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5e:	613b      	str	r3, [r7, #16]
  return(result);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <osSemaphoreRelease+0x4a>
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <osSemaphoreRelease+0xa8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d120      	bne.n	8001eb0 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8001e72:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01a      	beq.n	8001eb0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	69b8      	ldr	r0, [r7, #24]
 8001e86:	f000 fc60 	bl	800274a <xQueueGiveFromISR>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d003      	beq.n	8001e98 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8001e90:	f06f 0302 	mvn.w	r3, #2
 8001e94:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001e96:	e018      	b.n	8001eca <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d015      	beq.n	8001eca <osSemaphoreRelease+0x9a>
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <osSemaphoreRelease+0xac>)
 8001ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001eae:	e00c      	b.n	8001eca <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	69b8      	ldr	r0, [r7, #24]
 8001eb8:	f000 faaa 	bl	8002410 <xQueueGenericSend>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d004      	beq.n	8001ecc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8001ec2:	f06f 0302 	mvn.w	r3, #2
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	e000      	b.n	8001ecc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001eca:	bf00      	nop
    }
  }

  return (stat);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3720      	adds	r7, #32
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000094 	.word	0x20000094
 8001edc:	e000ed04 	.word	0xe000ed04

08001ee0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a06      	ldr	r2, [pc, #24]	@ (8001f08 <vApplicationGetIdleTaskMemory+0x28>)
 8001ef0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <vApplicationGetIdleTaskMemory+0x2c>)
 8001ef6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2280      	movs	r2, #128	@ 0x80
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	20000098 	.word	0x20000098
 8001f0c:	200000f4 	.word	0x200000f4

08001f10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <vApplicationGetTimerTaskMemory+0x2c>)
 8001f20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <vApplicationGetTimerTaskMemory+0x30>)
 8001f26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f2e:	601a      	str	r2, [r3, #0]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	200002f4 	.word	0x200002f4
 8001f40:	20000350 	.word	0x20000350

08001f44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f103 0208 	add.w	r2, r3, #8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f103 0208 	add.w	r2, r3, #8
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f103 0208 	add.w	r2, r3, #8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff6:	d103      	bne.n	8002000 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	e00c      	b.n	800201a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3308      	adds	r3, #8
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e002      	b.n	800200e <vListInsert+0x2e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d2f6      	bcs.n	8002008 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	601a      	str	r2, [r3, #0]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6892      	ldr	r2, [r2, #8]
 8002066:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6852      	ldr	r2, [r2, #4]
 8002070:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	d103      	bne.n	8002084 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1e5a      	subs	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
	...

080020a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80020d0:	f002 fc34 	bl	800493c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020dc:	68f9      	ldr	r1, [r7, #12]
 80020de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	441a      	add	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002100:	3b01      	subs	r3, #1
 8002102:	68f9      	ldr	r1, [r7, #12]
 8002104:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	441a      	add	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	22ff      	movs	r2, #255	@ 0xff
 8002114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	22ff      	movs	r2, #255	@ 0xff
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d114      	bne.n	8002150 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d01a      	beq.n	8002164 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3310      	adds	r3, #16
 8002132:	4618      	mov	r0, r3
 8002134:	f001 fc44 	bl	80039c0 <xTaskRemoveFromEventList>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d012      	beq.n	8002164 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <xQueueGenericReset+0xd0>)
 8002140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	e009      	b.n	8002164 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3310      	adds	r3, #16
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fef5 	bl	8001f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3324      	adds	r3, #36	@ 0x24
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fef0 	bl	8001f44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002164:	f002 fc1a 	bl	800499c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002168:	2301      	movs	r3, #1
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000ed04 	.word	0xe000ed04

08002178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	@ 0x38
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10b      	bne.n	80021a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800218c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10b      	bne.n	80021c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80021aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ae:	f383 8811 	msr	BASEPRI, r3
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	f3bf 8f4f 	dsb	sy
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	e7fd      	b.n	80021be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <xQueueGenericCreateStatic+0x56>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <xQueueGenericCreateStatic+0x5a>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <xQueueGenericCreateStatic+0x5c>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10b      	bne.n	80021f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80021d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021dc:	f383 8811 	msr	BASEPRI, r3
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	623b      	str	r3, [r7, #32]
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <xQueueGenericCreateStatic+0x84>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <xQueueGenericCreateStatic+0x88>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <xQueueGenericCreateStatic+0x8a>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10b      	bne.n	800221e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	61fb      	str	r3, [r7, #28]
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	e7fd      	b.n	800221a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800221e:	2350      	movs	r3, #80	@ 0x50
 8002220:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b50      	cmp	r3, #80	@ 0x50
 8002226:	d00b      	beq.n	8002240 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	61bb      	str	r3, [r7, #24]
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800224a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002252:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f844 	bl	80022ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002268:	4618      	mov	r0, r3
 800226a:	3730      	adds	r7, #48	@ 0x30
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <xQueueGenericCreate+0x2c>
	__asm volatile
 8002284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	613b      	str	r3, [r7, #16]
}
 8002296:	bf00      	nop
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e004      	b.n	80022b2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3350      	adds	r3, #80	@ 0x50
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 fc42 	bl	8004b40 <pvPortMalloc>
 80022bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00f      	beq.n	80022e4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3350      	adds	r3, #80	@ 0x50
 80022c8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022d2:	79fa      	ldrb	r2, [r7, #7]
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f805 	bl	80022ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80022e4:	69bb      	ldr	r3, [r7, #24]
	}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e002      	b.n	8002310 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800231c:	2101      	movs	r1, #1
 800231e:	69b8      	ldr	r0, [r7, #24]
 8002320:	f7ff fec0 	bl	80020a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10b      	bne.n	800235e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	61bb      	str	r3, [r7, #24]
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	e7fd      	b.n	800235a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	429a      	cmp	r2, r3
 8002364:	d90b      	bls.n	800237e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800236a:	f383 8811 	msr	BASEPRI, r3
 800236e:	f3bf 8f6f 	isb	sy
 8002372:	f3bf 8f4f 	dsb	sy
 8002376:	617b      	str	r3, [r7, #20]
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	e7fd      	b.n	800237a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800237e:	2302      	movs	r3, #2
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff fef5 	bl	8002178 <xQueueGenericCreateStatic>
 800238e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800239c:	69fb      	ldr	r3, [r7, #28]
	}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10b      	bne.n	80023ce <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80023b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	613b      	str	r3, [r7, #16]
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	e7fd      	b.n	80023ca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d90b      	bls.n	80023ee <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80023d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	60fb      	str	r3, [r7, #12]
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	e7fd      	b.n	80023ea <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80023ee:	2202      	movs	r2, #2
 80023f0:	2100      	movs	r1, #0
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ff3c 	bl	8002270 <xQueueGenericCreate>
 80023f8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002406:	697b      	ldr	r3, [r7, #20]
	}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08e      	sub	sp, #56	@ 0x38
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <xQueueGenericSend+0x34>
	__asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d103      	bne.n	8002452 <xQueueGenericSend+0x42>
 800244a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <xQueueGenericSend+0x46>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <xQueueGenericSend+0x48>
 8002456:	2300      	movs	r3, #0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <xQueueGenericSend+0x64>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d103      	bne.n	8002482 <xQueueGenericSend+0x72>
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <xQueueGenericSend+0x76>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueueGenericSend+0x78>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10b      	bne.n	80024a4 <xQueueGenericSend+0x94>
	__asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	623b      	str	r3, [r7, #32]
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024a4:	f001 fc50 	bl	8003d48 <xTaskGetSchedulerState>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <xQueueGenericSend+0xa4>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <xQueueGenericSend+0xa8>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <xQueueGenericSend+0xaa>
 80024b8:	2300      	movs	r3, #0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10b      	bne.n	80024d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80024be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	61fb      	str	r3, [r7, #28]
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	e7fd      	b.n	80024d2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024d6:	f002 fa31 	bl	800493c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <xQueueGenericSend+0xdc>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d129      	bne.n	8002540 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024f2:	f000 fc6a 	bl	8002dca <prvCopyDataToQueue>
 80024f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d010      	beq.n	8002522 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	3324      	adds	r3, #36	@ 0x24
 8002504:	4618      	mov	r0, r3
 8002506:	f001 fa5b 	bl	80039c0 <xTaskRemoveFromEventList>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002510:	4b3f      	ldr	r3, [pc, #252]	@ (8002610 <xQueueGenericSend+0x200>)
 8002512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	e00a      	b.n	8002538 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002528:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <xQueueGenericSend+0x200>)
 800252a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002538:	f002 fa30 	bl	800499c <vPortExitCritical>
				return pdPASS;
 800253c:	2301      	movs	r3, #1
 800253e:	e063      	b.n	8002608 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002546:	f002 fa29 	bl	800499c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800254a:	2300      	movs	r3, #0
 800254c:	e05c      	b.n	8002608 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800254e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4618      	mov	r0, r3
 800255a:	f001 fa95 	bl	8003a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800255e:	2301      	movs	r3, #1
 8002560:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002562:	f002 fa1b 	bl	800499c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002566:	f001 f801 	bl	800356c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800256a:	f002 f9e7 	bl	800493c <vPortEnterCritical>
 800256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002574:	b25b      	sxtb	r3, r3
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d103      	bne.n	8002584 <xQueueGenericSend+0x174>
 800257c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800258a:	b25b      	sxtb	r3, r3
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d103      	bne.n	800259a <xQueueGenericSend+0x18a>
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800259a:	f002 f9ff 	bl	800499c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800259e:	1d3a      	adds	r2, r7, #4
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fa84 	bl	8003ab4 <xTaskCheckForTimeOut>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d124      	bne.n	80025fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025b4:	f000 fd01 	bl	8002fba <prvIsQueueFull>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d018      	beq.n	80025f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	3310      	adds	r3, #16
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 f9a8 	bl	800391c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025ce:	f000 fc8c 	bl	8002eea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025d2:	f000 ffd9 	bl	8003588 <xTaskResumeAll>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f af7c 	bne.w	80024d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80025de:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <xQueueGenericSend+0x200>)
 80025e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	e772      	b.n	80024d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025f2:	f000 fc7a 	bl	8002eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025f6:	f000 ffc7 	bl	8003588 <xTaskResumeAll>
 80025fa:	e76c      	b.n	80024d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025fe:	f000 fc74 	bl	8002eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002602:	f000 ffc1 	bl	8003588 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002606:	2300      	movs	r3, #0
		}
	}
}
 8002608:	4618      	mov	r0, r3
 800260a:	3738      	adds	r7, #56	@ 0x38
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	e000ed04 	.word	0xe000ed04

08002614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	@ 0x38
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <xQueueGenericSendFromISR+0x3e>
 800264a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <xQueueGenericSendFromISR+0x42>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <xQueueGenericSendFromISR+0x44>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	623b      	str	r3, [r7, #32]
}
 800266e:	bf00      	nop
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d103      	bne.n	8002682 <xQueueGenericSendFromISR+0x6e>
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <xQueueGenericSendFromISR+0x72>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericSendFromISR+0x74>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10b      	bne.n	80026a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	61fb      	str	r3, [r7, #28]
}
 800269e:	bf00      	nop
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026a4:	f002 fa0c 	bl	8004ac0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026a8:	f3ef 8211 	mrs	r2, BASEPRI
 80026ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	61ba      	str	r2, [r7, #24]
 80026be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d302      	bcc.n	80026d6 <xQueueGenericSendFromISR+0xc2>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d12c      	bne.n	8002730 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026e6:	f000 fb70 	bl	8002dca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d112      	bne.n	800271a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d016      	beq.n	800272a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fe:	3324      	adds	r3, #36	@ 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	f001 f95d 	bl	80039c0 <xTaskRemoveFromEventList>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e007      	b.n	800272a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800271a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800271e:	3301      	adds	r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	b25a      	sxtb	r2, r3
 8002724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800272a:	2301      	movs	r3, #1
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800272e:	e001      	b.n	8002734 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002730:	2300      	movs	r3, #0
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34
 8002734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002736:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800273e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002742:	4618      	mov	r0, r3
 8002744:	3738      	adds	r7, #56	@ 0x38
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b08e      	sub	sp, #56	@ 0x38
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	623b      	str	r3, [r7, #32]
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	e7fd      	b.n	8002772 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	61fb      	str	r3, [r7, #28]
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	e7fd      	b.n	8002792 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <xQueueGiveFromISR+0x5c>
 800279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <xQueueGiveFromISR+0x60>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <xQueueGiveFromISR+0x62>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80027b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	61bb      	str	r3, [r7, #24]
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027c8:	f002 f97a 	bl	8004ac0 <vPortValidateInterruptPriority>
	__asm volatile
 80027cc:	f3ef 8211 	mrs	r2, BASEPRI
 80027d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	617a      	str	r2, [r7, #20]
 80027e2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80027e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d22b      	bcs.n	8002850 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800280a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d112      	bne.n	800283a <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	d016      	beq.n	800284a <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800281c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281e:	3324      	adds	r3, #36	@ 0x24
 8002820:	4618      	mov	r0, r3
 8002822:	f001 f8cd 	bl	80039c0 <xTaskRemoveFromEventList>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00e      	beq.n	800284a <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e007      	b.n	800284a <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800283a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800283e:	3301      	adds	r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	b25a      	sxtb	r2, r3
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800284a:	2301      	movs	r3, #1
 800284c:	637b      	str	r3, [r7, #52]	@ 0x34
 800284e:	e001      	b.n	8002854 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002850:	2300      	movs	r3, #0
 8002852:	637b      	str	r3, [r7, #52]	@ 0x34
 8002854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002856:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f383 8811 	msr	BASEPRI, r3
}
 800285e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002862:	4618      	mov	r0, r3
 8002864:	3738      	adds	r7, #56	@ 0x38
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	@ 0x30
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002878:	2300      	movs	r3, #0
 800287a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <xQueueReceive+0x32>
	__asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	623b      	str	r3, [r7, #32]
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	e7fd      	b.n	800289a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d103      	bne.n	80028ac <xQueueReceive+0x40>
 80028a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <xQueueReceive+0x44>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <xQueueReceive+0x46>
 80028b0:	2300      	movs	r3, #0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10b      	bne.n	80028ce <xQueueReceive+0x62>
	__asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	61fb      	str	r3, [r7, #28]
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	e7fd      	b.n	80028ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028ce:	f001 fa3b 	bl	8003d48 <xTaskGetSchedulerState>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <xQueueReceive+0x72>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <xQueueReceive+0x76>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <xQueueReceive+0x78>
 80028e2:	2300      	movs	r3, #0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10b      	bne.n	8002900 <xQueueReceive+0x94>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	61bb      	str	r3, [r7, #24]
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002900:	f002 f81c 	bl	800493c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01f      	beq.n	8002950 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002914:	f000 fac3 	bl	8002e9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	1e5a      	subs	r2, r3, #1
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00f      	beq.n	8002948 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292a:	3310      	adds	r3, #16
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f847 	bl	80039c0 <xTaskRemoveFromEventList>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002938:	4b3c      	ldr	r3, [pc, #240]	@ (8002a2c <xQueueReceive+0x1c0>)
 800293a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002948:	f002 f828 	bl	800499c <vPortExitCritical>
				return pdPASS;
 800294c:	2301      	movs	r3, #1
 800294e:	e069      	b.n	8002a24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002956:	f002 f821 	bl	800499c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800295a:	2300      	movs	r3, #0
 800295c:	e062      	b.n	8002a24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800295e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d106      	bne.n	8002972 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f88d 	bl	8003a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800296e:	2301      	movs	r3, #1
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002972:	f002 f813 	bl	800499c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002976:	f000 fdf9 	bl	800356c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800297a:	f001 ffdf 	bl	800493c <vPortEnterCritical>
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002984:	b25b      	sxtb	r3, r3
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d103      	bne.n	8002994 <xQueueReceive+0x128>
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800299a:	b25b      	sxtb	r3, r3
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d103      	bne.n	80029aa <xQueueReceive+0x13e>
 80029a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029aa:	f001 fff7 	bl	800499c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029ae:	1d3a      	adds	r2, r7, #4
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 f87c 	bl	8003ab4 <xTaskCheckForTimeOut>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d123      	bne.n	8002a0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029c4:	f000 fae3 	bl	8002f8e <prvIsQueueEmpty>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d017      	beq.n	80029fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d0:	3324      	adds	r3, #36	@ 0x24
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 ffa0 	bl	800391c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029de:	f000 fa84 	bl	8002eea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029e2:	f000 fdd1 	bl	8003588 <xTaskResumeAll>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d189      	bne.n	8002900 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80029ec:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <xQueueReceive+0x1c0>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	e780      	b.n	8002900 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a00:	f000 fa73 	bl	8002eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a04:	f000 fdc0 	bl	8003588 <xTaskResumeAll>
 8002a08:	e77a      	b.n	8002900 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a0c:	f000 fa6d 	bl	8002eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a10:	f000 fdba 	bl	8003588 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a16:	f000 faba 	bl	8002f8e <prvIsQueueEmpty>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f43f af6f 	beq.w	8002900 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3730      	adds	r7, #48	@ 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	e000ed04 	.word	0xe000ed04

08002a30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	@ 0x38
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	623b      	str	r3, [r7, #32]
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	61fb      	str	r3, [r7, #28]
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a84:	f001 f960 	bl	8003d48 <xTaskGetSchedulerState>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <xQueueSemaphoreTake+0x64>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <xQueueSemaphoreTake+0x68>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <xQueueSemaphoreTake+0x6a>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10b      	bne.n	8002ab6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	61bb      	str	r3, [r7, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	e7fd      	b.n	8002ab2 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ab6:	f001 ff41 	bl	800493c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d024      	beq.n	8002b10 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002acc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d104      	bne.n	8002ae0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002ad6:	f001 fabb 	bl	8004050 <pvTaskIncrementMutexHeldCount>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ade:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00f      	beq.n	8002b08 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	3310      	adds	r3, #16
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 ff67 	bl	80039c0 <xTaskRemoveFromEventList>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002af8:	4b54      	ldr	r3, [pc, #336]	@ (8002c4c <xQueueSemaphoreTake+0x21c>)
 8002afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b08:	f001 ff48 	bl	800499c <vPortExitCritical>
				return pdPASS;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e098      	b.n	8002c42 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d112      	bne.n	8002b3c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	617b      	str	r3, [r7, #20]
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002b34:	f001 ff32 	bl	800499c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e082      	b.n	8002c42 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 ff9e 	bl	8003a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b50:	f001 ff24 	bl	800499c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b54:	f000 fd0a 	bl	800356c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b58:	f001 fef0 	bl	800493c <vPortEnterCritical>
 8002b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b62:	b25b      	sxtb	r3, r3
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d103      	bne.n	8002b72 <xQueueSemaphoreTake+0x142>
 8002b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d103      	bne.n	8002b88 <xQueueSemaphoreTake+0x158>
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b88:	f001 ff08 	bl	800499c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b8c:	463a      	mov	r2, r7
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 ff8d 	bl	8003ab4 <xTaskCheckForTimeOut>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d132      	bne.n	8002c06 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ba0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ba2:	f000 f9f4 	bl	8002f8e <prvIsQueueEmpty>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d026      	beq.n	8002bfa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002bb4:	f001 fec2 	bl	800493c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 f8e1 	bl	8003d84 <xTaskPriorityInherit>
 8002bc2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002bc4:	f001 feea 	bl	800499c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bca:	3324      	adds	r3, #36	@ 0x24
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fea3 	bl	800391c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bd8:	f000 f987 	bl	8002eea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bdc:	f000 fcd4 	bl	8003588 <xTaskResumeAll>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f47f af67 	bne.w	8002ab6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002be8:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <xQueueSemaphoreTake+0x21c>)
 8002bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	e75d      	b.n	8002ab6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002bfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bfc:	f000 f975 	bl	8002eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c00:	f000 fcc2 	bl	8003588 <xTaskResumeAll>
 8002c04:	e757      	b.n	8002ab6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002c06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c08:	f000 f96f 	bl	8002eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c0c:	f000 fcbc 	bl	8003588 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c12:	f000 f9bc 	bl	8002f8e <prvIsQueueEmpty>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f43f af4c 	beq.w	8002ab6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002c24:	f001 fe8a 	bl	800493c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002c28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c2a:	f000 f8b7 	bl	8002d9c <prvGetDisinheritPriorityAfterTimeout>
 8002c2e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 f982 	bl	8003f40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002c3c:	f001 feae 	bl	800499c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3738      	adds	r7, #56	@ 0x38
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000ed04 	.word	0xe000ed04

08002c50 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	@ 0x38
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10b      	bne.n	8002c7e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	623b      	str	r3, [r7, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	e7fd      	b.n	8002c7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <xQueueReceiveFromISR+0x3c>
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <xQueueReceiveFromISR+0x40>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <xQueueReceiveFromISR+0x42>
 8002c90:	2300      	movs	r3, #0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	61fb      	str	r3, [r7, #28]
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	e7fd      	b.n	8002caa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cae:	f001 ff07 	bl	8004ac0 <vPortValidateInterruptPriority>
	__asm volatile
 8002cb2:	f3ef 8211 	mrs	r2, BASEPRI
 8002cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	61ba      	str	r2, [r7, #24]
 8002cc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002cca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d02f      	beq.n	8002d3a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ce8:	f000 f8d9 	bl	8002e9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cee:	1e5a      	subs	r2, r3, #1
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002cf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d112      	bne.n	8002d24 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	3310      	adds	r3, #16
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fe58 	bl	80039c0 <xTaskRemoveFromEventList>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00e      	beq.n	8002d34 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e007      	b.n	8002d34 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002d24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	b25a      	sxtb	r2, r3
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002d34:	2301      	movs	r3, #1
 8002d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d38:	e001      	b.n	8002d3e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f383 8811 	msr	BASEPRI, r3
}
 8002d48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3738      	adds	r7, #56	@ 0x38
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10b      	bne.n	8002d7e <vQueueDelete+0x2a>
	__asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	60bb      	str	r3, [r7, #8]
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	e7fd      	b.n	8002d7a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f95c 	bl	800303c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f001 ff9e 	bl	8004cd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e001      	b.n	8002dbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
	}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dde:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10d      	bne.n	8002e04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d14d      	bne.n	8002e8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 f833 	bl	8003e60 <xTaskPriorityDisinherit>
 8002dfa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e043      	b.n	8002e8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d119      	bne.n	8002e3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6898      	ldr	r0, [r3, #8]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	461a      	mov	r2, r3
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	f002 f89d 	bl	8004f54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	441a      	add	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d32b      	bcc.n	8002e8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	e026      	b.n	8002e8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68d8      	ldr	r0, [r3, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	461a      	mov	r2, r3
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	f002 f883 	bl	8004f54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	425b      	negs	r3, r3
 8002e58:	441a      	add	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d207      	bcs.n	8002e7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	425b      	negs	r3, r3
 8002e74:	441a      	add	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d105      	bne.n	8002e8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002e94:	697b      	ldr	r3, [r7, #20]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d018      	beq.n	8002ee2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d303      	bcc.n	8002ed2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	461a      	mov	r2, r3
 8002edc:	6838      	ldr	r0, [r7, #0]
 8002ede:	f002 f839 	bl	8004f54 <memcpy>
	}
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ef2:	f001 fd23 	bl	800493c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002efc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002efe:	e011      	b.n	8002f24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d012      	beq.n	8002f2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3324      	adds	r3, #36	@ 0x24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fd57 	bl	80039c0 <xTaskRemoveFromEventList>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f18:	f000 fe30 	bl	8003b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	dce9      	bgt.n	8002f00 <prvUnlockQueue+0x16>
 8002f2c:	e000      	b.n	8002f30 <prvUnlockQueue+0x46>
					break;
 8002f2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	22ff      	movs	r2, #255	@ 0xff
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002f38:	f001 fd30 	bl	800499c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f3c:	f001 fcfe 	bl	800493c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f48:	e011      	b.n	8002f6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3310      	adds	r3, #16
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fd32 	bl	80039c0 <xTaskRemoveFromEventList>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f62:	f000 fe0b 	bl	8003b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	dce9      	bgt.n	8002f4a <prvUnlockQueue+0x60>
 8002f76:	e000      	b.n	8002f7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	22ff      	movs	r2, #255	@ 0xff
 8002f7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002f82:	f001 fd0b 	bl	800499c <vPortExitCritical>
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f96:	f001 fcd1 	bl	800493c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e001      	b.n	8002fac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fac:	f001 fcf6 	bl	800499c <vPortExitCritical>

	return xReturn;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fc2:	f001 fcbb 	bl	800493c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d102      	bne.n	8002fd8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e001      	b.n	8002fdc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fdc:	f001 fcde 	bl	800499c <vPortExitCritical>

	return xReturn;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e014      	b.n	8003026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8003038 <vQueueAddToRegistry+0x4c>)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10b      	bne.n	8003020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003008:	490b      	ldr	r1, [pc, #44]	@ (8003038 <vQueueAddToRegistry+0x4c>)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003012:	4a09      	ldr	r2, [pc, #36]	@ (8003038 <vQueueAddToRegistry+0x4c>)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800301e:	e006      	b.n	800302e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3301      	adds	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b07      	cmp	r3, #7
 800302a:	d9e7      	bls.n	8002ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	20000750 	.word	0x20000750

0800303c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e016      	b.n	8003078 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800304a:	4a10      	ldr	r2, [pc, #64]	@ (800308c <vQueueUnregisterQueue+0x50>)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d10b      	bne.n	8003072 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800305a:	4a0c      	ldr	r2, [pc, #48]	@ (800308c <vQueueUnregisterQueue+0x50>)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2100      	movs	r1, #0
 8003060:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003064:	4a09      	ldr	r2, [pc, #36]	@ (800308c <vQueueUnregisterQueue+0x50>)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	2200      	movs	r2, #0
 800306e:	605a      	str	r2, [r3, #4]
				break;
 8003070:	e006      	b.n	8003080 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3301      	adds	r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b07      	cmp	r3, #7
 800307c:	d9e5      	bls.n	800304a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000750 	.word	0x20000750

08003090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030a0:	f001 fc4c 	bl	800493c <vPortEnterCritical>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030aa:	b25b      	sxtb	r3, r3
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d103      	bne.n	80030ba <vQueueWaitForMessageRestricted+0x2a>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d103      	bne.n	80030d0 <vQueueWaitForMessageRestricted+0x40>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030d0:	f001 fc64 	bl	800499c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	3324      	adds	r3, #36	@ 0x24
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fc3f 	bl	8003968 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030ea:	6978      	ldr	r0, [r7, #20]
 80030ec:	f7ff fefd 	bl	8002eea <prvUnlockQueue>
	}
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08e      	sub	sp, #56	@ 0x38
 80030fc:	af04      	add	r7, sp, #16
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10b      	bne.n	8003124 <xTaskCreateStatic+0x2c>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	623b      	str	r3, [r7, #32]
}
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <xTaskCreateStatic+0x4a>
	__asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	61fb      	str	r3, [r7, #28]
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003142:	235c      	movs	r3, #92	@ 0x5c
 8003144:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b5c      	cmp	r3, #92	@ 0x5c
 800314a:	d00b      	beq.n	8003164 <xTaskCreateStatic+0x6c>
	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	61bb      	str	r3, [r7, #24]
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	e7fd      	b.n	8003160 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01e      	beq.n	80031a8 <xTaskCreateStatic+0xb0>
 800316a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01b      	beq.n	80031a8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003182:	2300      	movs	r3, #0
 8003184:	9303      	str	r3, [sp, #12]
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	9302      	str	r3, [sp, #8]
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f850 	bl	8003240 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031a2:	f000 f8d5 	bl	8003350 <prvAddNewTaskToReadyList>
 80031a6:	e001      	b.n	80031ac <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031ac:	697b      	ldr	r3, [r7, #20]
	}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3728      	adds	r7, #40	@ 0x28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b08c      	sub	sp, #48	@ 0x30
 80031ba:	af04      	add	r7, sp, #16
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 fcb8 	bl	8004b40 <pvPortMalloc>
 80031d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00e      	beq.n	80031f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80031d8:	205c      	movs	r0, #92	@ 0x5c
 80031da:	f001 fcb1 	bl	8004b40 <pvPortMalloc>
 80031de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80031ec:	e005      	b.n	80031fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031ee:	6978      	ldr	r0, [r7, #20]
 80031f0:	f001 fd6e 	bl	8004cd0 <vPortFree>
 80031f4:	e001      	b.n	80031fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d017      	beq.n	8003230 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	2300      	movs	r3, #0
 800320c:	9303      	str	r3, [sp, #12]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	9302      	str	r3, [sp, #8]
 8003212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f80e 	bl	8003240 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003224:	69f8      	ldr	r0, [r7, #28]
 8003226:	f000 f893 	bl	8003350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800322a:	2301      	movs	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e002      	b.n	8003236 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003230:	f04f 33ff 	mov.w	r3, #4294967295
 8003234:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003236:	69bb      	ldr	r3, [r7, #24]
	}
 8003238:	4618      	mov	r0, r3
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	461a      	mov	r2, r3
 8003258:	21a5      	movs	r1, #165	@ 0xa5
 800325a:	f001 fe4f 	bl	8004efc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003268:	3b01      	subs	r3, #1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f023 0307 	bic.w	r3, r3, #7
 8003276:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	617b      	str	r3, [r7, #20]
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	e7fd      	b.n	8003296 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	e012      	b.n	80032c6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	7819      	ldrb	r1, [r3, #0]
 80032a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	3334      	adds	r3, #52	@ 0x34
 80032b0:	460a      	mov	r2, r1
 80032b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d006      	beq.n	80032ce <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	3301      	adds	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b0f      	cmp	r3, #15
 80032ca:	d9e9      	bls.n	80032a0 <prvInitialiseNewTask+0x60>
 80032cc:	e000      	b.n	80032d0 <prvInitialiseNewTask+0x90>
		{
			break;
 80032ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	2b37      	cmp	r3, #55	@ 0x37
 80032dc:	d901      	bls.n	80032e2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032de:	2337      	movs	r3, #55	@ 0x37
 80032e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f0:	2200      	movs	r2, #0
 80032f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f6:	3304      	adds	r3, #4
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fe42 	bl	8001f82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003300:	3318      	adds	r3, #24
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fe3d 	bl	8001f82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800330c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003316:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800331c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003320:	2200      	movs	r2, #0
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	68f9      	ldr	r1, [r7, #12]
 8003330:	69b8      	ldr	r0, [r7, #24]
 8003332:	f001 fa15 	bl	8004760 <pxPortInitialiseStack>
 8003336:	4602      	mov	r2, r0
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800333c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003346:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003348:	bf00      	nop
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003358:	f001 faf0 	bl	800493c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800335c:	4b2d      	ldr	r3, [pc, #180]	@ (8003414 <prvAddNewTaskToReadyList+0xc4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	4a2c      	ldr	r2, [pc, #176]	@ (8003414 <prvAddNewTaskToReadyList+0xc4>)
 8003364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003366:	4b2c      	ldr	r3, [pc, #176]	@ (8003418 <prvAddNewTaskToReadyList+0xc8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800336e:	4a2a      	ldr	r2, [pc, #168]	@ (8003418 <prvAddNewTaskToReadyList+0xc8>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003374:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <prvAddNewTaskToReadyList+0xc4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d110      	bne.n	800339e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800337c:	f000 fc22 	bl	8003bc4 <prvInitialiseTaskLists>
 8003380:	e00d      	b.n	800339e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003382:	4b26      	ldr	r3, [pc, #152]	@ (800341c <prvAddNewTaskToReadyList+0xcc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800338a:	4b23      	ldr	r3, [pc, #140]	@ (8003418 <prvAddNewTaskToReadyList+0xc8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	429a      	cmp	r2, r3
 8003396:	d802      	bhi.n	800339e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003398:	4a1f      	ldr	r2, [pc, #124]	@ (8003418 <prvAddNewTaskToReadyList+0xc8>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800339e:	4b20      	ldr	r3, [pc, #128]	@ (8003420 <prvAddNewTaskToReadyList+0xd0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <prvAddNewTaskToReadyList+0xd0>)
 80033a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <prvAddNewTaskToReadyList+0xd0>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003424 <prvAddNewTaskToReadyList+0xd4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d903      	bls.n	80033c4 <prvAddNewTaskToReadyList+0x74>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	4a18      	ldr	r2, [pc, #96]	@ (8003424 <prvAddNewTaskToReadyList+0xd4>)
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4a15      	ldr	r2, [pc, #84]	@ (8003428 <prvAddNewTaskToReadyList+0xd8>)
 80033d2:	441a      	add	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f7fe fddd 	bl	8001f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033e0:	f001 fadc 	bl	800499c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033e4:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <prvAddNewTaskToReadyList+0xcc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <prvAddNewTaskToReadyList+0xc8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d207      	bcs.n	800340a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033fa:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <prvAddNewTaskToReadyList+0xdc>)
 80033fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000c64 	.word	0x20000c64
 8003418:	20000790 	.word	0x20000790
 800341c:	20000c70 	.word	0x20000c70
 8003420:	20000c80 	.word	0x20000c80
 8003424:	20000c6c 	.word	0x20000c6c
 8003428:	20000794 	.word	0x20000794
 800342c:	e000ed04 	.word	0xe000ed04

08003430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d018      	beq.n	8003474 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003442:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <vTaskDelay+0x64>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <vTaskDelay+0x32>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	60bb      	str	r3, [r7, #8]
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	e7fd      	b.n	800345e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003462:	f000 f883 	bl	800356c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003466:	2100      	movs	r1, #0
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fe05 	bl	8004078 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800346e:	f000 f88b 	bl	8003588 <xTaskResumeAll>
 8003472:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d107      	bne.n	800348a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <vTaskDelay+0x68>)
 800347c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000c8c 	.word	0x20000c8c
 8003498:	e000ed04 	.word	0xe000ed04

0800349c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	@ 0x28
 80034a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034aa:	463a      	mov	r2, r7
 80034ac:	1d39      	adds	r1, r7, #4
 80034ae:	f107 0308 	add.w	r3, r7, #8
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fd14 	bl	8001ee0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	9202      	str	r2, [sp, #8]
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	2300      	movs	r3, #0
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2300      	movs	r3, #0
 80034c8:	460a      	mov	r2, r1
 80034ca:	4922      	ldr	r1, [pc, #136]	@ (8003554 <vTaskStartScheduler+0xb8>)
 80034cc:	4822      	ldr	r0, [pc, #136]	@ (8003558 <vTaskStartScheduler+0xbc>)
 80034ce:	f7ff fe13 	bl	80030f8 <xTaskCreateStatic>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4a21      	ldr	r2, [pc, #132]	@ (800355c <vTaskStartScheduler+0xc0>)
 80034d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034d8:	4b20      	ldr	r3, [pc, #128]	@ (800355c <vTaskStartScheduler+0xc0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034e0:	2301      	movs	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e001      	b.n	80034ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d102      	bne.n	80034f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034f0:	f000 fe16 	bl	8004120 <xTimerCreateTimerTask>
 80034f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d116      	bne.n	800352a <vTaskStartScheduler+0x8e>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	613b      	str	r3, [r7, #16]
}
 800350e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003510:	4b13      	ldr	r3, [pc, #76]	@ (8003560 <vTaskStartScheduler+0xc4>)
 8003512:	f04f 32ff 	mov.w	r2, #4294967295
 8003516:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003518:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <vTaskStartScheduler+0xc8>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800351e:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <vTaskStartScheduler+0xcc>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003524:	f001 f998 	bl	8004858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003528:	e00f      	b.n	800354a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d10b      	bne.n	800354a <vTaskStartScheduler+0xae>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	60fb      	str	r3, [r7, #12]
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	e7fd      	b.n	8003546 <vTaskStartScheduler+0xaa>
}
 800354a:	bf00      	nop
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	08004fd0 	.word	0x08004fd0
 8003558:	08003b95 	.word	0x08003b95
 800355c:	20000c88 	.word	0x20000c88
 8003560:	20000c84 	.word	0x20000c84
 8003564:	20000c70 	.word	0x20000c70
 8003568:	20000c68 	.word	0x20000c68

0800356c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003570:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <vTaskSuspendAll+0x18>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a03      	ldr	r2, [pc, #12]	@ (8003584 <vTaskSuspendAll+0x18>)
 8003578:	6013      	str	r3, [r2, #0]
}
 800357a:	bf00      	nop
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000c8c 	.word	0x20000c8c

08003588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003596:	4b42      	ldr	r3, [pc, #264]	@ (80036a0 <xTaskResumeAll+0x118>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	603b      	str	r3, [r7, #0]
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035b6:	f001 f9c1 	bl	800493c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035ba:	4b39      	ldr	r3, [pc, #228]	@ (80036a0 <xTaskResumeAll+0x118>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3b01      	subs	r3, #1
 80035c0:	4a37      	ldr	r2, [pc, #220]	@ (80036a0 <xTaskResumeAll+0x118>)
 80035c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c4:	4b36      	ldr	r3, [pc, #216]	@ (80036a0 <xTaskResumeAll+0x118>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d162      	bne.n	8003692 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035cc:	4b35      	ldr	r3, [pc, #212]	@ (80036a4 <xTaskResumeAll+0x11c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05e      	beq.n	8003692 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d4:	e02f      	b.n	8003636 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035d6:	4b34      	ldr	r3, [pc, #208]	@ (80036a8 <xTaskResumeAll+0x120>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3318      	adds	r3, #24
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fd34 	bl	8002050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe fd2f 	bl	8002050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f6:	4b2d      	ldr	r3, [pc, #180]	@ (80036ac <xTaskResumeAll+0x124>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d903      	bls.n	8003606 <xTaskResumeAll+0x7e>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003602:	4a2a      	ldr	r2, [pc, #168]	@ (80036ac <xTaskResumeAll+0x124>)
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4a27      	ldr	r2, [pc, #156]	@ (80036b0 <xTaskResumeAll+0x128>)
 8003614:	441a      	add	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3304      	adds	r3, #4
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f7fe fcbc 	bl	8001f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003626:	4b23      	ldr	r3, [pc, #140]	@ (80036b4 <xTaskResumeAll+0x12c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	429a      	cmp	r2, r3
 800362e:	d302      	bcc.n	8003636 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003630:	4b21      	ldr	r3, [pc, #132]	@ (80036b8 <xTaskResumeAll+0x130>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003636:	4b1c      	ldr	r3, [pc, #112]	@ (80036a8 <xTaskResumeAll+0x120>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1cb      	bne.n	80035d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003644:	f000 fb5c 	bl	8003d00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003648:	4b1c      	ldr	r3, [pc, #112]	@ (80036bc <xTaskResumeAll+0x134>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d010      	beq.n	8003676 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003654:	f000 f844 	bl	80036e0 <xTaskIncrementTick>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800365e:	4b16      	ldr	r3, [pc, #88]	@ (80036b8 <xTaskResumeAll+0x130>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f1      	bne.n	8003654 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003670:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <xTaskResumeAll+0x134>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003676:	4b10      	ldr	r3, [pc, #64]	@ (80036b8 <xTaskResumeAll+0x130>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800367e:	2301      	movs	r3, #1
 8003680:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003682:	4b0f      	ldr	r3, [pc, #60]	@ (80036c0 <xTaskResumeAll+0x138>)
 8003684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003692:	f001 f983 	bl	800499c <vPortExitCritical>

	return xAlreadyYielded;
 8003696:	68bb      	ldr	r3, [r7, #8]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000c8c 	.word	0x20000c8c
 80036a4:	20000c64 	.word	0x20000c64
 80036a8:	20000c24 	.word	0x20000c24
 80036ac:	20000c6c 	.word	0x20000c6c
 80036b0:	20000794 	.word	0x20000794
 80036b4:	20000790 	.word	0x20000790
 80036b8:	20000c78 	.word	0x20000c78
 80036bc:	20000c74 	.word	0x20000c74
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036ca:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <xTaskGetTickCount+0x18>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036d0:	687b      	ldr	r3, [r7, #4]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	20000c68 	.word	0x20000c68

080036e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ea:	4b52      	ldr	r3, [pc, #328]	@ (8003834 <xTaskIncrementTick+0x154>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 808f 	bne.w	8003812 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036f4:	4b50      	ldr	r3, [pc, #320]	@ (8003838 <xTaskIncrementTick+0x158>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3301      	adds	r3, #1
 80036fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003838 <xTaskIncrementTick+0x158>)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d121      	bne.n	800374c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003708:	4b4c      	ldr	r3, [pc, #304]	@ (800383c <xTaskIncrementTick+0x15c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	603b      	str	r3, [r7, #0]
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	e7fd      	b.n	8003726 <xTaskIncrementTick+0x46>
 800372a:	4b44      	ldr	r3, [pc, #272]	@ (800383c <xTaskIncrementTick+0x15c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	4b43      	ldr	r3, [pc, #268]	@ (8003840 <xTaskIncrementTick+0x160>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a41      	ldr	r2, [pc, #260]	@ (800383c <xTaskIncrementTick+0x15c>)
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4a41      	ldr	r2, [pc, #260]	@ (8003840 <xTaskIncrementTick+0x160>)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b41      	ldr	r3, [pc, #260]	@ (8003844 <xTaskIncrementTick+0x164>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	4a3f      	ldr	r2, [pc, #252]	@ (8003844 <xTaskIncrementTick+0x164>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	f000 fada 	bl	8003d00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800374c:	4b3e      	ldr	r3, [pc, #248]	@ (8003848 <xTaskIncrementTick+0x168>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	d34e      	bcc.n	80037f4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003756:	4b39      	ldr	r3, [pc, #228]	@ (800383c <xTaskIncrementTick+0x15c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <xTaskIncrementTick+0x84>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <xTaskIncrementTick+0x86>
 8003764:	2300      	movs	r3, #0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800376a:	4b37      	ldr	r3, [pc, #220]	@ (8003848 <xTaskIncrementTick+0x168>)
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	601a      	str	r2, [r3, #0]
					break;
 8003772:	e03f      	b.n	80037f4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003774:	4b31      	ldr	r3, [pc, #196]	@ (800383c <xTaskIncrementTick+0x15c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d203      	bcs.n	8003794 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800378c:	4a2e      	ldr	r2, [pc, #184]	@ (8003848 <xTaskIncrementTick+0x168>)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6013      	str	r3, [r2, #0]
						break;
 8003792:	e02f      	b.n	80037f4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	3304      	adds	r3, #4
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fc59 	bl	8002050 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3318      	adds	r3, #24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fc50 	bl	8002050 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b4:	4b25      	ldr	r3, [pc, #148]	@ (800384c <xTaskIncrementTick+0x16c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d903      	bls.n	80037c4 <xTaskIncrementTick+0xe4>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	4a22      	ldr	r2, [pc, #136]	@ (800384c <xTaskIncrementTick+0x16c>)
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <xTaskIncrementTick+0x170>)
 80037d2:	441a      	add	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f7fe fbdd 	bl	8001f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <xTaskIncrementTick+0x174>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d3b3      	bcc.n	8003756 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80037ee:	2301      	movs	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f2:	e7b0      	b.n	8003756 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037f4:	4b17      	ldr	r3, [pc, #92]	@ (8003854 <xTaskIncrementTick+0x174>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fa:	4915      	ldr	r1, [pc, #84]	@ (8003850 <xTaskIncrementTick+0x170>)
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d907      	bls.n	800381c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800380c:	2301      	movs	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e004      	b.n	800381c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003812:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <xTaskIncrementTick+0x178>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <xTaskIncrementTick+0x178>)
 800381a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <xTaskIncrementTick+0x17c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003828:	697b      	ldr	r3, [r7, #20]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000c8c 	.word	0x20000c8c
 8003838:	20000c68 	.word	0x20000c68
 800383c:	20000c1c 	.word	0x20000c1c
 8003840:	20000c20 	.word	0x20000c20
 8003844:	20000c7c 	.word	0x20000c7c
 8003848:	20000c84 	.word	0x20000c84
 800384c:	20000c6c 	.word	0x20000c6c
 8003850:	20000794 	.word	0x20000794
 8003854:	20000790 	.word	0x20000790
 8003858:	20000c74 	.word	0x20000c74
 800385c:	20000c78 	.word	0x20000c78

08003860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003866:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <vTaskSwitchContext+0xa8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800386e:	4b27      	ldr	r3, [pc, #156]	@ (800390c <vTaskSwitchContext+0xac>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003874:	e042      	b.n	80038fc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003876:	4b25      	ldr	r3, [pc, #148]	@ (800390c <vTaskSwitchContext+0xac>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800387c:	4b24      	ldr	r3, [pc, #144]	@ (8003910 <vTaskSwitchContext+0xb0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e011      	b.n	80038a8 <vTaskSwitchContext+0x48>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	607b      	str	r3, [r7, #4]
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	e7fd      	b.n	800389e <vTaskSwitchContext+0x3e>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	491a      	ldr	r1, [pc, #104]	@ (8003914 <vTaskSwitchContext+0xb4>)
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0e3      	beq.n	8003884 <vTaskSwitchContext+0x24>
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4a13      	ldr	r2, [pc, #76]	@ (8003914 <vTaskSwitchContext+0xb4>)
 80038c8:	4413      	add	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3308      	adds	r3, #8
 80038de:	429a      	cmp	r2, r3
 80038e0:	d104      	bne.n	80038ec <vTaskSwitchContext+0x8c>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	4a09      	ldr	r2, [pc, #36]	@ (8003918 <vTaskSwitchContext+0xb8>)
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4a06      	ldr	r2, [pc, #24]	@ (8003910 <vTaskSwitchContext+0xb0>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000c8c 	.word	0x20000c8c
 800390c:	20000c78 	.word	0x20000c78
 8003910:	20000c6c 	.word	0x20000c6c
 8003914:	20000794 	.word	0x20000794
 8003918:	20000790 	.word	0x20000790

0800391c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	60fb      	str	r3, [r7, #12]
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003944:	4b07      	ldr	r3, [pc, #28]	@ (8003964 <vTaskPlaceOnEventList+0x48>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3318      	adds	r3, #24
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fe fb47 	bl	8001fe0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003952:	2101      	movs	r1, #1
 8003954:	6838      	ldr	r0, [r7, #0]
 8003956:	f000 fb8f 	bl	8004078 <prvAddCurrentTaskToDelayedList>
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000790 	.word	0x20000790

08003968 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	617b      	str	r3, [r7, #20]
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	e7fd      	b.n	800398e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003992:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <vTaskPlaceOnEventListRestricted+0x54>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3318      	adds	r3, #24
 8003998:	4619      	mov	r1, r3
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7fe fafd 	bl	8001f9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295
 80039aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	68b8      	ldr	r0, [r7, #8]
 80039b0:	f000 fb62 	bl	8004078 <prvAddCurrentTaskToDelayedList>
	}
 80039b4:	bf00      	nop
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000790 	.word	0x20000790

080039c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	60fb      	str	r3, [r7, #12]
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	e7fd      	b.n	80039ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	3318      	adds	r3, #24
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fb2c 	bl	8002050 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a70 <xTaskRemoveFromEventList+0xb0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d11d      	bne.n	8003a3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe fb23 	bl	8002050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0e:	4b19      	ldr	r3, [pc, #100]	@ (8003a74 <xTaskRemoveFromEventList+0xb4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d903      	bls.n	8003a1e <xTaskRemoveFromEventList+0x5e>
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <xTaskRemoveFromEventList+0xb4>)
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4a13      	ldr	r2, [pc, #76]	@ (8003a78 <xTaskRemoveFromEventList+0xb8>)
 8003a2c:	441a      	add	r2, r3
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f7fe fab0 	bl	8001f9a <vListInsertEnd>
 8003a3a:	e005      	b.n	8003a48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	4619      	mov	r1, r3
 8003a42:	480e      	ldr	r0, [pc, #56]	@ (8003a7c <xTaskRemoveFromEventList+0xbc>)
 8003a44:	f7fe faa9 	bl	8001f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a80 <xTaskRemoveFromEventList+0xc0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d905      	bls.n	8003a62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <xTaskRemoveFromEventList+0xc4>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e001      	b.n	8003a66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a66:	697b      	ldr	r3, [r7, #20]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000c8c 	.word	0x20000c8c
 8003a74:	20000c6c 	.word	0x20000c6c
 8003a78:	20000794 	.word	0x20000794
 8003a7c:	20000c24 	.word	0x20000c24
 8003a80:	20000790 	.word	0x20000790
 8003a84:	20000c78 	.word	0x20000c78

08003a88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a90:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <vTaskInternalSetTimeOutState+0x24>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <vTaskInternalSetTimeOutState+0x28>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	605a      	str	r2, [r3, #4]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000c7c 	.word	0x20000c7c
 8003ab0:	20000c68 	.word	0x20000c68

08003ab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	613b      	str	r3, [r7, #16]
}
 8003ad6:	bf00      	nop
 8003ad8:	bf00      	nop
 8003ada:	e7fd      	b.n	8003ad8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10b      	bne.n	8003afa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	60fb      	str	r3, [r7, #12]
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	e7fd      	b.n	8003af6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003afa:	f000 ff1f 	bl	800493c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <xTaskCheckForTimeOut+0xc0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d102      	bne.n	8003b1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e023      	b.n	8003b66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <xTaskCheckForTimeOut+0xc4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d007      	beq.n	8003b3a <xTaskCheckForTimeOut+0x86>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	e015      	b.n	8003b66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d20b      	bcs.n	8003b5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	1ad2      	subs	r2, r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff99 	bl	8003a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e004      	b.n	8003b66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b66:	f000 ff19 	bl	800499c <vPortExitCritical>

	return xReturn;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000c68 	.word	0x20000c68
 8003b78:	20000c7c 	.word	0x20000c7c

08003b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b80:	4b03      	ldr	r3, [pc, #12]	@ (8003b90 <vTaskMissedYield+0x14>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000c78 	.word	0x20000c78

08003b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b9c:	f000 f852 	bl	8003c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ba0:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <prvIdleTask+0x28>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d9f9      	bls.n	8003b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <prvIdleTask+0x2c>)
 8003baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bb8:	e7f0      	b.n	8003b9c <prvIdleTask+0x8>
 8003bba:	bf00      	nop
 8003bbc:	20000794 	.word	0x20000794
 8003bc0:	e000ed04 	.word	0xe000ed04

08003bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	e00c      	b.n	8003bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4a12      	ldr	r2, [pc, #72]	@ (8003c24 <prvInitialiseTaskLists+0x60>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe f9b0 	bl	8001f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3301      	adds	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b37      	cmp	r3, #55	@ 0x37
 8003bee:	d9ef      	bls.n	8003bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bf0:	480d      	ldr	r0, [pc, #52]	@ (8003c28 <prvInitialiseTaskLists+0x64>)
 8003bf2:	f7fe f9a7 	bl	8001f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bf6:	480d      	ldr	r0, [pc, #52]	@ (8003c2c <prvInitialiseTaskLists+0x68>)
 8003bf8:	f7fe f9a4 	bl	8001f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bfc:	480c      	ldr	r0, [pc, #48]	@ (8003c30 <prvInitialiseTaskLists+0x6c>)
 8003bfe:	f7fe f9a1 	bl	8001f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c02:	480c      	ldr	r0, [pc, #48]	@ (8003c34 <prvInitialiseTaskLists+0x70>)
 8003c04:	f7fe f99e 	bl	8001f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c08:	480b      	ldr	r0, [pc, #44]	@ (8003c38 <prvInitialiseTaskLists+0x74>)
 8003c0a:	f7fe f99b 	bl	8001f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <prvInitialiseTaskLists+0x78>)
 8003c10:	4a05      	ldr	r2, [pc, #20]	@ (8003c28 <prvInitialiseTaskLists+0x64>)
 8003c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <prvInitialiseTaskLists+0x7c>)
 8003c16:	4a05      	ldr	r2, [pc, #20]	@ (8003c2c <prvInitialiseTaskLists+0x68>)
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000794 	.word	0x20000794
 8003c28:	20000bf4 	.word	0x20000bf4
 8003c2c:	20000c08 	.word	0x20000c08
 8003c30:	20000c24 	.word	0x20000c24
 8003c34:	20000c38 	.word	0x20000c38
 8003c38:	20000c50 	.word	0x20000c50
 8003c3c:	20000c1c 	.word	0x20000c1c
 8003c40:	20000c20 	.word	0x20000c20

08003c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c4a:	e019      	b.n	8003c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c4c:	f000 fe76 	bl	800493c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c50:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <prvCheckTasksWaitingTermination+0x50>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe f9f7 	bl	8002050 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c62:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <prvCheckTasksWaitingTermination+0x54>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	4a0b      	ldr	r2, [pc, #44]	@ (8003c98 <prvCheckTasksWaitingTermination+0x54>)
 8003c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <prvCheckTasksWaitingTermination+0x58>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <prvCheckTasksWaitingTermination+0x58>)
 8003c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c76:	f000 fe91 	bl	800499c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f810 	bl	8003ca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c80:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <prvCheckTasksWaitingTermination+0x58>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e1      	bne.n	8003c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000c38 	.word	0x20000c38
 8003c98:	20000c64 	.word	0x20000c64
 8003c9c:	20000c4c 	.word	0x20000c4c

08003ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 f80a 	bl	8004cd0 <vPortFree>
				vPortFree( pxTCB );
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f001 f807 	bl	8004cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cc2:	e019      	b.n	8003cf8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d103      	bne.n	8003cd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fffe 	bl	8004cd0 <vPortFree>
	}
 8003cd4:	e010      	b.n	8003cf8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d00b      	beq.n	8003cf8 <prvDeleteTCB+0x58>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	60fb      	str	r3, [r7, #12]
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <prvDeleteTCB+0x54>
	}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d06:	4b0e      	ldr	r3, [pc, #56]	@ (8003d40 <prvResetNextTaskUnblockTime+0x40>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <prvResetNextTaskUnblockTime+0x14>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <prvResetNextTaskUnblockTime+0x16>
 8003d14:	2300      	movs	r3, #0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d44 <prvResetNextTaskUnblockTime+0x44>)
 8003d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d22:	e008      	b.n	8003d36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d24:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <prvResetNextTaskUnblockTime+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a04      	ldr	r2, [pc, #16]	@ (8003d44 <prvResetNextTaskUnblockTime+0x44>)
 8003d34:	6013      	str	r3, [r2, #0]
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	20000c1c 	.word	0x20000c1c
 8003d44:	20000c84 	.word	0x20000c84

08003d48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <xTaskGetSchedulerState+0x34>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d56:	2301      	movs	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	e008      	b.n	8003d6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d5c:	4b08      	ldr	r3, [pc, #32]	@ (8003d80 <xTaskGetSchedulerState+0x38>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d64:	2302      	movs	r3, #2
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	e001      	b.n	8003d6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d6e:	687b      	ldr	r3, [r7, #4]
	}
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000c70 	.word	0x20000c70
 8003d80:	20000c8c 	.word	0x20000c8c

08003d84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d056      	beq.n	8003e48 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e54 <xTaskPriorityInherit+0xd0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d246      	bcs.n	8003e36 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	db06      	blt.n	8003dbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db0:	4b28      	ldr	r3, [pc, #160]	@ (8003e54 <xTaskPriorityInherit+0xd0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6959      	ldr	r1, [r3, #20]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4a22      	ldr	r2, [pc, #136]	@ (8003e58 <xTaskPriorityInherit+0xd4>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	4299      	cmp	r1, r3
 8003dd4:	d101      	bne.n	8003dda <xTaskPriorityInherit+0x56>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xTaskPriorityInherit+0x58>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d022      	beq.n	8003e26 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe f933 	bl	8002050 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003dea:	4b1a      	ldr	r3, [pc, #104]	@ (8003e54 <xTaskPriorityInherit+0xd0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df8:	4b18      	ldr	r3, [pc, #96]	@ (8003e5c <xTaskPriorityInherit+0xd8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d903      	bls.n	8003e08 <xTaskPriorityInherit+0x84>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e04:	4a15      	ldr	r2, [pc, #84]	@ (8003e5c <xTaskPriorityInherit+0xd8>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4a10      	ldr	r2, [pc, #64]	@ (8003e58 <xTaskPriorityInherit+0xd4>)
 8003e16:	441a      	add	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7fe f8bb 	bl	8001f9a <vListInsertEnd>
 8003e24:	e004      	b.n	8003e30 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <xTaskPriorityInherit+0xd0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e008      	b.n	8003e48 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <xTaskPriorityInherit+0xd0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d201      	bcs.n	8003e48 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e48:	68fb      	ldr	r3, [r7, #12]
	}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000790 	.word	0x20000790
 8003e58:	20000794 	.word	0x20000794
 8003e5c:	20000c6c 	.word	0x20000c6c

08003e60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d058      	beq.n	8003f28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e76:	4b2f      	ldr	r3, [pc, #188]	@ (8003f34 <xTaskPriorityDisinherit+0xd4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d00b      	beq.n	8003e98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	60fb      	str	r3, [r7, #12]
}
 8003e92:	bf00      	nop
 8003e94:	bf00      	nop
 8003e96:	e7fd      	b.n	8003e94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	60bb      	str	r3, [r7, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d02c      	beq.n	8003f28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d128      	bne.n	8003f28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe f8b8 	bl	8002050 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <xTaskPriorityDisinherit+0xd8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d903      	bls.n	8003f08 <xTaskPriorityDisinherit+0xa8>
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f04:	4a0c      	ldr	r2, [pc, #48]	@ (8003f38 <xTaskPriorityDisinherit+0xd8>)
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4a09      	ldr	r2, [pc, #36]	@ (8003f3c <xTaskPriorityDisinherit+0xdc>)
 8003f16:	441a      	add	r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f7fe f83b 	bl	8001f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f28:	697b      	ldr	r3, [r7, #20]
	}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000790 	.word	0x20000790
 8003f38:	20000c6c 	.word	0x20000c6c
 8003f3c:	20000794 	.word	0x20000794

08003f40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d071      	beq.n	800403c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	60fb      	str	r3, [r7, #12]
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d902      	bls.n	8003f88 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e002      	b.n	8003f8e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d051      	beq.n	800403c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d14c      	bne.n	800403c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003fa2:	4b28      	ldr	r3, [pc, #160]	@ (8004044 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d10b      	bne.n	8003fc4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	60bb      	str	r3, [r7, #8]
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	db04      	blt.n	8003fe2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	6959      	ldr	r1, [r3, #20]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4a15      	ldr	r2, [pc, #84]	@ (8004048 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	d101      	bne.n	8003ffc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01c      	beq.n	800403c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3304      	adds	r3, #4
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe f822 	bl	8002050 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004010:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d903      	bls.n	8004020 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	4a0b      	ldr	r2, [pc, #44]	@ (800404c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4a06      	ldr	r2, [pc, #24]	@ (8004048 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800402e:	441a      	add	r2, r3
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f7fd ffaf 	bl	8001f9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800403c:	bf00      	nop
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000790 	.word	0x20000790
 8004048:	20000794 	.word	0x20000794
 800404c:	20000c6c 	.word	0x20000c6c

08004050 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004054:	4b07      	ldr	r3, [pc, #28]	@ (8004074 <pvTaskIncrementMutexHeldCount+0x24>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800405c:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <pvTaskIncrementMutexHeldCount+0x24>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004062:	3201      	adds	r2, #1
 8004064:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004066:	4b03      	ldr	r3, [pc, #12]	@ (8004074 <pvTaskIncrementMutexHeldCount+0x24>)
 8004068:	681b      	ldr	r3, [r3, #0]
	}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000790 	.word	0x20000790

08004078 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004082:	4b21      	ldr	r3, [pc, #132]	@ (8004108 <prvAddCurrentTaskToDelayedList+0x90>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004088:	4b20      	ldr	r3, [pc, #128]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3304      	adds	r3, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd ffde 	bl	8002050 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d10a      	bne.n	80040b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a2:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4819      	ldr	r0, [pc, #100]	@ (8004110 <prvAddCurrentTaskToDelayedList+0x98>)
 80040ac:	f7fd ff75 	bl	8001f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040b0:	e026      	b.n	8004100 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040ba:	4b14      	ldr	r3, [pc, #80]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d209      	bcs.n	80040de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ca:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <prvAddCurrentTaskToDelayedList+0x9c>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b0f      	ldr	r3, [pc, #60]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7fd ff82 	bl	8001fe0 <vListInsert>
}
 80040dc:	e010      	b.n	8004100 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040de:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <prvAddCurrentTaskToDelayedList+0xa0>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <prvAddCurrentTaskToDelayedList+0x94>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f7fd ff78 	bl	8001fe0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <prvAddCurrentTaskToDelayedList+0xa4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d202      	bcs.n	8004100 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040fa:	4a08      	ldr	r2, [pc, #32]	@ (800411c <prvAddCurrentTaskToDelayedList+0xa4>)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000c68 	.word	0x20000c68
 800410c:	20000790 	.word	0x20000790
 8004110:	20000c50 	.word	0x20000c50
 8004114:	20000c20 	.word	0x20000c20
 8004118:	20000c1c 	.word	0x20000c1c
 800411c:	20000c84 	.word	0x20000c84

08004120 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800412a:	f000 fad9 	bl	80046e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800412e:	4b1d      	ldr	r3, [pc, #116]	@ (80041a4 <xTimerCreateTimerTask+0x84>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d021      	beq.n	800417a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800413e:	1d3a      	adds	r2, r7, #4
 8004140:	f107 0108 	add.w	r1, r7, #8
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	4618      	mov	r0, r3
 800414a:	f7fd fee1 	bl	8001f10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	9202      	str	r2, [sp, #8]
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	2302      	movs	r3, #2
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2300      	movs	r3, #0
 800415e:	460a      	mov	r2, r1
 8004160:	4911      	ldr	r1, [pc, #68]	@ (80041a8 <xTimerCreateTimerTask+0x88>)
 8004162:	4812      	ldr	r0, [pc, #72]	@ (80041ac <xTimerCreateTimerTask+0x8c>)
 8004164:	f7fe ffc8 	bl	80030f8 <xTaskCreateStatic>
 8004168:	4603      	mov	r3, r0
 800416a:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <xTimerCreateTimerTask+0x90>)
 800416c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800416e:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <xTimerCreateTimerTask+0x90>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004176:	2301      	movs	r3, #1
 8004178:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	613b      	str	r3, [r7, #16]
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	e7fd      	b.n	8004194 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004198:	697b      	ldr	r3, [r7, #20]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000cc0 	.word	0x20000cc0
 80041a8:	08004fd8 	.word	0x08004fd8
 80041ac:	080042d5 	.word	0x080042d5
 80041b0:	20000cc4 	.word	0x20000cc4

080041b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	@ 0x28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	623b      	str	r3, [r7, #32]
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80041e4:	4b19      	ldr	r3, [pc, #100]	@ (800424c <xTimerGenericCommand+0x98>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02a      	beq.n	8004242 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	dc18      	bgt.n	8004230 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041fe:	f7ff fda3 	bl	8003d48 <xTaskGetSchedulerState>
 8004202:	4603      	mov	r3, r0
 8004204:	2b02      	cmp	r3, #2
 8004206:	d109      	bne.n	800421c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004208:	4b10      	ldr	r3, [pc, #64]	@ (800424c <xTimerGenericCommand+0x98>)
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	f107 0110 	add.w	r1, r7, #16
 8004210:	2300      	movs	r3, #0
 8004212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004214:	f7fe f8fc 	bl	8002410 <xQueueGenericSend>
 8004218:	6278      	str	r0, [r7, #36]	@ 0x24
 800421a:	e012      	b.n	8004242 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <xTimerGenericCommand+0x98>)
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	f107 0110 	add.w	r1, r7, #16
 8004224:	2300      	movs	r3, #0
 8004226:	2200      	movs	r2, #0
 8004228:	f7fe f8f2 	bl	8002410 <xQueueGenericSend>
 800422c:	6278      	str	r0, [r7, #36]	@ 0x24
 800422e:	e008      	b.n	8004242 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004230:	4b06      	ldr	r3, [pc, #24]	@ (800424c <xTimerGenericCommand+0x98>)
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	f107 0110 	add.w	r1, r7, #16
 8004238:	2300      	movs	r3, #0
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	f7fe f9ea 	bl	8002614 <xQueueGenericSendFromISR>
 8004240:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004244:	4618      	mov	r0, r3
 8004246:	3728      	adds	r7, #40	@ 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000cc0 	.word	0x20000cc0

08004250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af02      	add	r7, sp, #8
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800425a:	4b1d      	ldr	r3, [pc, #116]	@ (80042d0 <prvProcessExpiredTimer+0x80>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3304      	adds	r3, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd fef1 	bl	8002050 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d123      	bne.n	80042be <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	18d1      	adds	r1, r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f000 f8cc 	bl	8004420 <prvInsertTimerInActiveList>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d017      	beq.n	80042be <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800428e:	2300      	movs	r3, #0
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	2300      	movs	r3, #0
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	2100      	movs	r1, #0
 8004298:	6978      	ldr	r0, [r7, #20]
 800429a:	f7ff ff8b 	bl	80041b4 <xTimerGenericCommand>
 800429e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60fb      	str	r3, [r7, #12]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	6978      	ldr	r0, [r7, #20]
 80042c4:	4798      	blx	r3
}
 80042c6:	bf00      	nop
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000cb8 	.word	0x20000cb8

080042d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042dc:	f107 0308 	add.w	r3, r7, #8
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f859 	bl	8004398 <prvGetNextExpireTime>
 80042e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4619      	mov	r1, r3
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f805 	bl	80042fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042f2:	f000 f8d7 	bl	80044a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042f6:	bf00      	nop
 80042f8:	e7f0      	b.n	80042dc <prvTimerTask+0x8>
	...

080042fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004306:	f7ff f931 	bl	800356c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800430a:	f107 0308 	add.w	r3, r7, #8
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f866 	bl	80043e0 <prvSampleTimeNow>
 8004314:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d130      	bne.n	800437e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <prvProcessTimerOrBlockTask+0x3c>
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	429a      	cmp	r2, r3
 8004328:	d806      	bhi.n	8004338 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800432a:	f7ff f92d 	bl	8003588 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff ff8d 	bl	8004250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004336:	e024      	b.n	8004382 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800433e:	4b13      	ldr	r3, [pc, #76]	@ (800438c <prvProcessTimerOrBlockTask+0x90>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004350:	4b0f      	ldr	r3, [pc, #60]	@ (8004390 <prvProcessTimerOrBlockTask+0x94>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	4619      	mov	r1, r3
 800435e:	f7fe fe97 	bl	8003090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004362:	f7ff f911 	bl	8003588 <xTaskResumeAll>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800436c:	4b09      	ldr	r3, [pc, #36]	@ (8004394 <prvProcessTimerOrBlockTask+0x98>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
}
 800437c:	e001      	b.n	8004382 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800437e:	f7ff f903 	bl	8003588 <xTaskResumeAll>
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000cbc 	.word	0x20000cbc
 8004390:	20000cc0 	.word	0x20000cc0
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80043a0:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <prvGetNextExpireTime+0x44>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d105      	bne.n	80043ca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043be:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <prvGetNextExpireTime+0x44>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e001      	b.n	80043ce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000cb8 	.word	0x20000cb8

080043e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80043e8:	f7ff f96c 	bl	80036c4 <xTaskGetTickCount>
 80043ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043ee:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <prvSampleTimeNow+0x3c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d205      	bcs.n	8004404 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043f8:	f000 f910 	bl	800461c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e002      	b.n	800440a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800440a:	4a04      	ldr	r2, [pc, #16]	@ (800441c <prvSampleTimeNow+0x3c>)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000cc8 	.word	0x20000cc8

08004420 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d812      	bhi.n	800446c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	1ad2      	subs	r2, r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	429a      	cmp	r2, r3
 8004452:	d302      	bcc.n	800445a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004454:	2301      	movs	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	e01b      	b.n	8004492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800445a:	4b10      	ldr	r3, [pc, #64]	@ (800449c <prvInsertTimerInActiveList+0x7c>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f7fd fdbb 	bl	8001fe0 <vListInsert>
 800446a:	e012      	b.n	8004492 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d206      	bcs.n	8004482 <prvInsertTimerInActiveList+0x62>
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e007      	b.n	8004492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004482:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <prvInsertTimerInActiveList+0x80>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7fd fda7 	bl	8001fe0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004492:	697b      	ldr	r3, [r7, #20]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000cbc 	.word	0x20000cbc
 80044a0:	20000cb8 	.word	0x20000cb8

080044a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08e      	sub	sp, #56	@ 0x38
 80044a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044aa:	e0a5      	b.n	80045f8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da19      	bge.n	80044e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80044b2:	1d3b      	adds	r3, r7, #4
 80044b4:	3304      	adds	r3, #4
 80044b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80044b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	61fb      	str	r3, [r7, #28]
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	e7fd      	b.n	80044d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80044d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044dc:	6850      	ldr	r0, [r2, #4]
 80044de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044e0:	6892      	ldr	r2, [r2, #8]
 80044e2:	4611      	mov	r1, r2
 80044e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f2c0 8085 	blt.w	80045f8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fc:	3304      	adds	r3, #4
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fd fda6 	bl	8002050 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004504:	463b      	mov	r3, r7
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff6a 	bl	80043e0 <prvSampleTimeNow>
 800450c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b09      	cmp	r3, #9
 8004512:	d86c      	bhi.n	80045ee <prvProcessReceivedCommands+0x14a>
 8004514:	a201      	add	r2, pc, #4	@ (adr r2, 800451c <prvProcessReceivedCommands+0x78>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004545 	.word	0x08004545
 8004520:	08004545 	.word	0x08004545
 8004524:	08004545 	.word	0x08004545
 8004528:	080045ef 	.word	0x080045ef
 800452c:	080045a3 	.word	0x080045a3
 8004530:	080045dd 	.word	0x080045dd
 8004534:	08004545 	.word	0x08004545
 8004538:	08004545 	.word	0x08004545
 800453c:	080045ef 	.word	0x080045ef
 8004540:	080045a3 	.word	0x080045a3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	18d1      	adds	r1, r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004552:	f7ff ff65 	bl	8004420 <prvInsertTimerInActiveList>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d04a      	beq.n	80045f2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800455c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004562:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d142      	bne.n	80045f2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	441a      	add	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	2100      	movs	r1, #0
 800457c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800457e:	f7ff fe19 	bl	80041b4 <xTimerGenericCommand>
 8004582:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d133      	bne.n	80045f2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	61bb      	str	r3, [r7, #24]
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	e7fd      	b.n	800459e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10b      	bne.n	80045c8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80045b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	617b      	str	r3, [r7, #20]
}
 80045c2:	bf00      	nop
 80045c4:	bf00      	nop
 80045c6:	e7fd      	b.n	80045c4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	18d1      	adds	r1, r2, r3
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045d6:	f7ff ff23 	bl	8004420 <prvInsertTimerInActiveList>
					break;
 80045da:	e00d      	b.n	80045f8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80045dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d107      	bne.n	80045f6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80045e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045e8:	f000 fb72 	bl	8004cd0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80045ec:	e003      	b.n	80045f6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80045ee:	bf00      	nop
 80045f0:	e002      	b.n	80045f8 <prvProcessReceivedCommands+0x154>
					break;
 80045f2:	bf00      	nop
 80045f4:	e000      	b.n	80045f8 <prvProcessReceivedCommands+0x154>
					break;
 80045f6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045f8:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <prvProcessReceivedCommands+0x174>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	1d39      	adds	r1, r7, #4
 80045fe:	2200      	movs	r2, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe f933 	bl	800286c <xQueueReceive>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	f47f af4f 	bne.w	80044ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	3730      	adds	r7, #48	@ 0x30
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000cc0 	.word	0x20000cc0

0800461c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004622:	e046      	b.n	80046b2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004624:	4b2c      	ldr	r3, [pc, #176]	@ (80046d8 <prvSwitchTimerLists+0xbc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800462e:	4b2a      	ldr	r3, [pc, #168]	@ (80046d8 <prvSwitchTimerLists+0xbc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3304      	adds	r3, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f7fd fd07 	bl	8002050 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d12f      	bne.n	80046b2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	429a      	cmp	r2, r3
 8004662:	d90e      	bls.n	8004682 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004670:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <prvSwitchTimerLists+0xbc>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f7fd fcb0 	bl	8001fe0 <vListInsert>
 8004680:	e017      	b.n	80046b2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004682:	2300      	movs	r3, #0
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	2100      	movs	r1, #0
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff fd91 	bl	80041b4 <xTimerGenericCommand>
 8004692:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10b      	bne.n	80046b2 <prvSwitchTimerLists+0x96>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	603b      	str	r3, [r7, #0]
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	e7fd      	b.n	80046ae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046b2:	4b09      	ldr	r3, [pc, #36]	@ (80046d8 <prvSwitchTimerLists+0xbc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1b3      	bne.n	8004624 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046bc:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <prvSwitchTimerLists+0xbc>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046c2:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <prvSwitchTimerLists+0xc0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a04      	ldr	r2, [pc, #16]	@ (80046d8 <prvSwitchTimerLists+0xbc>)
 80046c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80046ca:	4a04      	ldr	r2, [pc, #16]	@ (80046dc <prvSwitchTimerLists+0xc0>)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	6013      	str	r3, [r2, #0]
}
 80046d0:	bf00      	nop
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000cb8 	.word	0x20000cb8
 80046dc:	20000cbc 	.word	0x20000cbc

080046e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80046e6:	f000 f929 	bl	800493c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80046ea:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <prvCheckForValidListAndQueue+0x60>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d120      	bne.n	8004734 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80046f2:	4814      	ldr	r0, [pc, #80]	@ (8004744 <prvCheckForValidListAndQueue+0x64>)
 80046f4:	f7fd fc26 	bl	8001f44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046f8:	4813      	ldr	r0, [pc, #76]	@ (8004748 <prvCheckForValidListAndQueue+0x68>)
 80046fa:	f7fd fc23 	bl	8001f44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046fe:	4b13      	ldr	r3, [pc, #76]	@ (800474c <prvCheckForValidListAndQueue+0x6c>)
 8004700:	4a10      	ldr	r2, [pc, #64]	@ (8004744 <prvCheckForValidListAndQueue+0x64>)
 8004702:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004704:	4b12      	ldr	r3, [pc, #72]	@ (8004750 <prvCheckForValidListAndQueue+0x70>)
 8004706:	4a10      	ldr	r2, [pc, #64]	@ (8004748 <prvCheckForValidListAndQueue+0x68>)
 8004708:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800470a:	2300      	movs	r3, #0
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <prvCheckForValidListAndQueue+0x74>)
 8004710:	4a11      	ldr	r2, [pc, #68]	@ (8004758 <prvCheckForValidListAndQueue+0x78>)
 8004712:	2110      	movs	r1, #16
 8004714:	200a      	movs	r0, #10
 8004716:	f7fd fd2f 	bl	8002178 <xQueueGenericCreateStatic>
 800471a:	4603      	mov	r3, r0
 800471c:	4a08      	ldr	r2, [pc, #32]	@ (8004740 <prvCheckForValidListAndQueue+0x60>)
 800471e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004720:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <prvCheckForValidListAndQueue+0x60>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <prvCheckForValidListAndQueue+0x60>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	490b      	ldr	r1, [pc, #44]	@ (800475c <prvCheckForValidListAndQueue+0x7c>)
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fc5c 	bl	8002fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004734:	f000 f932 	bl	800499c <vPortExitCritical>
}
 8004738:	bf00      	nop
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000cc0 	.word	0x20000cc0
 8004744:	20000c90 	.word	0x20000c90
 8004748:	20000ca4 	.word	0x20000ca4
 800474c:	20000cb8 	.word	0x20000cb8
 8004750:	20000cbc 	.word	0x20000cbc
 8004754:	20000d6c 	.word	0x20000d6c
 8004758:	20000ccc 	.word	0x20000ccc
 800475c:	08004fe0 	.word	0x08004fe0

08004760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3b04      	subs	r3, #4
 8004770:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3b04      	subs	r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f023 0201 	bic.w	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b04      	subs	r3, #4
 800478e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004790:	4a08      	ldr	r2, [pc, #32]	@ (80047b4 <pxPortInitialiseStack+0x54>)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3b14      	subs	r3, #20
 800479a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3b20      	subs	r3, #32
 80047a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	080047b9 	.word	0x080047b9

080047b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80047be:	2300      	movs	r3, #0
 80047c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047c2:	4b12      	ldr	r3, [pc, #72]	@ (800480c <prvTaskExitError+0x54>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ca:	d00b      	beq.n	80047e4 <prvTaskExitError+0x2c>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	60fb      	str	r3, [r7, #12]
}
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
 80047e2:	e7fd      	b.n	80047e0 <prvTaskExitError+0x28>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	60bb      	str	r3, [r7, #8]
}
 80047f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047f8:	bf00      	nop
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0fc      	beq.n	80047fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr
 800480c:	20000010 	.word	0x20000010

08004810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004810:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <pxCurrentTCBConst2>)
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800481a:	f380 8809 	msr	PSP, r0
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f380 8811 	msr	BASEPRI, r0
 800482a:	f04e 0e0d 	orr.w	lr, lr, #13
 800482e:	4770      	bx	lr

08004830 <pxCurrentTCBConst2>:
 8004830:	20000790 	.word	0x20000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004838:	4806      	ldr	r0, [pc, #24]	@ (8004854 <prvPortStartFirstTask+0x1c>)
 800483a:	6800      	ldr	r0, [r0, #0]
 800483c:	6800      	ldr	r0, [r0, #0]
 800483e:	f380 8808 	msr	MSP, r0
 8004842:	b662      	cpsie	i
 8004844:	b661      	cpsie	f
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	df00      	svc	0
 8004850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004852:	bf00      	nop
 8004854:	e000ed08 	.word	0xe000ed08

08004858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800485e:	4b32      	ldr	r3, [pc, #200]	@ (8004928 <xPortStartScheduler+0xd0>)
 8004860:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	22ff      	movs	r2, #255	@ 0xff
 800486e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4b2a      	ldr	r3, [pc, #168]	@ (800492c <xPortStartScheduler+0xd4>)
 8004884:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004886:	4b2a      	ldr	r3, [pc, #168]	@ (8004930 <xPortStartScheduler+0xd8>)
 8004888:	2207      	movs	r2, #7
 800488a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800488c:	e009      	b.n	80048a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800488e:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <xPortStartScheduler+0xd8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3b01      	subs	r3, #1
 8004894:	4a26      	ldr	r2, [pc, #152]	@ (8004930 <xPortStartScheduler+0xd8>)
 8004896:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b80      	cmp	r3, #128	@ 0x80
 80048ac:	d0ef      	beq.n	800488e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048ae:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <xPortStartScheduler+0xd8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1c3 0307 	rsb	r3, r3, #7
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d00b      	beq.n	80048d2 <xPortStartScheduler+0x7a>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	60bb      	str	r3, [r7, #8]
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	e7fd      	b.n	80048ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048d2:	4b17      	ldr	r3, [pc, #92]	@ (8004930 <xPortStartScheduler+0xd8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <xPortStartScheduler+0xd8>)
 80048da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048dc:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <xPortStartScheduler+0xd8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048e4:	4a12      	ldr	r2, [pc, #72]	@ (8004930 <xPortStartScheduler+0xd8>)
 80048e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048f0:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <xPortStartScheduler+0xdc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004934 <xPortStartScheduler+0xdc>)
 80048f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004934 <xPortStartScheduler+0xdc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0c      	ldr	r2, [pc, #48]	@ (8004934 <xPortStartScheduler+0xdc>)
 8004902:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004906:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004908:	f000 f8b8 	bl	8004a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800490c:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <xPortStartScheduler+0xe0>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004912:	f7ff ff91 	bl	8004838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004916:	f7fe ffa3 	bl	8003860 <vTaskSwitchContext>
	prvTaskExitError();
 800491a:	f7ff ff4d 	bl	80047b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000e400 	.word	0xe000e400
 800492c:	20000dbc 	.word	0x20000dbc
 8004930:	20000dc0 	.word	0x20000dc0
 8004934:	e000ed20 	.word	0xe000ed20
 8004938:	20000010 	.word	0x20000010

0800493c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	607b      	str	r3, [r7, #4]
}
 8004954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004956:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <vPortEnterCritical+0x58>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3301      	adds	r3, #1
 800495c:	4a0d      	ldr	r2, [pc, #52]	@ (8004994 <vPortEnterCritical+0x58>)
 800495e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004960:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <vPortEnterCritical+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d110      	bne.n	800498a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004968:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <vPortEnterCritical+0x5c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <vPortEnterCritical+0x4e>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	603b      	str	r3, [r7, #0]
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <vPortEnterCritical+0x4a>
	}
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	20000010 	.word	0x20000010
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049a2:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <vPortExitCritical+0x50>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <vPortExitCritical+0x26>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	607b      	str	r3, [r7, #4]
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	e7fd      	b.n	80049be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049c2:	4b0a      	ldr	r3, [pc, #40]	@ (80049ec <vPortExitCritical+0x50>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	4a08      	ldr	r2, [pc, #32]	@ (80049ec <vPortExitCritical+0x50>)
 80049ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049cc:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <vPortExitCritical+0x50>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <vPortExitCritical+0x44>
 80049d4:	2300      	movs	r3, #0
 80049d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	f383 8811 	msr	BASEPRI, r3
}
 80049de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000010 	.word	0x20000010

080049f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049f0:	f3ef 8009 	mrs	r0, PSP
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <pxCurrentTCBConst>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a00:	6010      	str	r0, [r2, #0]
 8004a02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004a06:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a0a:	f380 8811 	msr	BASEPRI, r0
 8004a0e:	f7fe ff27 	bl	8003860 <vTaskSwitchContext>
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8811 	msr	BASEPRI, r0
 8004a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	6808      	ldr	r0, [r1, #0]
 8004a22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a26:	f380 8809 	msr	PSP, r0
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	4770      	bx	lr

08004a30 <pxCurrentTCBConst>:
 8004a30:	20000790 	.word	0x20000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop

08004a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	607b      	str	r3, [r7, #4]
}
 8004a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a52:	f7fe fe45 	bl	80036e0 <xTaskIncrementTick>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <SysTick_Handler+0x40>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	2300      	movs	r3, #0
 8004a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f383 8811 	msr	BASEPRI, r3
}
 8004a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a80:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <vPortSetupTimerInterrupt+0x30>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a86:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <vPortSetupTimerInterrupt+0x34>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a8c:	4b09      	ldr	r3, [pc, #36]	@ (8004ab4 <vPortSetupTimerInterrupt+0x38>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a09      	ldr	r2, [pc, #36]	@ (8004ab8 <vPortSetupTimerInterrupt+0x3c>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <vPortSetupTimerInterrupt+0x40>)
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a9e:	4b03      	ldr	r3, [pc, #12]	@ (8004aac <vPortSetupTimerInterrupt+0x30>)
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	e000e010 	.word	0xe000e010
 8004ab0:	e000e018 	.word	0xe000e018
 8004ab4:	20000004 	.word	0x20000004
 8004ab8:	10624dd3 	.word	0x10624dd3
 8004abc:	e000e014 	.word	0xe000e014

08004ac0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ac6:	f3ef 8305 	mrs	r3, IPSR
 8004aca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	d915      	bls.n	8004afe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ad2:	4a17      	ldr	r2, [pc, #92]	@ (8004b30 <vPortValidateInterruptPriority+0x70>)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004adc:	4b15      	ldr	r3, [pc, #84]	@ (8004b34 <vPortValidateInterruptPriority+0x74>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	7afa      	ldrb	r2, [r7, #11]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d20b      	bcs.n	8004afe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	607b      	str	r3, [r7, #4]
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	e7fd      	b.n	8004afa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004afe:	4b0e      	ldr	r3, [pc, #56]	@ (8004b38 <vPortValidateInterruptPriority+0x78>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b06:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <vPortValidateInterruptPriority+0x7c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d90b      	bls.n	8004b26 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	603b      	str	r3, [r7, #0]
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <vPortValidateInterruptPriority+0x62>
	}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr
 8004b30:	e000e3f0 	.word	0xe000e3f0
 8004b34:	20000dbc 	.word	0x20000dbc
 8004b38:	e000ed0c 	.word	0xe000ed0c
 8004b3c:	20000dc0 	.word	0x20000dc0

08004b40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	@ 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b4c:	f7fe fd0e 	bl	800356c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b50:	4b5a      	ldr	r3, [pc, #360]	@ (8004cbc <pvPortMalloc+0x17c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b58:	f000 f916 	bl	8004d88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b5c:	4b58      	ldr	r3, [pc, #352]	@ (8004cc0 <pvPortMalloc+0x180>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f040 8090 	bne.w	8004c8a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01e      	beq.n	8004bae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004b70:	2208      	movs	r2, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d015      	beq.n	8004bae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f023 0307 	bic.w	r3, r3, #7
 8004b88:	3308      	adds	r3, #8
 8004b8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <pvPortMalloc+0x6e>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	617b      	str	r3, [r7, #20]
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	e7fd      	b.n	8004baa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d06a      	beq.n	8004c8a <pvPortMalloc+0x14a>
 8004bb4:	4b43      	ldr	r3, [pc, #268]	@ (8004cc4 <pvPortMalloc+0x184>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d865      	bhi.n	8004c8a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004bbe:	4b42      	ldr	r3, [pc, #264]	@ (8004cc8 <pvPortMalloc+0x188>)
 8004bc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004bc2:	4b41      	ldr	r3, [pc, #260]	@ (8004cc8 <pvPortMalloc+0x188>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bc8:	e004      	b.n	8004bd4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d903      	bls.n	8004be6 <pvPortMalloc+0xa6>
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f1      	bne.n	8004bca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004be6:	4b35      	ldr	r3, [pc, #212]	@ (8004cbc <pvPortMalloc+0x17c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d04c      	beq.n	8004c8a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	4413      	add	r3, r2
 8004bf8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	1ad2      	subs	r2, r2, r3
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d920      	bls.n	8004c54 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <pvPortMalloc+0xfc>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	613b      	str	r3, [r7, #16]
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	e7fd      	b.n	8004c38 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c4e:	69b8      	ldr	r0, [r7, #24]
 8004c50:	f000 f8fc 	bl	8004e4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c54:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <pvPortMalloc+0x184>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <pvPortMalloc+0x184>)
 8004c60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c62:	4b18      	ldr	r3, [pc, #96]	@ (8004cc4 <pvPortMalloc+0x184>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b19      	ldr	r3, [pc, #100]	@ (8004ccc <pvPortMalloc+0x18c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d203      	bcs.n	8004c76 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c6e:	4b15      	ldr	r3, [pc, #84]	@ (8004cc4 <pvPortMalloc+0x184>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a16      	ldr	r2, [pc, #88]	@ (8004ccc <pvPortMalloc+0x18c>)
 8004c74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	4b11      	ldr	r3, [pc, #68]	@ (8004cc0 <pvPortMalloc+0x180>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c8a:	f7fe fc7d 	bl	8003588 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <pvPortMalloc+0x170>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	60fb      	str	r3, [r7, #12]
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <pvPortMalloc+0x16c>
	return pvReturn;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3728      	adds	r7, #40	@ 0x28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	200019cc 	.word	0x200019cc
 8004cc0:	200019d8 	.word	0x200019d8
 8004cc4:	200019d0 	.word	0x200019d0
 8004cc8:	200019c4 	.word	0x200019c4
 8004ccc:	200019d4 	.word	0x200019d4

08004cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d04a      	beq.n	8004d78 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	425b      	negs	r3, r3
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4413      	add	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	4b22      	ldr	r3, [pc, #136]	@ (8004d80 <vPortFree+0xb0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <vPortFree+0x46>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	60fb      	str	r3, [r7, #12]
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	e7fd      	b.n	8004d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <vPortFree+0x66>
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	60bb      	str	r3, [r7, #8]
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	e7fd      	b.n	8004d32 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4b11      	ldr	r3, [pc, #68]	@ (8004d80 <vPortFree+0xb0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d019      	beq.n	8004d78 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d115      	bne.n	8004d78 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <vPortFree+0xb0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	401a      	ands	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d5c:	f7fe fc06 	bl	800356c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <vPortFree+0xb4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	4a06      	ldr	r2, [pc, #24]	@ (8004d84 <vPortFree+0xb4>)
 8004d6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d6e:	6938      	ldr	r0, [r7, #16]
 8004d70:	f000 f86c 	bl	8004e4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d74:	f7fe fc08 	bl	8003588 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	200019d8 	.word	0x200019d8
 8004d84:	200019d0 	.word	0x200019d0

08004d88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004d92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d94:	4b27      	ldr	r3, [pc, #156]	@ (8004e34 <prvHeapInit+0xac>)
 8004d96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00c      	beq.n	8004dbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3307      	adds	r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e34 <prvHeapInit+0xac>)
 8004db8:	4413      	add	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e38 <prvHeapInit+0xb0>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e38 <prvHeapInit+0xb0>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a15      	ldr	r2, [pc, #84]	@ (8004e3c <prvHeapInit+0xb4>)
 8004de8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004dea:	4b14      	ldr	r3, [pc, #80]	@ (8004e3c <prvHeapInit+0xb4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004df2:	4b12      	ldr	r3, [pc, #72]	@ (8004e3c <prvHeapInit+0xb4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	1ad2      	subs	r2, r2, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e08:	4b0c      	ldr	r3, [pc, #48]	@ (8004e3c <prvHeapInit+0xb4>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a0a      	ldr	r2, [pc, #40]	@ (8004e40 <prvHeapInit+0xb8>)
 8004e16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a09      	ldr	r2, [pc, #36]	@ (8004e44 <prvHeapInit+0xbc>)
 8004e1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e20:	4b09      	ldr	r3, [pc, #36]	@ (8004e48 <prvHeapInit+0xc0>)
 8004e22:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e26:	601a      	str	r2, [r3, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000dc4 	.word	0x20000dc4
 8004e38:	200019c4 	.word	0x200019c4
 8004e3c:	200019cc 	.word	0x200019cc
 8004e40:	200019d4 	.word	0x200019d4
 8004e44:	200019d0 	.word	0x200019d0
 8004e48:	200019d8 	.word	0x200019d8

08004e4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e54:	4b27      	ldr	r3, [pc, #156]	@ (8004ef4 <prvInsertBlockIntoFreeList+0xa8>)
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e002      	b.n	8004e60 <prvInsertBlockIntoFreeList+0x14>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d8f7      	bhi.n	8004e5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	4413      	add	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d108      	bne.n	8004e8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	441a      	add	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	441a      	add	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d118      	bne.n	8004ed4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b14      	ldr	r3, [pc, #80]	@ (8004ef8 <prvInsertBlockIntoFreeList+0xac>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d00d      	beq.n	8004eca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	441a      	add	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e008      	b.n	8004edc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004eca:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <prvInsertBlockIntoFreeList+0xac>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e003      	b.n	8004edc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d002      	beq.n	8004eea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	200019c4 	.word	0x200019c4
 8004ef8:	200019cc 	.word	0x200019cc

08004efc <memset>:
 8004efc:	4603      	mov	r3, r0
 8004efe:	4402      	add	r2, r0
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d100      	bne.n	8004f06 <memset+0xa>
 8004f04:	4770      	bx	lr
 8004f06:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0a:	e7f9      	b.n	8004f00 <memset+0x4>

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	2600      	movs	r6, #0
 8004f10:	4d0c      	ldr	r5, [pc, #48]	@ (8004f44 <__libc_init_array+0x38>)
 8004f12:	4c0d      	ldr	r4, [pc, #52]	@ (8004f48 <__libc_init_array+0x3c>)
 8004f14:	1b64      	subs	r4, r4, r5
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	42a6      	cmp	r6, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	f000 f828 	bl	8004f70 <_init>
 8004f20:	2600      	movs	r6, #0
 8004f22:	4d0a      	ldr	r5, [pc, #40]	@ (8004f4c <__libc_init_array+0x40>)
 8004f24:	4c0a      	ldr	r4, [pc, #40]	@ (8004f50 <__libc_init_array+0x44>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	42a6      	cmp	r6, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f34:	4798      	blx	r3
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3e:	4798      	blx	r3
 8004f40:	3601      	adds	r6, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	080050b4 	.word	0x080050b4
 8004f48:	080050b4 	.word	0x080050b4
 8004f4c:	080050b4 	.word	0x080050b4
 8004f50:	080050b8 	.word	0x080050b8

08004f54 <memcpy>:
 8004f54:	440a      	add	r2, r1
 8004f56:	4291      	cmp	r1, r2
 8004f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f5c:	d100      	bne.n	8004f60 <memcpy+0xc>
 8004f5e:	4770      	bx	lr
 8004f60:	b510      	push	{r4, lr}
 8004f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f66:	4291      	cmp	r1, r2
 8004f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f6c:	d1f9      	bne.n	8004f62 <memcpy+0xe>
 8004f6e:	bd10      	pop	{r4, pc}

08004f70 <_init>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr

08004f7c <_fini>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr
