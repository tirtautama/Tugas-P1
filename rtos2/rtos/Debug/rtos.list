
rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007194  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f74  080072a4  080072a4  000082a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008218  08008218  0000a068  2**0
                  CONTENTS
  4 .ARM          00000000  08008218  08008218  0000a068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008218  08008218  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008218  08008218  00009218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800821c  0800821c  0000921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008220  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002238  20000068  08008288  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022a0  08008288  0000a2a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a533  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aba  00000000  00000000  000245c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00028080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e5  00000000  00000000  00029890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a378  00000000  00000000  0002ab75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c831  00000000  00000000  00044eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd58  00000000  00000000  0006171e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd476  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ae4  00000000  00000000  000fd4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00103fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	0800728c 	.word	0x0800728c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	0800728c 	.word	0x0800728c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 ff8c 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f878 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f968 	bl	8000430 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8d0 	bl	8000304 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f90c 	bl	8000380 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f938 	bl	80003dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800016c:	f000 fabc 	bl	80006e8 <SSD1306_Init>
  SSD1306_Clear();
 8000170:	f000 fcdb 	bl	8000b2a <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8000174:	f000 fb7c 	bl	8000870 <SSD1306_UpdateScreen>

  SSD1306_GotoXY (0,0);
 8000178:	2100      	movs	r1, #0
 800017a:	2000      	movs	r0, #0
 800017c:	f000 fc1c 	bl	80009b8 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	4920      	ldr	r1, [pc, #128]	@ (8000204 <main+0xb4>)
 8000184:	4820      	ldr	r0, [pc, #128]	@ (8000208 <main+0xb8>)
 8000186:	f000 fcab 	bl	8000ae0 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 800018a:	211e      	movs	r1, #30
 800018c:	200a      	movs	r0, #10
 800018e:	f000 fc13 	bl	80009b8 <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 8000192:	2201      	movs	r2, #1
 8000194:	491b      	ldr	r1, [pc, #108]	@ (8000204 <main+0xb4>)
 8000196:	481d      	ldr	r0, [pc, #116]	@ (800020c <main+0xbc>)
 8000198:	f000 fca2 	bl	8000ae0 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 800019c:	f000 fb68 	bl	8000870 <SSD1306_UpdateScreen>

  HAL_Delay(2000);
 80001a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001a4:	f000 ff96 	bl	80010d4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001a8:	f003 feae 	bl	8003f08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001ac:	4a18      	ldr	r2, [pc, #96]	@ (8000210 <main+0xc0>)
 80001ae:	2100      	movs	r1, #0
 80001b0:	4818      	ldr	r0, [pc, #96]	@ (8000214 <main+0xc4>)
 80001b2:	f003 ff0f 	bl	8003fd4 <osThreadNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a17      	ldr	r2, [pc, #92]	@ (8000218 <main+0xc8>)
 80001ba:	6013      	str	r3, [r2, #0]

  /* creation of pickButtonTask */
  pickButtonTaskHandle = osThreadNew(pickButton, NULL, &pickButtonTask_attributes);
 80001bc:	4a17      	ldr	r2, [pc, #92]	@ (800021c <main+0xcc>)
 80001be:	2100      	movs	r1, #0
 80001c0:	4817      	ldr	r0, [pc, #92]	@ (8000220 <main+0xd0>)
 80001c2:	f003 ff07 	bl	8003fd4 <osThreadNew>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a16      	ldr	r2, [pc, #88]	@ (8000224 <main+0xd4>)
 80001ca:	6013      	str	r3, [r2, #0]

  /* creation of getADCTask */
  getADCTaskHandle = osThreadNew(getADCT, NULL, &getADCTask_attributes);
 80001cc:	4a16      	ldr	r2, [pc, #88]	@ (8000228 <main+0xd8>)
 80001ce:	2100      	movs	r1, #0
 80001d0:	4816      	ldr	r0, [pc, #88]	@ (800022c <main+0xdc>)
 80001d2:	f003 feff 	bl	8003fd4 <osThreadNew>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a15      	ldr	r2, [pc, #84]	@ (8000230 <main+0xe0>)
 80001da:	6013      	str	r3, [r2, #0]

  /* creation of dispOLEDTask */
  dispOLEDTaskHandle = osThreadNew(dispOLED, NULL, &dispOLEDTask_attributes);
 80001dc:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <main+0xe4>)
 80001de:	2100      	movs	r1, #0
 80001e0:	4815      	ldr	r0, [pc, #84]	@ (8000238 <main+0xe8>)
 80001e2:	f003 fef7 	bl	8003fd4 <osThreadNew>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4a14      	ldr	r2, [pc, #80]	@ (800023c <main+0xec>)
 80001ea:	6013      	str	r3, [r2, #0]

  /* creation of dispUARTTask */
  dispUARTTaskHandle = osThreadNew(dispUART, NULL, &dispUARTTask_attributes);
 80001ec:	4a14      	ldr	r2, [pc, #80]	@ (8000240 <main+0xf0>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4814      	ldr	r0, [pc, #80]	@ (8000244 <main+0xf4>)
 80001f2:	f003 feef 	bl	8003fd4 <osThreadNew>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a13      	ldr	r2, [pc, #76]	@ (8000248 <main+0xf8>)
 80001fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001fc:	f003 feb6 	bl	8003f6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	bf00      	nop
 8000202:	e7fd      	b.n	8000200 <main+0xb0>
 8000204:	20000000 	.word	0x20000000
 8000208:	080072ec 	.word	0x080072ec
 800020c:	080072f4 	.word	0x080072f4
 8000210:	080080f0 	.word	0x080080f0
 8000214:	0800051d 	.word	0x0800051d
 8000218:	20000150 	.word	0x20000150
 800021c:	08008114 	.word	0x08008114
 8000220:	0800052d 	.word	0x0800052d
 8000224:	20000154 	.word	0x20000154
 8000228:	08008138 	.word	0x08008138
 800022c:	08000585 	.word	0x08000585
 8000230:	20000158 	.word	0x20000158
 8000234:	0800815c 	.word	0x0800815c
 8000238:	080005c1 	.word	0x080005c1
 800023c:	2000015c 	.word	0x2000015c
 8000240:	08008180 	.word	0x08008180
 8000244:	08000609 	.word	0x08000609
 8000248:	20000160 	.word	0x20000160

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b094      	sub	sp, #80	@ 0x50
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000256:	2228      	movs	r2, #40	@ 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f006 fb86 	bl	800696c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000280:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000298:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800029c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fbd8 	bl	8002a58 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ae:	f000 fa15 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fe44 	bl	8002f5c <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002da:	f000 f9ff 	bl	80006dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002de:	2302      	movs	r3, #2
 80002e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 fff4 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002f6:	f000 f9f1 	bl	80006dc <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3750      	adds	r7, #80	@ 0x50
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000316:	4a19      	ldr	r2, [pc, #100]	@ (800037c <MX_ADC1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031a:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <MX_ADC1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000320:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000326:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <MX_ADC1_Init+0x74>)
 800032e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000332:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000334:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800033a:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <MX_ADC1_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000340:	480d      	ldr	r0, [pc, #52]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000342:	f000 feeb 	bl	800111c <HAL_ADC_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f9c6 	bl	80006dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000354:	2301      	movs	r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_ADC1_Init+0x74>)
 8000362:	f001 f99f 	bl	80016a4 <HAL_ADC_ConfigChannel>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800036c:	f000 f9b6 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000084 	.word	0x20000084
 800037c:	40012400 	.word	0x40012400

08000380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000384:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <MX_I2C1_Init+0x50>)
 8000386:	4a13      	ldr	r2, [pc, #76]	@ (80003d4 <MX_I2C1_Init+0x54>)
 8000388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800038a:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_I2C1_Init+0x50>)
 800038c:	4a12      	ldr	r2, [pc, #72]	@ (80003d8 <MX_I2C1_Init+0x58>)
 800038e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_I2C1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_I2C1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <MX_I2C1_Init+0x50>)
 800039e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003aa:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b6:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003bc:	4804      	ldr	r0, [pc, #16]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003be:	f001 fd81 	bl	8001ec4 <HAL_I2C_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003c8:	f000 f988 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200000b4 	.word	0x200000b4
 80003d4:	40005400 	.word	0x40005400
 80003d8:	00061a80 	.word	0x00061a80

080003dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	@ (800042c <MX_USART1_UART_Init+0x50>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003e6:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_USART1_UART_Init+0x4c>)
 8000414:	f003 fb16 	bl	8003a44 <HAL_UART_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800041e:	f000 f95d 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000108 	.word	0x20000108
 800042c:	40013800 	.word	0x40013800

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <MX_GPIO_Init+0x80>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a19      	ldr	r2, [pc, #100]	@ (80004b0 <MX_GPIO_Init+0x80>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b17      	ldr	r3, [pc, #92]	@ (80004b0 <MX_GPIO_Init+0x80>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <MX_GPIO_Init+0x80>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a13      	ldr	r2, [pc, #76]	@ (80004b0 <MX_GPIO_Init+0x80>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <MX_GPIO_Init+0x80>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <MX_GPIO_Init+0x80>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a0d      	ldr	r2, [pc, #52]	@ (80004b0 <MX_GPIO_Init+0x80>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_GPIO_Init+0x80>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Button2_Pin Button1_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin;
 800048c:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	4804      	ldr	r0, [pc, #16]	@ (80004b4 <MX_GPIO_Init+0x84>)
 80004a2:	f001 fb73 	bl	8001b8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a6:	bf00      	nop
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010c00 	.word	0x40010c00

080004b8 <Menu_Display>:

/* USER CODE BEGIN 4 */
void Menu_Display(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b08e      	sub	sp, #56	@ 0x38
 80004bc:	af00      	add	r7, sp, #0
	uint8_t menu_1[] = "\r\n1. Voltage monitor read\r\n";
 80004be:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <Menu_Display+0x58>)
 80004c0:	f107 041c 	add.w	r4, r7, #28
 80004c4:	461d      	mov	r5, r3
 80004c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t menu_2[] = "2. Re-display Menu\r\n\r\n";
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <Menu_Display+0x5c>)
 80004d4:	1d3c      	adds	r4, r7, #4
 80004d6:	461d      	mov	r5, r3
 80004d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004e0:	6020      	str	r0, [r4, #0]
 80004e2:	3404      	adds	r4, #4
 80004e4:	8021      	strh	r1, [r4, #0]
 80004e6:	3402      	adds	r4, #2
 80004e8:	0c0b      	lsrs	r3, r1, #16
 80004ea:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, menu_1, sizeof(menu_1), 10);
 80004ec:	f107 011c 	add.w	r1, r7, #28
 80004f0:	230a      	movs	r3, #10
 80004f2:	221c      	movs	r2, #28
 80004f4:	4808      	ldr	r0, [pc, #32]	@ (8000518 <Menu_Display+0x60>)
 80004f6:	f003 faf5 	bl	8003ae4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu_2, sizeof(menu_2), 10);
 80004fa:	1d39      	adds	r1, r7, #4
 80004fc:	230a      	movs	r3, #10
 80004fe:	2217      	movs	r2, #23
 8000500:	4805      	ldr	r0, [pc, #20]	@ (8000518 <Menu_Display+0x60>)
 8000502:	f003 faef 	bl	8003ae4 <HAL_UART_Transmit>

}
 8000506:	bf00      	nop
 8000508:	3738      	adds	r7, #56	@ 0x38
 800050a:	46bd      	mov	sp, r7
 800050c:	bdb0      	pop	{r4, r5, r7, pc}
 800050e:	bf00      	nop
 8000510:	08007300 	.word	0x08007300
 8000514:	0800731c 	.word	0x0800731c
 8000518:	20000108 	.word	0x20000108

0800051c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f003 fdff 	bl	8004128 <osDelay>
 800052a:	e7fb      	b.n	8000524 <StartDefaultTask+0x8>

0800052c <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void *argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 8000534:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000538:	480f      	ldr	r0, [pc, #60]	@ (8000578 <pickButton+0x4c>)
 800053a:	f001 fcab 	bl	8001e94 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d106      	bne.n	8000552 <pickButton+0x26>
	  {
		  osDelay(300);	// debounce
 8000544:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000548:	f003 fdee 	bl	8004128 <osDelay>
		  button1_pressed = 1;
 800054c:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <pickButton+0x50>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
	  }

	  if(HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin) == GPIO_PIN_RESET)
 8000552:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000556:	4808      	ldr	r0, [pc, #32]	@ (8000578 <pickButton+0x4c>)
 8000558:	f001 fc9c 	bl	8001e94 <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d106      	bne.n	8000570 <pickButton+0x44>
	  {
		  osDelay(300);	// debounce
 8000562:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000566:	f003 fddf 	bl	8004128 <osDelay>
		  button2_pressed = 1;
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <pickButton+0x54>)
 800056c:	2201      	movs	r2, #1
 800056e:	601a      	str	r2, [r3, #0]
	  }

    osDelay(100);
 8000570:	2064      	movs	r0, #100	@ 0x64
 8000572:	f003 fdd9 	bl	8004128 <osDelay>
	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 8000576:	e7dd      	b.n	8000534 <pickButton+0x8>
 8000578:	40010c00 	.word	0x40010c00
 800057c:	200001a0 	.word	0x200001a0
 8000580:	200001a4 	.word	0x200001a4

08000584 <getADCT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADCT */
void getADCT(void *argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADCT */
  /* Infinite loop */
  for(;;)
  {

  	  HAL_ADC_Start(&hadc1);
 800058c:	480a      	ldr	r0, [pc, #40]	@ (80005b8 <getADCT+0x34>)
 800058e:	f000 fe9d 	bl	80012cc <HAL_ADC_Start>
  	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000592:	210a      	movs	r1, #10
 8000594:	4808      	ldr	r0, [pc, #32]	@ (80005b8 <getADCT+0x34>)
 8000596:	f000 ff73 	bl	8001480 <HAL_ADC_PollForConversion>
  	  x_val = (HAL_ADC_GetValue(&hadc1));
 800059a:	4807      	ldr	r0, [pc, #28]	@ (80005b8 <getADCT+0x34>)
 800059c:	f001 f876 	bl	800168c <HAL_ADC_GetValue>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a06      	ldr	r2, [pc, #24]	@ (80005bc <getADCT+0x38>)
 80005a4:	6013      	str	r3, [r2, #0]
  	  HAL_ADC_Stop(&hadc1);
 80005a6:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <getADCT+0x34>)
 80005a8:	f000 ff3e 	bl	8001428 <HAL_ADC_Stop>

  	  // process ADC values here


      osDelay(100);
 80005ac:	2064      	movs	r0, #100	@ 0x64
 80005ae:	f003 fdbb 	bl	8004128 <osDelay>
  	  HAL_ADC_Start(&hadc1);
 80005b2:	bf00      	nop
 80005b4:	e7ea      	b.n	800058c <getADCT+0x8>
 80005b6:	bf00      	nop
 80005b8:	20000084 	.word	0x20000084
 80005bc:	20000164 	.word	0x20000164

080005c0 <dispOLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispOLED */
void dispOLED(void *argument)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispOLED */
	SSD1306_Clear();
 80005c8:	f000 faaf 	bl	8000b2a <SSD1306_Clear>
	SSD1306_UpdateScreen();
 80005cc:	f000 f950 	bl	8000870 <SSD1306_UpdateScreen>
  /* Infinite loop */
  for(;;)
  {
  	  SSD1306_GotoXY (18, 23);  // Set posisi X ke 25 dan Y ke 23 untuk menempatkan teks di tengah layar
 80005d0:	2117      	movs	r1, #23
 80005d2:	2012      	movs	r0, #18
 80005d4:	f000 f9f0 	bl	80009b8 <SSD1306_GotoXY>
      sprintf(buffer, "ADC=%d      ", x_val);
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <dispOLED+0x38>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4907      	ldr	r1, [pc, #28]	@ (80005fc <dispOLED+0x3c>)
 80005e0:	4807      	ldr	r0, [pc, #28]	@ (8000600 <dispOLED+0x40>)
 80005e2:	f006 f9a3 	bl	800692c <siprintf>
  	  SSD1306_Puts (buffer, &Font_11x18, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	4906      	ldr	r1, [pc, #24]	@ (8000604 <dispOLED+0x44>)
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <dispOLED+0x40>)
 80005ec:	f000 fa78 	bl	8000ae0 <SSD1306_Puts>
  	  SSD1306_UpdateScreen(); // Tampilkan di layar
 80005f0:	f000 f93e 	bl	8000870 <SSD1306_UpdateScreen>
  	  SSD1306_GotoXY (18, 23);  // Set posisi X ke 25 dan Y ke 23 untuk menempatkan teks di tengah layar
 80005f4:	bf00      	nop
 80005f6:	e7eb      	b.n	80005d0 <dispOLED+0x10>
 80005f8:	20000164 	.word	0x20000164
 80005fc:	08007334 	.word	0x08007334
 8000600:	2000016c 	.word	0x2000016c
 8000604:	20000000 	.word	0x20000000

08000608 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN UARTmenu */
	  /* Infinite loop */

		Menu_Display();
 8000610:	f7ff ff52 	bl	80004b8 <Menu_Display>

	  for(;;)
	  {
		  // select user input
		  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 8000614:	230a      	movs	r3, #10
 8000616:	2201      	movs	r2, #1
 8000618:	491e      	ldr	r1, [pc, #120]	@ (8000694 <dispUART+0x8c>)
 800061a:	481f      	ldr	r0, [pc, #124]	@ (8000698 <dispUART+0x90>)
 800061c:	f003 fae5 	bl	8003bea <HAL_UART_Receive>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d117      	bne.n	8000656 <dispUART+0x4e>
		  {
			switch (choice) {
 8000626:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <dispUART+0x8c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b31      	cmp	r3, #49	@ 0x31
 800062c:	d002      	beq.n	8000634 <dispUART+0x2c>
 800062e:	2b32      	cmp	r3, #50	@ 0x32
 8000630:	d00e      	beq.n	8000650 <dispUART+0x48>
					break;
				case '2':
					Menu_Display();
					break;
				default:
					break;
 8000632:	e010      	b.n	8000656 <dispUART+0x4e>
					sprintf(buffer, "Voltage = %d\r\n",x_val);
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <dispUART+0x94>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4919      	ldr	r1, [pc, #100]	@ (80006a0 <dispUART+0x98>)
 800063c:	4819      	ldr	r0, [pc, #100]	@ (80006a4 <dispUART+0x9c>)
 800063e:	f006 f975 	bl	800692c <siprintf>
					HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8000642:	230a      	movs	r3, #10
 8000644:	2232      	movs	r2, #50	@ 0x32
 8000646:	4917      	ldr	r1, [pc, #92]	@ (80006a4 <dispUART+0x9c>)
 8000648:	4813      	ldr	r0, [pc, #76]	@ (8000698 <dispUART+0x90>)
 800064a:	f003 fa4b 	bl	8003ae4 <HAL_UART_Transmit>
					break;
 800064e:	e002      	b.n	8000656 <dispUART+0x4e>
					Menu_Display();
 8000650:	f7ff ff32 	bl	80004b8 <Menu_Display>
					break;
 8000654:	bf00      	nop
			}
		  }else{

		  }

		  if(button1_pressed)
 8000656:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <dispUART+0xa0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d008      	beq.n	8000670 <dispUART+0x68>
		  {
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Button1 pressed\r\n", sizeof("Button1 pressed\r\n"), 10);
 800065e:	230a      	movs	r3, #10
 8000660:	2212      	movs	r2, #18
 8000662:	4912      	ldr	r1, [pc, #72]	@ (80006ac <dispUART+0xa4>)
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <dispUART+0x90>)
 8000666:	f003 fa3d 	bl	8003ae4 <HAL_UART_Transmit>
			  button1_pressed = 0;
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <dispUART+0xa0>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
		  }

		  if(button2_pressed)
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <dispUART+0xa8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d008      	beq.n	800068a <dispUART+0x82>
		  {
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Button2 pressed\r\n", sizeof("Button2 pressed\r\n"), 10);
 8000678:	230a      	movs	r3, #10
 800067a:	2212      	movs	r2, #18
 800067c:	490d      	ldr	r1, [pc, #52]	@ (80006b4 <dispUART+0xac>)
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <dispUART+0x90>)
 8000680:	f003 fa30 	bl	8003ae4 <HAL_UART_Transmit>
			  button2_pressed = 0;
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <dispUART+0xa8>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
		  }


	    osDelay(100);
 800068a:	2064      	movs	r0, #100	@ 0x64
 800068c:	f003 fd4c 	bl	8004128 <osDelay>
		  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 8000690:	e7c0      	b.n	8000614 <dispUART+0xc>
 8000692:	bf00      	nop
 8000694:	20000168 	.word	0x20000168
 8000698:	20000108 	.word	0x20000108
 800069c:	20000164 	.word	0x20000164
 80006a0:	08007344 	.word	0x08007344
 80006a4:	2000016c 	.word	0x2000016c
 80006a8:	200001a0 	.word	0x200001a0
 80006ac:	08007354 	.word	0x08007354
 80006b0:	200001a4 	.word	0x200001a4
 80006b4:	08007368 	.word	0x08007368

080006b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d101      	bne.n	80006ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ca:	f000 fce7 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40000800 	.word	0x40000800

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80006ee:	f000 fa25 	bl	8000b3c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80006f2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80006f6:	2201      	movs	r2, #1
 80006f8:	2178      	movs	r1, #120	@ 0x78
 80006fa:	485b      	ldr	r0, [pc, #364]	@ (8000868 <SSD1306_Init+0x180>)
 80006fc:	f001 fe24 	bl	8002348 <HAL_I2C_IsDeviceReady>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000706:	2300      	movs	r3, #0
 8000708:	e0a9      	b.n	800085e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800070a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800070e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000710:	e002      	b.n	8000718 <SSD1306_Init+0x30>
		p--;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3b01      	subs	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f9      	bne.n	8000712 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800071e:	22ae      	movs	r2, #174	@ 0xae
 8000720:	2100      	movs	r1, #0
 8000722:	2078      	movs	r0, #120	@ 0x78
 8000724:	f000 fa84 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000728:	2220      	movs	r2, #32
 800072a:	2100      	movs	r1, #0
 800072c:	2078      	movs	r0, #120	@ 0x78
 800072e:	f000 fa7f 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000732:	2210      	movs	r2, #16
 8000734:	2100      	movs	r1, #0
 8000736:	2078      	movs	r0, #120	@ 0x78
 8000738:	f000 fa7a 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800073c:	22b0      	movs	r2, #176	@ 0xb0
 800073e:	2100      	movs	r1, #0
 8000740:	2078      	movs	r0, #120	@ 0x78
 8000742:	f000 fa75 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000746:	22c8      	movs	r2, #200	@ 0xc8
 8000748:	2100      	movs	r1, #0
 800074a:	2078      	movs	r0, #120	@ 0x78
 800074c:	f000 fa70 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2078      	movs	r0, #120	@ 0x78
 8000756:	f000 fa6b 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800075a:	2210      	movs	r2, #16
 800075c:	2100      	movs	r1, #0
 800075e:	2078      	movs	r0, #120	@ 0x78
 8000760:	f000 fa66 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	2100      	movs	r1, #0
 8000768:	2078      	movs	r0, #120	@ 0x78
 800076a:	f000 fa61 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800076e:	2281      	movs	r2, #129	@ 0x81
 8000770:	2100      	movs	r1, #0
 8000772:	2078      	movs	r0, #120	@ 0x78
 8000774:	f000 fa5c 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000778:	22ff      	movs	r2, #255	@ 0xff
 800077a:	2100      	movs	r1, #0
 800077c:	2078      	movs	r0, #120	@ 0x78
 800077e:	f000 fa57 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000782:	22a1      	movs	r2, #161	@ 0xa1
 8000784:	2100      	movs	r1, #0
 8000786:	2078      	movs	r0, #120	@ 0x78
 8000788:	f000 fa52 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800078c:	22a6      	movs	r2, #166	@ 0xa6
 800078e:	2100      	movs	r1, #0
 8000790:	2078      	movs	r0, #120	@ 0x78
 8000792:	f000 fa4d 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000796:	22a8      	movs	r2, #168	@ 0xa8
 8000798:	2100      	movs	r1, #0
 800079a:	2078      	movs	r0, #120	@ 0x78
 800079c:	f000 fa48 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80007a0:	223f      	movs	r2, #63	@ 0x3f
 80007a2:	2100      	movs	r1, #0
 80007a4:	2078      	movs	r0, #120	@ 0x78
 80007a6:	f000 fa43 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007aa:	22a4      	movs	r2, #164	@ 0xa4
 80007ac:	2100      	movs	r1, #0
 80007ae:	2078      	movs	r0, #120	@ 0x78
 80007b0:	f000 fa3e 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80007b4:	22d3      	movs	r2, #211	@ 0xd3
 80007b6:	2100      	movs	r1, #0
 80007b8:	2078      	movs	r0, #120	@ 0x78
 80007ba:	f000 fa39 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2078      	movs	r0, #120	@ 0x78
 80007c4:	f000 fa34 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80007c8:	22d5      	movs	r2, #213	@ 0xd5
 80007ca:	2100      	movs	r1, #0
 80007cc:	2078      	movs	r0, #120	@ 0x78
 80007ce:	f000 fa2f 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80007d2:	22f0      	movs	r2, #240	@ 0xf0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2078      	movs	r0, #120	@ 0x78
 80007d8:	f000 fa2a 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80007dc:	22d9      	movs	r2, #217	@ 0xd9
 80007de:	2100      	movs	r1, #0
 80007e0:	2078      	movs	r0, #120	@ 0x78
 80007e2:	f000 fa25 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80007e6:	2222      	movs	r2, #34	@ 0x22
 80007e8:	2100      	movs	r1, #0
 80007ea:	2078      	movs	r0, #120	@ 0x78
 80007ec:	f000 fa20 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80007f0:	22da      	movs	r2, #218	@ 0xda
 80007f2:	2100      	movs	r1, #0
 80007f4:	2078      	movs	r0, #120	@ 0x78
 80007f6:	f000 fa1b 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80007fa:	2212      	movs	r2, #18
 80007fc:	2100      	movs	r1, #0
 80007fe:	2078      	movs	r0, #120	@ 0x78
 8000800:	f000 fa16 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000804:	22db      	movs	r2, #219	@ 0xdb
 8000806:	2100      	movs	r1, #0
 8000808:	2078      	movs	r0, #120	@ 0x78
 800080a:	f000 fa11 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800080e:	2220      	movs	r2, #32
 8000810:	2100      	movs	r1, #0
 8000812:	2078      	movs	r0, #120	@ 0x78
 8000814:	f000 fa0c 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000818:	228d      	movs	r2, #141	@ 0x8d
 800081a:	2100      	movs	r1, #0
 800081c:	2078      	movs	r0, #120	@ 0x78
 800081e:	f000 fa07 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000822:	2214      	movs	r2, #20
 8000824:	2100      	movs	r1, #0
 8000826:	2078      	movs	r0, #120	@ 0x78
 8000828:	f000 fa02 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800082c:	22af      	movs	r2, #175	@ 0xaf
 800082e:	2100      	movs	r1, #0
 8000830:	2078      	movs	r0, #120	@ 0x78
 8000832:	f000 f9fd 	bl	8000c30 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000836:	222e      	movs	r2, #46	@ 0x2e
 8000838:	2100      	movs	r1, #0
 800083a:	2078      	movs	r0, #120	@ 0x78
 800083c:	f000 f9f8 	bl	8000c30 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000840:	2000      	movs	r0, #0
 8000842:	f000 f843 	bl	80008cc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000846:	f000 f813 	bl	8000870 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <SSD1306_Init+0x184>)
 800084c:	2200      	movs	r2, #0
 800084e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <SSD1306_Init+0x184>)
 8000852:	2200      	movs	r2, #0
 8000854:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000856:	4b05      	ldr	r3, [pc, #20]	@ (800086c <SSD1306_Init+0x184>)
 8000858:	2201      	movs	r2, #1
 800085a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800085c:	2301      	movs	r3, #1
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000b4 	.word	0x200000b4
 800086c:	200005a8 	.word	0x200005a8

08000870 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000876:	2300      	movs	r3, #0
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	e01d      	b.n	80008b8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	3b50      	subs	r3, #80	@ 0x50
 8000880:	b2db      	uxtb	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	2078      	movs	r0, #120	@ 0x78
 8000888:	f000 f9d2 	bl	8000c30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2078      	movs	r0, #120	@ 0x78
 8000892:	f000 f9cd 	bl	8000c30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000896:	2210      	movs	r2, #16
 8000898:	2100      	movs	r1, #0
 800089a:	2078      	movs	r0, #120	@ 0x78
 800089c:	f000 f9c8 	bl	8000c30 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	01db      	lsls	r3, r3, #7
 80008a4:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <SSD1306_UpdateScreen+0x58>)
 80008a6:	441a      	add	r2, r3
 80008a8:	2380      	movs	r3, #128	@ 0x80
 80008aa:	2140      	movs	r1, #64	@ 0x40
 80008ac:	2078      	movs	r0, #120	@ 0x78
 80008ae:	f000 f959 	bl	8000b64 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	3301      	adds	r3, #1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b07      	cmp	r3, #7
 80008bc:	d9de      	bls.n	800087c <SSD1306_UpdateScreen+0xc>
	}
}
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001a8 	.word	0x200001a8

080008cc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d101      	bne.n	80008e0 <SSD1306_Fill+0x14>
 80008dc:	2300      	movs	r3, #0
 80008de:	e000      	b.n	80008e2 <SSD1306_Fill+0x16>
 80008e0:	23ff      	movs	r3, #255	@ 0xff
 80008e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008e6:	4619      	mov	r1, r3
 80008e8:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <SSD1306_Fill+0x2c>)
 80008ea:	f006 f83f 	bl	800696c <memset>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200001a8 	.word	0x200001a8

080008fc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
 8000906:	460b      	mov	r3, r1
 8000908:	80bb      	strh	r3, [r7, #4]
 800090a:	4613      	mov	r3, r2
 800090c:	70fb      	strb	r3, [r7, #3]
	if (
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	2b7f      	cmp	r3, #127	@ 0x7f
 8000912:	d848      	bhi.n	80009a6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000914:	88bb      	ldrh	r3, [r7, #4]
 8000916:	2b3f      	cmp	r3, #63	@ 0x3f
 8000918:	d845      	bhi.n	80009a6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800091a:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <SSD1306_DrawPixel+0xb4>)
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d006      	beq.n	8000930 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	2b00      	cmp	r3, #0
 8000926:	bf0c      	ite	eq
 8000928:	2301      	moveq	r3, #1
 800092a:	2300      	movne	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d11a      	bne.n	800096c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000936:	88fa      	ldrh	r2, [r7, #6]
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	b298      	uxth	r0, r3
 800093e:	4603      	mov	r3, r0
 8000940:	01db      	lsls	r3, r3, #7
 8000942:	4413      	add	r3, r2
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <SSD1306_DrawPixel+0xb8>)
 8000946:	5cd3      	ldrb	r3, [r2, r3]
 8000948:	b25a      	sxtb	r2, r3
 800094a:	88bb      	ldrh	r3, [r7, #4]
 800094c:	f003 0307 	and.w	r3, r3, #7
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	b25b      	sxtb	r3, r3
 8000958:	4313      	orrs	r3, r2
 800095a:	b259      	sxtb	r1, r3
 800095c:	88fa      	ldrh	r2, [r7, #6]
 800095e:	4603      	mov	r3, r0
 8000960:	01db      	lsls	r3, r3, #7
 8000962:	4413      	add	r3, r2
 8000964:	b2c9      	uxtb	r1, r1
 8000966:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <SSD1306_DrawPixel+0xb8>)
 8000968:	54d1      	strb	r1, [r2, r3]
 800096a:	e01d      	b.n	80009a8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800096c:	88fa      	ldrh	r2, [r7, #6]
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	08db      	lsrs	r3, r3, #3
 8000972:	b298      	uxth	r0, r3
 8000974:	4603      	mov	r3, r0
 8000976:	01db      	lsls	r3, r3, #7
 8000978:	4413      	add	r3, r2
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <SSD1306_DrawPixel+0xb8>)
 800097c:	5cd3      	ldrb	r3, [r2, r3]
 800097e:	b25a      	sxtb	r2, r3
 8000980:	88bb      	ldrh	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	2101      	movs	r1, #1
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	b25b      	sxtb	r3, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	b25b      	sxtb	r3, r3
 8000992:	4013      	ands	r3, r2
 8000994:	b259      	sxtb	r1, r3
 8000996:	88fa      	ldrh	r2, [r7, #6]
 8000998:	4603      	mov	r3, r0
 800099a:	01db      	lsls	r3, r3, #7
 800099c:	4413      	add	r3, r2
 800099e:	b2c9      	uxtb	r1, r1
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <SSD1306_DrawPixel+0xb8>)
 80009a2:	54d1      	strb	r1, [r2, r3]
 80009a4:	e000      	b.n	80009a8 <SSD1306_DrawPixel+0xac>
		return;
 80009a6:	bf00      	nop
	}
}
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	200005a8 	.word	0x200005a8
 80009b4:	200001a8 	.word	0x200001a8

080009b8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	460a      	mov	r2, r1
 80009c2:	80fb      	strh	r3, [r7, #6]
 80009c4:	4613      	mov	r3, r2
 80009c6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80009c8:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <SSD1306_GotoXY+0x28>)
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80009ce:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <SSD1306_GotoXY+0x28>)
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	8053      	strh	r3, [r2, #2]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200005a8 	.word	0x200005a8

080009e4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009f4:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <SSD1306_Putc+0xf8>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
	if (
 8000a00:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a02:	dc07      	bgt.n	8000a14 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000a04:	4b35      	ldr	r3, [pc, #212]	@ (8000adc <SSD1306_Putc+0xf8>)
 8000a06:	885b      	ldrh	r3, [r3, #2]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	785b      	ldrb	r3, [r3, #1]
 8000a0e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a10:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a12:	dd01      	ble.n	8000a18 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	e05d      	b.n	8000ad4 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e04b      	b.n	8000ab6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	3b20      	subs	r3, #32
 8000a26:	6839      	ldr	r1, [r7, #0]
 8000a28:	7849      	ldrb	r1, [r1, #1]
 8000a2a:	fb01 f303 	mul.w	r3, r1, r3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	440b      	add	r3, r1
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	e030      	b.n	8000aa4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d010      	beq.n	8000a74 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a52:	4b22      	ldr	r3, [pc, #136]	@ (8000adc <SSD1306_Putc+0xf8>)
 8000a54:	881a      	ldrh	r2, [r3, #0]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b298      	uxth	r0, r3
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <SSD1306_Putc+0xf8>)
 8000a60:	885a      	ldrh	r2, [r3, #2]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	4413      	add	r3, r2
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	79ba      	ldrb	r2, [r7, #6]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff ff45 	bl	80008fc <SSD1306_DrawPixel>
 8000a72:	e014      	b.n	8000a9e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <SSD1306_Putc+0xf8>)
 8000a76:	881a      	ldrh	r2, [r3, #0]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b298      	uxth	r0, r3
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <SSD1306_Putc+0xf8>)
 8000a82:	885a      	ldrh	r2, [r3, #2]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	4413      	add	r3, r2
 8000a8a:	b299      	uxth	r1, r3
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	bf0c      	ite	eq
 8000a92:	2301      	moveq	r3, #1
 8000a94:	2300      	movne	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f7ff ff2f 	bl	80008fc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d3c8      	bcc.n	8000a42 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	785b      	ldrb	r3, [r3, #1]
 8000aba:	461a      	mov	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d3ad      	bcc.n	8000a1e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <SSD1306_Putc+0xf8>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <SSD1306_Putc+0xf8>)
 8000ad0:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200005a8 	.word	0x200005a8

08000ae0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	4613      	mov	r3, r2
 8000aec:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000aee:	e012      	b.n	8000b16 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff73 	bl	80009e4 <SSD1306_Putc>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d002      	beq.n	8000b10 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	e008      	b.n	8000b22 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1e8      	bne.n	8000af0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	781b      	ldrb	r3, [r3, #0]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fecc 	bl	80008cc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000b34:	f7ff fe9c 	bl	8000870 <SSD1306_UpdateScreen>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <ssd1306_I2C_Init+0x24>)
 8000b44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b46:	e002      	b.n	8000b4e <ssd1306_I2C_Init+0x12>
		p--;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1f9      	bne.n	8000b48 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	0003d090 	.word	0x0003d090

08000b64 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b0c7      	sub	sp, #284	@ 0x11c
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000b72:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000b76:	600a      	str	r2, [r1, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b7e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000b82:	4622      	mov	r2, r4
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b8a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000b8e:	4602      	mov	r2, r0
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b9a:	460a      	mov	r2, r1
 8000b9c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000b9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ba6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000baa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000bb8:	e015      	b.n	8000be6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000bba:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000bbe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bc2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	441a      	add	r2, r3
 8000bca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000bce:	3301      	adds	r3, #1
 8000bd0:	7811      	ldrb	r1, [r2, #0]
 8000bd2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bd6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000bda:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000bdc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000be0:	3301      	adds	r3, #1
 8000be2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000be6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bf0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000bf4:	8812      	ldrh	r2, [r2, #0]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d8df      	bhi.n	8000bba <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bfe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b299      	uxth	r1, r3
 8000c06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	f107 020c 	add.w	r2, r7, #12
 8000c18:	200a      	movs	r0, #10
 8000c1a:	9000      	str	r0, [sp, #0]
 8000c1c:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <ssd1306_I2C_WriteMulti+0xc8>)
 8000c1e:	f001 fa95 	bl	800214c <HAL_I2C_Master_Transmit>
}
 8000c22:	bf00      	nop
 8000c24:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	200000b4 	.word	0x200000b4

08000c30 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	71bb      	strb	r3, [r7, #6]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c46:	797b      	ldrb	r3, [r7, #5]
 8000c48:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b299      	uxth	r1, r3
 8000c4e:	f107 020c 	add.w	r2, r7, #12
 8000c52:	230a      	movs	r3, #10
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2302      	movs	r3, #2
 8000c58:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <ssd1306_I2C_Write+0x38>)
 8000c5a:	f001 fa77 	bl	800214c <HAL_I2C_Master_Transmit>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000b4 	.word	0x200000b4

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <HAL_MspInit+0x68>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a17      	ldr	r2, [pc, #92]	@ (8000cd4 <HAL_MspInit+0x68>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <HAL_MspInit+0x68>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_MspInit+0x68>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a11      	ldr	r2, [pc, #68]	@ (8000cd4 <HAL_MspInit+0x68>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x68>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	f06f 0001 	mvn.w	r0, #1
 8000caa:	f000 ff44 	bl	8001b36 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_MspInit+0x6c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <HAL_MspInit+0x6c>)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010000 	.word	0x40010000

08000cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <HAL_ADC_MspInit+0x6c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d121      	bne.n	8000d40 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <HAL_ADC_MspInit+0x70>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <HAL_ADC_MspInit+0x70>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <HAL_ADC_MspInit+0x70>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <HAL_ADC_MspInit+0x70>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a0c      	ldr	r2, [pc, #48]	@ (8000d4c <HAL_ADC_MspInit+0x70>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_ADC_MspInit+0x70>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_X_Pin;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d30:	2303      	movs	r3, #3
 8000d32:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_X_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <HAL_ADC_MspInit+0x74>)
 8000d3c:	f000 ff26 	bl	8001b8c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40012400 	.word	0x40012400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010800 	.word	0x40010800

08000d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <HAL_I2C_MspInit+0x70>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d123      	bne.n	8000dbc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a13      	ldr	r2, [pc, #76]	@ (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8c:	23c0      	movs	r3, #192	@ 0xc0
 8000d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d90:	2312      	movs	r3, #18
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <HAL_I2C_MspInit+0x78>)
 8000da0:	f000 fef4 	bl	8001b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	4a07      	ldr	r2, [pc, #28]	@ (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000daa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dae:	61d3      	str	r3, [r2, #28]
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_I2C_MspInit+0x74>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3720      	adds	r7, #32
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <HAL_UART_MspInit+0x8c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d131      	bne.n	8000e54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <HAL_UART_MspInit+0x90>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a1a      	ldr	r2, [pc, #104]	@ (8000e60 <HAL_UART_MspInit+0x90>)
 8000df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <HAL_UART_MspInit+0x90>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_UART_MspInit+0x90>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <HAL_UART_MspInit+0x90>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_UART_MspInit+0x90>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	480b      	ldr	r0, [pc, #44]	@ (8000e64 <HAL_UART_MspInit+0x94>)
 8000e36:	f000 fea9 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_UART_MspInit+0x94>)
 8000e50:	f000 fe9c 	bl	8001b8c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40013800 	.word	0x40013800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010800 	.word	0x40010800

08000e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	@ 0x38
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e7e:	4b34      	ldr	r3, [pc, #208]	@ (8000f50 <HAL_InitTick+0xe8>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a33      	ldr	r2, [pc, #204]	@ (8000f50 <HAL_InitTick+0xe8>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b31      	ldr	r3, [pc, #196]	@ (8000f50 <HAL_InitTick+0xe8>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e96:	f107 0210 	add.w	r2, r7, #16
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 f9cb 	bl	800323c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d103      	bne.n	8000eb8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eb0:	f002 f99c 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8000eb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8000eb6:	e004      	b.n	8000ec2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eb8:	f002 f998 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec4:	4a23      	ldr	r2, [pc, #140]	@ (8000f54 <HAL_InitTick+0xec>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	0c9b      	lsrs	r3, r3, #18
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ed0:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <HAL_InitTick+0xf0>)
 8000ed2:	4a22      	ldr	r2, [pc, #136]	@ (8000f5c <HAL_InitTick+0xf4>)
 8000ed4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	@ (8000f58 <HAL_InitTick+0xf0>)
 8000ed8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000edc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ede:	4a1e      	ldr	r2, [pc, #120]	@ (8000f58 <HAL_InitTick+0xf0>)
 8000ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <HAL_InitTick+0xf0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <HAL_InitTick+0xf0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef0:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_InitTick+0xf0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000ef6:	4818      	ldr	r0, [pc, #96]	@ (8000f58 <HAL_InitTick+0xf0>)
 8000ef8:	f002 fb5a 	bl	80035b0 <HAL_TIM_Base_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d11b      	bne.n	8000f42 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f0a:	4813      	ldr	r0, [pc, #76]	@ (8000f58 <HAL_InitTick+0xf0>)
 8000f0c:	f002 fba8 	bl	8003660 <HAL_TIM_Base_Start_IT>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d111      	bne.n	8000f42 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f1e:	201e      	movs	r0, #30
 8000f20:	f000 fe25 	bl	8001b6e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b0f      	cmp	r3, #15
 8000f28:	d808      	bhi.n	8000f3c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	201e      	movs	r0, #30
 8000f30:	f000 fe01 	bl	8001b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f34:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <HAL_InitTick+0xf8>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e002      	b.n	8000f42 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3738      	adds	r7, #56	@ 0x38
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
 8000f54:	431bde83 	.word	0x431bde83
 8000f58:	200005b0 	.word	0x200005b0
 8000f5c:	40000800 	.word	0x40000800
 8000f60:	2000000c 	.word	0x2000000c

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <TIM4_IRQHandler+0x10>)
 8000f9e:	f002 fbb1 	bl	8003704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200005b0 	.word	0x200005b0

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	@ (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f005 fcce 	bl	800697c <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20005000 	.word	0x20005000
 800100c:	00000400 	.word	0x00000400
 8001010:	200005f8 	.word	0x200005f8
 8001014:	200022a0 	.word	0x200022a0

08001018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001024:	f7ff fff8 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480b      	ldr	r0, [pc, #44]	@ (8001058 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800102a:	490c      	ldr	r1, [pc, #48]	@ (800105c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800102c:	4a0c      	ldr	r2, [pc, #48]	@ (8001060 <LoopFillZerobss+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a09      	ldr	r2, [pc, #36]	@ (8001064 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001040:	4c09      	ldr	r4, [pc, #36]	@ (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104e:	f005 fc9b 	bl	8006988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001052:	f7ff f87d 	bl	8000150 <main>
  bx lr
 8001056:	4770      	bx	lr
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001060:	08008220 	.word	0x08008220
  ldr r2, =_sbss
 8001064:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001068:	200022a0 	.word	0x200022a0

0800106c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_2_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <HAL_Init+0x28>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <HAL_Init+0x28>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 fd4d 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	200f      	movs	r0, #15
 8001088:	f7ff feee 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fdee 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_IncTick+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a03      	ldr	r2, [pc, #12]	@ (80010bc <HAL_IncTick+0x20>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000010 	.word	0x20000010
 80010bc:	200005fc 	.word	0x200005fc

080010c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b02      	ldr	r3, [pc, #8]	@ (80010d0 <HAL_GetTick+0x10>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	200005fc 	.word	0x200005fc

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff fff0 	bl	80010c0 <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffe0 	bl	80010c0 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000010 	.word	0x20000010

0800111c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0be      	b.n	80012bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001148:	2b00      	cmp	r3, #0
 800114a:	d109      	bne.n	8001160 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fdbe 	bl	8000cdc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fbf1 	bl	8001948 <ADC_ConversionStop_Disable>
 8001166:	4603      	mov	r3, r0
 8001168:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 8099 	bne.w	80012aa <HAL_ADC_Init+0x18e>
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 8095 	bne.w	80012aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001188:	f023 0302 	bic.w	r3, r3, #2
 800118c:	f043 0202 	orr.w	r2, r3, #2
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800119c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7b1b      	ldrb	r3, [r3, #12]
 80011a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011b4:	d003      	beq.n	80011be <HAL_ADC_Init+0xa2>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <HAL_ADC_Init+0xa8>
 80011be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011c2:	e000      	b.n	80011c6 <HAL_ADC_Init+0xaa>
 80011c4:	2300      	movs	r3, #0
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7d1b      	ldrb	r3, [r3, #20]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d119      	bne.n	8001208 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7b1b      	ldrb	r3, [r3, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d109      	bne.n	80011f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	035a      	lsls	r2, r3, #13
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	e00b      	b.n	8001208 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f4:	f043 0220 	orr.w	r2, r3, #32
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <HAL_ADC_Init+0x1a8>)
 8001224:	4013      	ands	r3, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	430b      	orrs	r3, r1
 800122e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001238:	d003      	beq.n	8001242 <HAL_ADC_Init+0x126>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d104      	bne.n	800124c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	3b01      	subs	r3, #1
 8001248:	051b      	lsls	r3, r3, #20
 800124a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001252:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	430a      	orrs	r2, r1
 800125e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <HAL_ADC_Init+0x1ac>)
 8001268:	4013      	ands	r3, r2
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	429a      	cmp	r2, r3
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127a:	f023 0303 	bic.w	r3, r3, #3
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001286:	e018      	b.n	80012ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128c:	f023 0312 	bic.w	r3, r3, #18
 8001290:	f043 0210 	orr.w	r2, r3, #16
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129c:	f043 0201 	orr.w	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012a8:	e007      	b.n	80012ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ae:	f043 0210 	orr.w	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	ffe1f7fd 	.word	0xffe1f7fd
 80012c8:	ff1f0efe 	.word	0xff1f0efe

080012cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_Start+0x1a>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e098      	b.n	8001418 <HAL_ADC_Start+0x14c>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fad0 	bl	8001894 <ADC_Enable>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 8087 	bne.w	800140e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a41      	ldr	r2, [pc, #260]	@ (8001420 <HAL_ADC_Start+0x154>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d105      	bne.n	800132a <HAL_ADC_Start+0x5e>
 800131e:	4b41      	ldr	r3, [pc, #260]	@ (8001424 <HAL_ADC_Start+0x158>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d115      	bne.n	8001356 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d026      	beq.n	8001392 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001348:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800134c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001354:	e01d      	b.n	8001392 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a2f      	ldr	r2, [pc, #188]	@ (8001424 <HAL_ADC_Start+0x158>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d004      	beq.n	8001376 <HAL_ADC_Start+0xaa>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a2b      	ldr	r2, [pc, #172]	@ (8001420 <HAL_ADC_Start+0x154>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10d      	bne.n	8001392 <HAL_ADC_Start+0xc6>
 8001376:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <HAL_ADC_Start+0x158>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800138a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a2:	f023 0206 	bic.w	r2, r3, #6
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013aa:	e002      	b.n	80013b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f06f 0202 	mvn.w	r2, #2
 80013c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013d2:	d113      	bne.n	80013fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013d8:	4a11      	ldr	r2, [pc, #68]	@ (8001420 <HAL_ADC_Start+0x154>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d105      	bne.n	80013ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_ADC_Start+0x158>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	e00c      	b.n	8001416 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e003      	b.n	8001416 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40012800 	.word	0x40012800
 8001424:	40012400 	.word	0x40012400

08001428 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_ADC_Stop+0x1a>
 800143e:	2302      	movs	r3, #2
 8001440:	e01a      	b.n	8001478 <HAL_ADC_Stop+0x50>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fa7c 	bl	8001948 <ADC_ConversionStop_Disable>
 8001450:	4603      	mov	r3, r0
 8001452:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001496:	f7ff fe13 	bl	80010c0 <HAL_GetTick>
 800149a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ae:	f043 0220 	orr.w	r2, r3, #32
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0d3      	b.n	800166a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d131      	bne.n	8001534 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d12a      	bne.n	8001534 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014de:	e021      	b.n	8001524 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e6:	d01d      	beq.n	8001524 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_ADC_PollForConversion+0x7e>
 80014ee:	f7ff fde7 	bl	80010c0 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d212      	bcs.n	8001524 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10b      	bne.n	8001524 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0a2      	b.n	800166a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0d6      	beq.n	80014e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001532:	e070      	b.n	8001616 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001534:	4b4f      	ldr	r3, [pc, #316]	@ (8001674 <HAL_ADC_PollForConversion+0x1f4>)
 8001536:	681c      	ldr	r4, [r3, #0]
 8001538:	2002      	movs	r0, #2
 800153a:	f001 ff83 	bl	8003444 <HAL_RCCEx_GetPeriphCLKFreq>
 800153e:	4603      	mov	r3, r0
 8001540:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	4b4b      	ldr	r3, [pc, #300]	@ (8001678 <HAL_ADC_PollForConversion+0x1f8>)
 800154c:	400b      	ands	r3, r1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d118      	bne.n	8001584 <HAL_ADC_PollForConversion+0x104>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68d9      	ldr	r1, [r3, #12]
 8001558:	4b48      	ldr	r3, [pc, #288]	@ (800167c <HAL_ADC_PollForConversion+0x1fc>)
 800155a:	400b      	ands	r3, r1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d111      	bne.n	8001584 <HAL_ADC_PollForConversion+0x104>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6919      	ldr	r1, [r3, #16]
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <HAL_ADC_PollForConversion+0x200>)
 8001568:	400b      	ands	r3, r1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d108      	bne.n	8001580 <HAL_ADC_PollForConversion+0x100>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68d9      	ldr	r1, [r3, #12]
 8001574:	4b43      	ldr	r3, [pc, #268]	@ (8001684 <HAL_ADC_PollForConversion+0x204>)
 8001576:	400b      	ands	r3, r1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_ADC_PollForConversion+0x100>
 800157c:	2314      	movs	r3, #20
 800157e:	e020      	b.n	80015c2 <HAL_ADC_PollForConversion+0x142>
 8001580:	2329      	movs	r3, #41	@ 0x29
 8001582:	e01e      	b.n	80015c2 <HAL_ADC_PollForConversion+0x142>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6919      	ldr	r1, [r3, #16]
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <HAL_ADC_PollForConversion+0x200>)
 800158c:	400b      	ands	r3, r1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_ADC_PollForConversion+0x120>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68d9      	ldr	r1, [r3, #12]
 8001598:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <HAL_ADC_PollForConversion+0x204>)
 800159a:	400b      	ands	r3, r1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00d      	beq.n	80015bc <HAL_ADC_PollForConversion+0x13c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <HAL_ADC_PollForConversion+0x208>)
 80015a8:	400b      	ands	r3, r1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d108      	bne.n	80015c0 <HAL_ADC_PollForConversion+0x140>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68d9      	ldr	r1, [r3, #12]
 80015b4:	4b34      	ldr	r3, [pc, #208]	@ (8001688 <HAL_ADC_PollForConversion+0x208>)
 80015b6:	400b      	ands	r3, r1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_PollForConversion+0x140>
 80015bc:	2354      	movs	r3, #84	@ 0x54
 80015be:	e000      	b.n	80015c2 <HAL_ADC_PollForConversion+0x142>
 80015c0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015c8:	e021      	b.n	800160e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d01a      	beq.n	8001608 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <HAL_ADC_PollForConversion+0x168>
 80015d8:	f7ff fd72 	bl	80010c0 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d20f      	bcs.n	8001608 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d90b      	bls.n	8001608 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	f043 0204 	orr.w	r2, r3, #4
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e030      	b.n	800166a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	429a      	cmp	r2, r3
 8001614:	d8d9      	bhi.n	80015ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f06f 0212 	mvn.w	r2, #18
 800161e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001624:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001636:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800163a:	d115      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001640:	2b00      	cmp	r3, #0
 8001642:	d111      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	f043 0201 	orr.w	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	24924924 	.word	0x24924924
 800167c:	00924924 	.word	0x00924924
 8001680:	12492492 	.word	0x12492492
 8001684:	00492492 	.word	0x00492492
 8001688:	00249249 	.word	0x00249249

0800168c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x20>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e0dc      	b.n	800187e <HAL_ADC_ConfigChannel+0x1da>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d81c      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b05      	subs	r3, #5
 80016e6:	221f      	movs	r2, #31
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4019      	ands	r1, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b05      	subs	r3, #5
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	635a      	str	r2, [r3, #52]	@ 0x34
 800170c:	e03c      	b.n	8001788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	d81c      	bhi.n	8001750 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b23      	subs	r3, #35	@ 0x23
 8001728:	221f      	movs	r2, #31
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	4019      	ands	r1, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b23      	subs	r3, #35	@ 0x23
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	631a      	str	r2, [r3, #48]	@ 0x30
 800174e:	e01b      	b.n	8001788 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b41      	subs	r3, #65	@ 0x41
 8001762:	221f      	movs	r2, #31
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	4019      	ands	r1, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b41      	subs	r3, #65	@ 0x41
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b09      	cmp	r3, #9
 800178e:	d91c      	bls.n	80017ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68d9      	ldr	r1, [r3, #12]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	3b1e      	subs	r3, #30
 80017a2:	2207      	movs	r2, #7
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4019      	ands	r1, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6898      	ldr	r0, [r3, #8]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	3b1e      	subs	r3, #30
 80017bc:	fa00 f203 	lsl.w	r2, r0, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	e019      	b.n	80017fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6919      	ldr	r1, [r3, #16]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	2207      	movs	r2, #7
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4019      	ands	r1, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6898      	ldr	r0, [r3, #8]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b10      	cmp	r3, #16
 8001804:	d003      	beq.n	800180e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800180a:	2b11      	cmp	r3, #17
 800180c:	d132      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1d      	ldr	r2, [pc, #116]	@ (8001888 <HAL_ADC_ConfigChannel+0x1e4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d125      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d126      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001834:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b10      	cmp	r3, #16
 800183c:	d11a      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800183e:	4b13      	ldr	r3, [pc, #76]	@ (800188c <HAL_ADC_ConfigChannel+0x1e8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a13      	ldr	r2, [pc, #76]	@ (8001890 <HAL_ADC_ConfigChannel+0x1ec>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	0c9a      	lsrs	r2, r3, #18
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001854:	e002      	b.n	800185c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3b01      	subs	r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f9      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x1b2>
 8001862:	e007      	b.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40012400 	.word	0x40012400
 800188c:	20000008 	.word	0x20000008
 8001890:	431bde83 	.word	0x431bde83

08001894 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d040      	beq.n	8001934 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001940 <ADC_Enable+0xac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001944 <ADC_Enable+0xb0>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d0:	e002      	b.n	80018d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018de:	f7ff fbef 	bl	80010c0 <HAL_GetTick>
 80018e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018e4:	e01f      	b.n	8001926 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018e6:	f7ff fbeb 	bl	80010c0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d918      	bls.n	8001926 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d011      	beq.n	8001926 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	f043 0210 	orr.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	f043 0201 	orr.w	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e007      	b.n	8001936 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d1d8      	bne.n	80018e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008
 8001944:	431bde83 	.word	0x431bde83

08001948 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b01      	cmp	r3, #1
 8001960:	d12e      	bne.n	80019c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0201 	bic.w	r2, r2, #1
 8001970:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001972:	f7ff fba5 	bl	80010c0 <HAL_GetTick>
 8001976:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001978:	e01b      	b.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800197a:	f7ff fba1 	bl	80010c0 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d914      	bls.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10d      	bne.n	80019b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	f043 0210 	orr.w	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e007      	b.n	80019c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d0dc      	beq.n	800197a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4906      	ldr	r1, [pc, #24]	@ (8001a64 <__NVIC_EnableIRQ+0x34>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	@ (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	@ 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff4f 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b48:	f7ff ff64 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff ffb2 	bl	8001abc <NVIC_EncodePriority>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff81 	bl	8001a68 <__NVIC_SetPriority>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff57 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b08b      	sub	sp, #44	@ 0x2c
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	e169      	b.n	8001e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f040 8158 	bne.w	8001e6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a9a      	ldr	r2, [pc, #616]	@ (8001e2c <HAL_GPIO_Init+0x2a0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d05e      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001bc8:	4a98      	ldr	r2, [pc, #608]	@ (8001e2c <HAL_GPIO_Init+0x2a0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d875      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001bce:	4a98      	ldr	r2, [pc, #608]	@ (8001e30 <HAL_GPIO_Init+0x2a4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d058      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001bd4:	4a96      	ldr	r2, [pc, #600]	@ (8001e30 <HAL_GPIO_Init+0x2a4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d86f      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001bda:	4a96      	ldr	r2, [pc, #600]	@ (8001e34 <HAL_GPIO_Init+0x2a8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d052      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001be0:	4a94      	ldr	r2, [pc, #592]	@ (8001e34 <HAL_GPIO_Init+0x2a8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d869      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001be6:	4a94      	ldr	r2, [pc, #592]	@ (8001e38 <HAL_GPIO_Init+0x2ac>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d04c      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001bec:	4a92      	ldr	r2, [pc, #584]	@ (8001e38 <HAL_GPIO_Init+0x2ac>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d863      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001bf2:	4a92      	ldr	r2, [pc, #584]	@ (8001e3c <HAL_GPIO_Init+0x2b0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d046      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
 8001bf8:	4a90      	ldr	r2, [pc, #576]	@ (8001e3c <HAL_GPIO_Init+0x2b0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d85d      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001bfe:	2b12      	cmp	r3, #18
 8001c00:	d82a      	bhi.n	8001c58 <HAL_GPIO_Init+0xcc>
 8001c02:	2b12      	cmp	r3, #18
 8001c04:	d859      	bhi.n	8001cba <HAL_GPIO_Init+0x12e>
 8001c06:	a201      	add	r2, pc, #4	@ (adr r2, 8001c0c <HAL_GPIO_Init+0x80>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c87 	.word	0x08001c87
 8001c10:	08001c61 	.word	0x08001c61
 8001c14:	08001c73 	.word	0x08001c73
 8001c18:	08001cb5 	.word	0x08001cb5
 8001c1c:	08001cbb 	.word	0x08001cbb
 8001c20:	08001cbb 	.word	0x08001cbb
 8001c24:	08001cbb 	.word	0x08001cbb
 8001c28:	08001cbb 	.word	0x08001cbb
 8001c2c:	08001cbb 	.word	0x08001cbb
 8001c30:	08001cbb 	.word	0x08001cbb
 8001c34:	08001cbb 	.word	0x08001cbb
 8001c38:	08001cbb 	.word	0x08001cbb
 8001c3c:	08001cbb 	.word	0x08001cbb
 8001c40:	08001cbb 	.word	0x08001cbb
 8001c44:	08001cbb 	.word	0x08001cbb
 8001c48:	08001cbb 	.word	0x08001cbb
 8001c4c:	08001cbb 	.word	0x08001cbb
 8001c50:	08001c69 	.word	0x08001c69
 8001c54:	08001c7d 	.word	0x08001c7d
 8001c58:	4a79      	ldr	r2, [pc, #484]	@ (8001e40 <HAL_GPIO_Init+0x2b4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c5e:	e02c      	b.n	8001cba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e029      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	623b      	str	r3, [r7, #32]
          break;
 8001c70:	e024      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	3308      	adds	r3, #8
 8001c78:	623b      	str	r3, [r7, #32]
          break;
 8001c7a:	e01f      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	330c      	adds	r3, #12
 8001c82:	623b      	str	r3, [r7, #32]
          break;
 8001c84:	e01a      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e013      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d105      	bne.n	8001ca8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	611a      	str	r2, [r3, #16]
          break;
 8001ca6:	e009      	b.n	8001cbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	615a      	str	r2, [r3, #20]
          break;
 8001cb2:	e003      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_Init+0x130>
          break;
 8001cba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2bff      	cmp	r3, #255	@ 0xff
 8001cc0:	d801      	bhi.n	8001cc6 <HAL_GPIO_Init+0x13a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	e001      	b.n	8001cca <HAL_GPIO_Init+0x13e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2bff      	cmp	r3, #255	@ 0xff
 8001cd0:	d802      	bhi.n	8001cd8 <HAL_GPIO_Init+0x14c>
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0x152>
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	3b08      	subs	r3, #8
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	210f      	movs	r1, #15
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	6a39      	ldr	r1, [r7, #32]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80b1 	beq.w	8001e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e44 <HAL_GPIO_Init+0x2b8>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a4c      	ldr	r2, [pc, #304]	@ (8001e44 <HAL_GPIO_Init+0x2b8>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b4a      	ldr	r3, [pc, #296]	@ (8001e44 <HAL_GPIO_Init+0x2b8>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d24:	4a48      	ldr	r2, [pc, #288]	@ (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a40      	ldr	r2, [pc, #256]	@ (8001e4c <HAL_GPIO_Init+0x2c0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d013      	beq.n	8001d78 <HAL_GPIO_Init+0x1ec>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3f      	ldr	r2, [pc, #252]	@ (8001e50 <HAL_GPIO_Init+0x2c4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00d      	beq.n	8001d74 <HAL_GPIO_Init+0x1e8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e54 <HAL_GPIO_Init+0x2c8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <HAL_GPIO_Init+0x1e4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a3d      	ldr	r2, [pc, #244]	@ (8001e58 <HAL_GPIO_Init+0x2cc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_GPIO_Init+0x1e0>
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e006      	b.n	8001d7a <HAL_GPIO_Init+0x1ee>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e004      	b.n	8001d7a <HAL_GPIO_Init+0x1ee>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_Init+0x1ee>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_GPIO_Init+0x1ee>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7c:	f002 0203 	and.w	r2, r2, #3
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	4093      	lsls	r3, r2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d8a:	492f      	ldr	r1, [pc, #188]	@ (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001da4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	492c      	ldr	r1, [pc, #176]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	608b      	str	r3, [r1, #8]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001db2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4928      	ldr	r1, [pc, #160]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	4922      	ldr	r1, [pc, #136]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dda:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	491e      	ldr	r1, [pc, #120]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4918      	ldr	r1, [pc, #96]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4914      	ldr	r1, [pc, #80]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d021      	beq.n	8001e60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	490e      	ldr	r1, [pc, #56]	@ (8001e5c <HAL_GPIO_Init+0x2d0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e021      	b.n	8001e6e <HAL_GPIO_Init+0x2e2>
 8001e2a:	bf00      	nop
 8001e2c:	10320000 	.word	0x10320000
 8001e30:	10310000 	.word	0x10310000
 8001e34:	10220000 	.word	0x10220000
 8001e38:	10210000 	.word	0x10210000
 8001e3c:	10120000 	.word	0x10120000
 8001e40:	10110000 	.word	0x10110000
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40010800 	.word	0x40010800
 8001e50:	40010c00 	.word	0x40010c00
 8001e54:	40011000 	.word	0x40011000
 8001e58:	40011400 	.word	0x40011400
 8001e5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4909      	ldr	r1, [pc, #36]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	3301      	adds	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f47f ae8e 	bne.w	8001ba0 <HAL_GPIO_Init+0x14>
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	372c      	adds	r7, #44	@ 0x2c
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e12b      	b.n	800212e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe ff32 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	@ 0x24
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f28:	f001 f960 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8001f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a81      	ldr	r2, [pc, #516]	@ (8002138 <HAL_I2C_Init+0x274>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d807      	bhi.n	8001f48 <HAL_I2C_Init+0x84>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a80      	ldr	r2, [pc, #512]	@ (800213c <HAL_I2C_Init+0x278>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bf94      	ite	ls
 8001f40:	2301      	movls	r3, #1
 8001f42:	2300      	movhi	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e006      	b.n	8001f56 <HAL_I2C_Init+0x92>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a7d      	ldr	r2, [pc, #500]	@ (8002140 <HAL_I2C_Init+0x27c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	bf94      	ite	ls
 8001f50:	2301      	movls	r3, #1
 8001f52:	2300      	movhi	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0e7      	b.n	800212e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a78      	ldr	r2, [pc, #480]	@ (8002144 <HAL_I2C_Init+0x280>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0c9b      	lsrs	r3, r3, #18
 8001f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002138 <HAL_I2C_Init+0x274>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d802      	bhi.n	8001f98 <HAL_I2C_Init+0xd4>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3301      	adds	r3, #1
 8001f96:	e009      	b.n	8001fac <HAL_I2C_Init+0xe8>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	4a69      	ldr	r2, [pc, #420]	@ (8002148 <HAL_I2C_Init+0x284>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	3301      	adds	r3, #1
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	495c      	ldr	r1, [pc, #368]	@ (8002138 <HAL_I2C_Init+0x274>)
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d819      	bhi.n	8002000 <HAL_I2C_Init+0x13c>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e59      	subs	r1, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fda:	1c59      	adds	r1, r3, #1
 8001fdc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fe0:	400b      	ands	r3, r1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_I2C_Init+0x138>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e59      	subs	r1, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffa:	e051      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e04f      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d111      	bne.n	800202c <HAL_I2C_Init+0x168>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e58      	subs	r0, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	e012      	b.n	8002052 <HAL_I2C_Init+0x18e>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e58      	subs	r0, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	0099      	lsls	r1, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Init+0x196>
 8002056:	2301      	movs	r3, #1
 8002058:	e022      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10e      	bne.n	8002080 <HAL_I2C_Init+0x1bc>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e58      	subs	r0, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	440b      	add	r3, r1
 8002070:	fbb0 f3f3 	udiv	r3, r0, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800207e:	e00f      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	0099      	lsls	r1, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	6809      	ldr	r1, [r1, #0]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6911      	ldr	r1, [r2, #16]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	000186a0 	.word	0x000186a0
 800213c:	001e847f 	.word	0x001e847f
 8002140:	003d08ff 	.word	0x003d08ff
 8002144:	431bde83 	.word	0x431bde83
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	461a      	mov	r2, r3
 8002158:	460b      	mov	r3, r1
 800215a:	817b      	strh	r3, [r7, #10]
 800215c:	4613      	mov	r3, r2
 800215e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7fe ffae 	bl	80010c0 <HAL_GetTick>
 8002164:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b20      	cmp	r3, #32
 8002170:	f040 80e0 	bne.w	8002334 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2319      	movs	r3, #25
 800217a:	2201      	movs	r2, #1
 800217c:	4970      	ldr	r1, [pc, #448]	@ (8002340 <HAL_I2C_Master_Transmit+0x1f4>)
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fa92 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	e0d3      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_I2C_Master_Transmit+0x50>
 8002198:	2302      	movs	r3, #2
 800219a:	e0cc      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d007      	beq.n	80021c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2221      	movs	r2, #33	@ 0x21
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2210      	movs	r2, #16
 80021de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	893a      	ldrh	r2, [r7, #8]
 80021f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a50      	ldr	r2, [pc, #320]	@ (8002344 <HAL_I2C_Master_Transmit+0x1f8>)
 8002202:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002204:	8979      	ldrh	r1, [r7, #10]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	6a3a      	ldr	r2, [r7, #32]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f9ca 	bl	80025a4 <I2C_MasterRequestWrite>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e08d      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002230:	e066      	b.n	8002300 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	6a39      	ldr	r1, [r7, #32]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fb50 	bl	80028dc <I2C_WaitOnTXEFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00d      	beq.n	800225e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	2b04      	cmp	r3, #4
 8002248:	d107      	bne.n	800225a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e06b      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d11b      	bne.n	80022d4 <HAL_I2C_Master_Transmit+0x188>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d017      	beq.n	80022d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	6a39      	ldr	r1, [r7, #32]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fb47 	bl	800296c <I2C_WaitOnBTFFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d107      	bne.n	80022fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e01a      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	d194      	bne.n	8002232 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	00100002 	.word	0x00100002
 8002344:	ffff0000 	.word	0xffff0000

08002348 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	460b      	mov	r3, r1
 8002356:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7fe feb2 	bl	80010c0 <HAL_GetTick>
 800235c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b20      	cmp	r3, #32
 800236c:	f040 8111 	bne.w	8002592 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2319      	movs	r3, #25
 8002376:	2201      	movs	r2, #1
 8002378:	4988      	ldr	r1, [pc, #544]	@ (800259c <HAL_I2C_IsDeviceReady+0x254>)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f994 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	e104      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_I2C_IsDeviceReady+0x50>
 8002394:	2302      	movs	r3, #2
 8002396:	e0fd      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d007      	beq.n	80023be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2224      	movs	r2, #36	@ 0x24
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a70      	ldr	r2, [pc, #448]	@ (80025a0 <HAL_I2C_IsDeviceReady+0x258>)
 80023e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f952 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002418:	d103      	bne.n	8002422 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002420:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0b6      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002434:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe fe43 	bl	80010c0 <HAL_GetTick>
 800243a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800246a:	e025      	b.n	80024b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800246c:	f7fe fe28 	bl	80010c0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d302      	bcc.n	8002482 <HAL_I2C_IsDeviceReady+0x13a>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	22a0      	movs	r2, #160	@ 0xa0
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b02      	cmp	r3, #2
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80024c2:	d005      	beq.n	80024d0 <HAL_I2C_IsDeviceReady+0x188>
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_I2C_IsDeviceReady+0x188>
 80024ca:	7dbb      	ldrb	r3, [r7, #22]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0cd      	beq.n	800246c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d129      	bne.n	800253a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	4921      	ldr	r1, [pc, #132]	@ (800259c <HAL_I2C_IsDeviceReady+0x254>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f8c6 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e036      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e02c      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002548:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002552:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2319      	movs	r3, #25
 800255a:	2201      	movs	r2, #1
 800255c:	490f      	ldr	r1, [pc, #60]	@ (800259c <HAL_I2C_IsDeviceReady+0x254>)
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8a2 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e012      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	3301      	adds	r3, #1
 8002572:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	f4ff af32 	bcc.w	80023e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002592:	2302      	movs	r3, #2
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	00100002 	.word	0x00100002
 80025a0:	ffff0000 	.word	0xffff0000

080025a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d006      	beq.n	80025ce <I2C_MasterRequestWrite+0x2a>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d003      	beq.n	80025ce <I2C_MasterRequestWrite+0x2a>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025cc:	d108      	bne.n	80025e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e00b      	b.n	80025f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e4:	2b12      	cmp	r3, #18
 80025e6:	d107      	bne.n	80025f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f84f 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800261e:	d103      	bne.n	8002628 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e035      	b.n	8002698 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002634:	d108      	bne.n	8002648 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002644:	611a      	str	r2, [r3, #16]
 8002646:	e01b      	b.n	8002680 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002648:	897b      	ldrh	r3, [r7, #10]
 800264a:	11db      	asrs	r3, r3, #7
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 0306 	and.w	r3, r3, #6
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f063 030f 	orn	r3, r3, #15
 8002658:	b2da      	uxtb	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	490e      	ldr	r1, [pc, #56]	@ (80026a0 <I2C_MasterRequestWrite+0xfc>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f898 	bl	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e010      	b.n	8002698 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002676:	897b      	ldrh	r3, [r7, #10]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4907      	ldr	r1, [pc, #28]	@ (80026a4 <I2C_MasterRequestWrite+0x100>)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f888 	bl	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	00010008 	.word	0x00010008
 80026a4:	00010002 	.word	0x00010002

080026a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b8:	e048      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d044      	beq.n	800274c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7fe fcfd 	bl	80010c0 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d139      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d10d      	bne.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	e00c      	b.n	8002718 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	43da      	mvns	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	429a      	cmp	r2, r3
 800271c:	d116      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e023      	b.n	8002794 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	0c1b      	lsrs	r3, r3, #16
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10d      	bne.n	8002772 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	43da      	mvns	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4013      	ands	r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	e00c      	b.n	800278c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	43da      	mvns	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4013      	ands	r3, r2
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	429a      	cmp	r2, r3
 8002790:	d093      	beq.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027aa:	e071      	b.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ba:	d123      	bne.n	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	f043 0204 	orr.w	r2, r3, #4
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e067      	b.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	d041      	beq.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280c:	f7fe fc58 	bl	80010c0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	d302      	bcc.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d136      	bne.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10c      	bne.n	8002846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4013      	ands	r3, r2
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	e00b      	b.n	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	43da      	mvns	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e021      	b.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10c      	bne.n	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	43da      	mvns	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4013      	ands	r3, r2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e00b      	b.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4013      	ands	r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f47f af6d 	bne.w	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028e8:	e034      	b.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f886 	bl	80029fc <I2C_IsAcknowledgeFailed>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e034      	b.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d028      	beq.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7fe fbdd 	bl	80010c0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11d      	bne.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002922:	2b80      	cmp	r3, #128	@ 0x80
 8002924:	d016      	beq.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295e:	2b80      	cmp	r3, #128	@ 0x80
 8002960:	d1c3      	bne.n	80028ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002978:	e034      	b.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f83e 	bl	80029fc <I2C_IsAcknowledgeFailed>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e034      	b.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d028      	beq.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002992:	f7fe fb95 	bl	80010c0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d302      	bcc.n	80029a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11d      	bne.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d016      	beq.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d1c3      	bne.n	800297a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a12:	d11b      	bne.n	8002a4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	f043 0204 	orr.w	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e272      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8087 	beq.w	8002b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a78:	4b92      	ldr	r3, [pc, #584]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d00c      	beq.n	8002a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a84:	4b8f      	ldr	r3, [pc, #572]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d112      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5e>
 8002a90:	4b8c      	ldr	r3, [pc, #560]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9e:	4b89      	ldr	r3, [pc, #548]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d06c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x12c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d168      	bne.n	8002b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e24c      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x76>
 8002ac0:	4b80      	ldr	r3, [pc, #512]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a7f      	ldr	r2, [pc, #508]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	e02e      	b.n	8002b2c <HAL_RCC_OscConfig+0xd4>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x98>
 8002ad6:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7a      	ldr	r2, [pc, #488]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b78      	ldr	r3, [pc, #480]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a77      	ldr	r2, [pc, #476]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e01d      	b.n	8002b2c <HAL_RCC_OscConfig+0xd4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0xbc>
 8002afa:	4b72      	ldr	r3, [pc, #456]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a71      	ldr	r2, [pc, #452]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b6f      	ldr	r3, [pc, #444]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0xd4>
 8002b14:	4b6b      	ldr	r3, [pc, #428]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6a      	ldr	r2, [pc, #424]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b68      	ldr	r3, [pc, #416]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a67      	ldr	r2, [pc, #412]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fe fac4 	bl	80010c0 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fac0 	bl	80010c0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	@ 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e200      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe4>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fab0 	bl	80010c0 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe faac 	bl	80010c0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	@ 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1ec      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	4b53      	ldr	r3, [pc, #332]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x10c>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d063      	beq.n	8002c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b92:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b9e:	4b49      	ldr	r3, [pc, #292]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d11c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x18c>
 8002baa:	4b46      	ldr	r3, [pc, #280]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	4b43      	ldr	r3, [pc, #268]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x176>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e1c0      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4939      	ldr	r1, [pc, #228]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	e03a      	b.n	8002c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bec:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fa65 	bl	80010c0 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fa61 	bl	80010c0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e1a1      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4927      	ldr	r1, [pc, #156]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	e015      	b.n	8002c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2e:	4b26      	ldr	r3, [pc, #152]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fa44 	bl	80010c0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fa40 	bl	80010c0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e180      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03a      	beq.n	8002cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d019      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6e:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe fa24 	bl	80010c0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fa20 	bl	80010c0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e160      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f000 fafe 	bl	800329c <RCC_Delay>
 8002ca0:	e01c      	b.n	8002cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fa0a 	bl	80010c0 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cae:	e00f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe fa06 	bl	80010c0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d908      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e146      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	42420000 	.word	0x42420000
 8002ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	4b92      	ldr	r3, [pc, #584]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e9      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a6 	beq.w	8002e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b8b      	ldr	r3, [pc, #556]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b88      	ldr	r3, [pc, #544]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4a87      	ldr	r2, [pc, #540]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d04:	61d3      	str	r3, [r2, #28]
 8002d06:	4b85      	ldr	r3, [pc, #532]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	4b82      	ldr	r3, [pc, #520]	@ (8002f20 <HAL_RCC_OscConfig+0x4c8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d118      	bne.n	8002d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d22:	4b7f      	ldr	r3, [pc, #508]	@ (8002f20 <HAL_RCC_OscConfig+0x4c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a7e      	ldr	r2, [pc, #504]	@ (8002f20 <HAL_RCC_OscConfig+0x4c8>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2e:	f7fe f9c7 	bl	80010c0 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7fe f9c3 	bl	80010c0 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	@ 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e103      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	4b75      	ldr	r3, [pc, #468]	@ (8002f20 <HAL_RCC_OscConfig+0x4c8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x312>
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a6e      	ldr	r2, [pc, #440]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6213      	str	r3, [r2, #32]
 8002d68:	e02d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x334>
 8002d72:	4b6a      	ldr	r3, [pc, #424]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4a69      	ldr	r2, [pc, #420]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6213      	str	r3, [r2, #32]
 8002d7e:	4b67      	ldr	r3, [pc, #412]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4a66      	ldr	r2, [pc, #408]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6213      	str	r3, [r2, #32]
 8002d8a:	e01c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d10c      	bne.n	8002dae <HAL_RCC_OscConfig+0x356>
 8002d94:	4b61      	ldr	r3, [pc, #388]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	4a60      	ldr	r2, [pc, #384]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	6213      	str	r3, [r2, #32]
 8002da0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6213      	str	r3, [r2, #32]
 8002dac:	e00b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36e>
 8002dae:	4b5b      	ldr	r3, [pc, #364]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4a5a      	ldr	r2, [pc, #360]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6213      	str	r3, [r2, #32]
 8002dba:	4b58      	ldr	r3, [pc, #352]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a57      	ldr	r2, [pc, #348]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d015      	beq.n	8002dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fe f977 	bl	80010c0 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe f973 	bl	80010c0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0b1      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	4b4b      	ldr	r3, [pc, #300]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ee      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x37e>
 8002df8:	e014      	b.n	8002e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f961 	bl	80010c0 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fe f95d 	bl	80010c0 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e09b      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	4b40      	ldr	r3, [pc, #256]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ee      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8087 	beq.w	8002f4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e40:	4b36      	ldr	r3, [pc, #216]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d061      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d146      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e54:	4b33      	ldr	r3, [pc, #204]	@ (8002f24 <HAL_RCC_OscConfig+0x4cc>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe f931 	bl	80010c0 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe f92d 	bl	80010c0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e06d      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	4b29      	ldr	r3, [pc, #164]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e88:	d108      	bne.n	8002e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e8a:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4921      	ldr	r1, [pc, #132]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a19      	ldr	r1, [r3, #32]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	430b      	orrs	r3, r1
 8002eae:	491b      	ldr	r1, [pc, #108]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe f901 	bl	80010c0 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe f8fd 	bl	80010c0 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e03d      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed4:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x46a>
 8002ee0:	e035      	b.n	8002f4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <HAL_RCC_OscConfig+0x4cc>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe f8ea 	bl	80010c0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe f8e6 	bl	80010c0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e026      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x498>
 8002f0e:	e01e      	b.n	8002f4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e019      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40007000 	.word	0x40007000
 8002f24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f28:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <HAL_RCC_OscConfig+0x500>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0d0      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b6a      	ldr	r3, [pc, #424]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d910      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b67      	ldr	r3, [pc, #412]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0207 	bic.w	r2, r3, #7
 8002f86:	4965      	ldr	r1, [pc, #404]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b63      	ldr	r3, [pc, #396]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0b8      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb8:	4b59      	ldr	r3, [pc, #356]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a58      	ldr	r2, [pc, #352]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd0:	4b53      	ldr	r3, [pc, #332]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b50      	ldr	r3, [pc, #320]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	494d      	ldr	r1, [pc, #308]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d040      	beq.n	800307c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b47      	ldr	r3, [pc, #284]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d115      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e07f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e073      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b3d      	ldr	r3, [pc, #244]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06b      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b39      	ldr	r3, [pc, #228]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4936      	ldr	r1, [pc, #216]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800304c:	f7fe f838 	bl	80010c0 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fe f834 	bl	80010c0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e053      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b2d      	ldr	r3, [pc, #180]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b27      	ldr	r3, [pc, #156]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d210      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b24      	ldr	r3, [pc, #144]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	4922      	ldr	r1, [pc, #136]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b20      	ldr	r3, [pc, #128]	@ (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e032      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b19      	ldr	r3, [pc, #100]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4916      	ldr	r1, [pc, #88]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030d6:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	490e      	ldr	r1, [pc, #56]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ea:	f000 f821 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030ee:	4602      	mov	r2, r0
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	490a      	ldr	r1, [pc, #40]	@ (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	5ccb      	ldrb	r3, [r1, r3]
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	4a09      	ldr	r2, [pc, #36]	@ (8003128 <HAL_RCC_ClockConfig+0x1cc>)
 8003104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_RCC_ClockConfig+0x1d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd feac 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
 8003124:	080081a4 	.word	0x080081a4
 8003128:	20000008 	.word	0x20000008
 800312c:	2000000c 	.word	0x2000000c

08003130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800314a:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b04      	cmp	r3, #4
 8003158:	d002      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x30>
 800315a:	2b08      	cmp	r3, #8
 800315c:	d003      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x36>
 800315e:	e027      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003160:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003162:	613b      	str	r3, [r7, #16]
      break;
 8003164:	e027      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	4a17      	ldr	r2, [pc, #92]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800317e:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0c5b      	lsrs	r3, r3, #17
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a0d      	ldr	r2, [pc, #52]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003192:	fb03 f202 	mul.w	r2, r3, r2
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e004      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	613b      	str	r3, [r7, #16]
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031b2:	613b      	str	r3, [r7, #16]
      break;
 80031b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b6:	693b      	ldr	r3, [r7, #16]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	007a1200 	.word	0x007a1200
 80031cc:	080081bc 	.word	0x080081bc
 80031d0:	080081cc 	.word	0x080081cc
 80031d4:	003d0900 	.word	0x003d0900

080031d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031dc:	4b02      	ldr	r3, [pc, #8]	@ (80031e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	20000008 	.word	0x20000008

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f0:	f7ff fff2 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	@ (800320c <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	@ (8003210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	080081b4 	.word	0x080081b4

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003218:	f7ff ffde 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	0adb      	lsrs	r3, r3, #11
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4903      	ldr	r1, [pc, #12]	@ (8003238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	080081b4 	.word	0x080081b4

0800323c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	220f      	movs	r2, #15
 800324a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_RCC_GetClockConfig+0x58>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003258:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <HAL_RCC_GetClockConfig+0x58>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003264:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <HAL_RCC_GetClockConfig+0x58>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003270:	4b08      	ldr	r3, [pc, #32]	@ (8003294 <HAL_RCC_GetClockConfig+0x58>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_RCC_GetClockConfig+0x5c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0207 	and.w	r2, r3, #7
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40021000 	.word	0x40021000
 8003298:	40022000 	.word	0x40022000

0800329c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032a4:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <RCC_Delay+0x34>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0a      	ldr	r2, [pc, #40]	@ (80032d4 <RCC_Delay+0x38>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	0a5b      	lsrs	r3, r3, #9
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032b8:	bf00      	nop
  }
  while (Delay --);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1e5a      	subs	r2, r3, #1
 80032be:	60fa      	str	r2, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f9      	bne.n	80032b8 <RCC_Delay+0x1c>
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	20000008 	.word	0x20000008
 80032d4:	10624dd3 	.word	0x10624dd3

080032d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d07d      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032f4:	2300      	movs	r3, #0
 80032f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003304:	4b4c      	ldr	r3, [pc, #304]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4a4b      	ldr	r2, [pc, #300]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800330e:	61d3      	str	r3, [r2, #28]
 8003310:	4b49      	ldr	r3, [pc, #292]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331c:	2301      	movs	r3, #1
 800331e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	4b46      	ldr	r3, [pc, #280]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d118      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332c:	4b43      	ldr	r3, [pc, #268]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a42      	ldr	r2, [pc, #264]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003338:	f7fd fec2 	bl	80010c0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	e008      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003340:	f7fd febe 	bl	80010c0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e06d      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b3a      	ldr	r3, [pc, #232]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800335e:	4b36      	ldr	r3, [pc, #216]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003366:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d02e      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d027      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800337c:	4b2e      	ldr	r3, [pc, #184]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003384:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003386:	4b2e      	ldr	r3, [pc, #184]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800338c:	4b2c      	ldr	r3, [pc, #176]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003392:	4a29      	ldr	r2, [pc, #164]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d014      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fd fe8d 	bl	80010c0 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fd fe89 	bl	80010c0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e036      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ee      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4917      	ldr	r1, [pc, #92]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e4:	4b14      	ldr	r3, [pc, #80]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4a13      	ldr	r2, [pc, #76]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	490b      	ldr	r1, [pc, #44]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800341a:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4904      	ldr	r1, [pc, #16]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	40007000 	.word	0x40007000
 8003440:	42420440 	.word	0x42420440

08003444 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b10      	cmp	r3, #16
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b10      	cmp	r3, #16
 800346a:	f200 808a 	bhi.w	8003582 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d045      	beq.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d075      	beq.n	8003566 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800347a:	e082      	b.n	8003582 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800347c:	4b46      	ldr	r3, [pc, #280]	@ (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003482:	4b45      	ldr	r3, [pc, #276]	@ (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d07b      	beq.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0c9b      	lsrs	r3, r3, #18
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4a41      	ldr	r2, [pc, #260]	@ (800359c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d015      	beq.n	80034d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	0c5b      	lsrs	r3, r3, #17
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	4a3b      	ldr	r2, [pc, #236]	@ (80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00d      	beq.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80034c0:	4a38      	ldr	r2, [pc, #224]	@ (80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	e004      	b.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4a34      	ldr	r2, [pc, #208]	@ (80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80034dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034e8:	d102      	bne.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	61bb      	str	r3, [r7, #24]
      break;
 80034ee:	e04a      	b.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4a2d      	ldr	r2, [pc, #180]	@ (80035ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	61bb      	str	r3, [r7, #24]
      break;
 80034fe:	e042      	b.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003500:	4b25      	ldr	r3, [pc, #148]	@ (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800350c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003510:	d108      	bne.n	8003524 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800351c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e01f      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800352e:	d109      	bne.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003530:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800353c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	e00f      	b.n	8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800354e:	d11c      	bne.n	800358a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003550:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d016      	beq.n	800358a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800355c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003560:	61bb      	str	r3, [r7, #24]
      break;
 8003562:	e012      	b.n	800358a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003564:	e011      	b.n	800358a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003566:	f7ff fe55 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 800356a:	4602      	mov	r2, r0
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0b9b      	lsrs	r3, r3, #14
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	3301      	adds	r3, #1
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	61bb      	str	r3, [r7, #24]
      break;
 8003580:	e004      	b.n	800358c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800358a:	bf00      	nop
    }
  }
  return (frequency);
 800358c:	69bb      	ldr	r3, [r7, #24]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	080081d0 	.word	0x080081d0
 80035a0:	080081e0 	.word	0x080081e0
 80035a4:	007a1200 	.word	0x007a1200
 80035a8:	003d0900 	.word	0x003d0900
 80035ac:	aaaaaaab 	.word	0xaaaaaaab

080035b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e041      	b.n	8003646 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f839 	bl	800364e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 f9b4 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d001      	beq.n	8003678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e03a      	b.n	80036ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_TIM_Base_Start_IT+0x98>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x58>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a2:	d009      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x58>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <HAL_TIM_Base_Start_IT+0x9c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_TIM_Base_Start_IT+0x58>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <HAL_TIM_Base_Start_IT+0xa0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d111      	bne.n	80036dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d010      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	e007      	b.n	80036ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800

08003704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0202 	mvn.w	r2, #2
 8003730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8ed 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8e0 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8ef 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0204 	mvn.w	r2, #4
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8c3 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8b6 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f8c5 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0208 	mvn.w	r2, #8
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2204      	movs	r2, #4
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f899 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f88c 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f89b 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b10      	cmp	r3, #16
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b10      	cmp	r3, #16
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2208      	movs	r2, #8
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f86f 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f862 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f871 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10e      	bne.n	8003888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0201 	mvn.w	r2, #1
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fc ff18 	bl	80006b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b80      	cmp	r3, #128	@ 0x80
 8003894:	d10e      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a0:	2b80      	cmp	r3, #128	@ 0x80
 80038a2:	d107      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8bf 	bl	8003a32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038be:	2b40      	cmp	r3, #64	@ 0x40
 80038c0:	d10e      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038cc:	2b40      	cmp	r3, #64	@ 0x40
 80038ce:	d107      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f835 	bl	800394a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d10e      	bne.n	800390c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d107      	bne.n	800390c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0220 	mvn.w	r2, #32
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f88a 	bl	8003a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a29      	ldr	r2, [pc, #164]	@ (8003a14 <TIM_Base_SetConfig+0xb8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a26      	ldr	r2, [pc, #152]	@ (8003a18 <TIM_Base_SetConfig+0xbc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a25      	ldr	r2, [pc, #148]	@ (8003a1c <TIM_Base_SetConfig+0xc0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a14 <TIM_Base_SetConfig+0xb8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a19      	ldr	r2, [pc, #100]	@ (8003a18 <TIM_Base_SetConfig+0xbc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a18      	ldr	r2, [pc, #96]	@ (8003a1c <TIM_Base_SetConfig+0xc0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d108      	bne.n	80039d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a07      	ldr	r2, [pc, #28]	@ (8003a14 <TIM_Base_SetConfig+0xb8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d103      	bne.n	8003a04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	615a      	str	r2, [r3, #20]
}
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40000800 	.word	0x40000800

08003a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e042      	b.n	8003adc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd f9b0 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	@ 0x24
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f9af 	bl	8003dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	@ 0x28
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d16d      	bne.n	8003be0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_UART_Transmit+0x2c>
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e066      	b.n	8003be2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2221      	movs	r2, #33	@ 0x21
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b22:	f7fd facd 	bl	80010c0 <HAL_GetTick>
 8003b26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3c:	d108      	bne.n	8003b50 <HAL_UART_Transmit+0x6c>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d104      	bne.n	8003b50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e003      	b.n	8003b58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b58:	e02a      	b.n	8003bb0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	2180      	movs	r1, #128	@ 0x80
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f8d2 	bl	8003d0e <UART_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e036      	b.n	8003be2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	e007      	b.n	8003ba2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1cf      	bne.n	8003b5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2140      	movs	r1, #64	@ 0x40
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f8a2 	bl	8003d0e <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e006      	b.n	8003be2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b08a      	sub	sp, #40	@ 0x28
 8003bee:	af02      	add	r7, sp, #8
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d17c      	bne.n	8003d04 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_UART_Receive+0x2c>
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e075      	b.n	8003d06 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2222      	movs	r2, #34	@ 0x22
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c2e:	f7fd fa47 	bl	80010c0 <HAL_GetTick>
 8003c32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c48:	d108      	bne.n	8003c5c <HAL_UART_Receive+0x72>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d104      	bne.n	8003c5c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e003      	b.n	8003c64 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c64:	e043      	b.n	8003cee <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2120      	movs	r1, #32
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f84c 	bl	8003d0e <UART_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e042      	b.n	8003d06 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10c      	bne.n	8003ca0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	e01f      	b.n	8003ce0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca8:	d007      	beq.n	8003cba <HAL_UART_Receive+0xd0>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <HAL_UART_Receive+0xde>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e008      	b.n	8003cda <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1b6      	bne.n	8003c66 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b090      	sub	sp, #64	@ 0x40
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1e:	e050      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d04c      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d007      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2e:	f7fd f9c7 	bl	80010c0 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d241      	bcs.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d60:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e5      	bne.n	8003d3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	613b      	str	r3, [r7, #16]
   return(result);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d92:	623a      	str	r2, [r7, #32]
 8003d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	69f9      	ldr	r1, [r7, #28]
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e5      	bne.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e00f      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d09f      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3740      	adds	r7, #64	@ 0x40
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003e26:	f023 030c 	bic.w	r3, r3, #12
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <UART_SetConfig+0x114>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d103      	bne.n	8003e5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e54:	f7ff f9de 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	e002      	b.n	8003e62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7ff f9c6 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8003e60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	009a      	lsls	r2, r3, #2
 8003e6c:	441a      	add	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	4a22      	ldr	r2, [pc, #136]	@ (8003f04 <UART_SetConfig+0x118>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	0119      	lsls	r1, r3, #4
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009a      	lsls	r2, r3, #2
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e98:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <UART_SetConfig+0x118>)
 8003e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2064      	movs	r0, #100	@ 0x64
 8003ea2:	fb00 f303 	mul.w	r3, r0, r3
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	3332      	adds	r3, #50	@ 0x32
 8003eac:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <UART_SetConfig+0x118>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb8:	4419      	add	r1, r3
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009a      	lsls	r2, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <UART_SetConfig+0x118>)
 8003ed2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	2064      	movs	r0, #100	@ 0x64
 8003eda:	fb00 f303 	mul.w	r3, r0, r3
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	3332      	adds	r3, #50	@ 0x32
 8003ee4:	4a07      	ldr	r2, [pc, #28]	@ (8003f04 <UART_SetConfig+0x118>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	f003 020f 	and.w	r2, r3, #15
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	440a      	add	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40013800 	.word	0x40013800
 8003f04:	51eb851f 	.word	0x51eb851f

08003f08 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f0e:	f3ef 8305 	mrs	r3, IPSR
 8003f12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1e:	607b      	str	r3, [r7, #4]
  return(result);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <osKernelInitialize+0x32>
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <osKernelInitialize+0x60>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d109      	bne.n	8003f42 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f32:	603b      	str	r3, [r7, #0]
  return(result);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f3a:	f06f 0305 	mvn.w	r3, #5
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e00c      	b.n	8003f5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f42:	4b09      	ldr	r3, [pc, #36]	@ (8003f68 <osKernelInitialize+0x60>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003f4a:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <osKernelInitialize+0x60>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e002      	b.n	8003f5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	20000600 	.word	0x20000600

08003f6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f72:	f3ef 8305 	mrs	r3, IPSR
 8003f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f82:	607b      	str	r3, [r7, #4]
  return(result);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <osKernelStart+0x32>
 8003f8a:	4b11      	ldr	r3, [pc, #68]	@ (8003fd0 <osKernelStart+0x64>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d109      	bne.n	8003fa6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f92:	f3ef 8311 	mrs	r3, BASEPRI
 8003f96:	603b      	str	r3, [r7, #0]
  return(result);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f9e:	f06f 0305 	mvn.w	r3, #5
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e00e      	b.n	8003fc4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <osKernelStart+0x64>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003fae:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <osKernelStart+0x64>)
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003fb4:	f001 f890 	bl	80050d8 <vTaskStartScheduler>
      stat = osOK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e002      	b.n	8003fc4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000600 	.word	0x20000600

08003fd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b092      	sub	sp, #72	@ 0x48
 8003fd8:	af04      	add	r7, sp, #16
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fe4:	f3ef 8305 	mrs	r3, IPSR
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f040 8094 	bne.w	800411a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 808d 	bne.w	800411a <osThreadNew+0x146>
 8004000:	4b48      	ldr	r3, [pc, #288]	@ (8004124 <osThreadNew+0x150>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d106      	bne.n	8004016 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004008:	f3ef 8311 	mrs	r3, BASEPRI
 800400c:	61fb      	str	r3, [r7, #28]
  return(result);
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 8082 	bne.w	800411a <osThreadNew+0x146>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d07e      	beq.n	800411a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800401c:	2380      	movs	r3, #128	@ 0x80
 800401e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004020:	2318      	movs	r3, #24
 8004022:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004024:	2300      	movs	r3, #0
 8004026:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004028:	f107 031b 	add.w	r3, r7, #27
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800402e:	f04f 33ff 	mov.w	r3, #4294967295
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d045      	beq.n	80040c6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <osThreadNew+0x74>
        name = attr->name;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <osThreadNew+0x9a>
 800405c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405e:	2b38      	cmp	r3, #56	@ 0x38
 8004060:	d805      	bhi.n	800406e <osThreadNew+0x9a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <osThreadNew+0x9e>
        return (NULL);
 800406e:	2300      	movs	r3, #0
 8004070:	e054      	b.n	800411c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00e      	beq.n	80040a8 <osThreadNew+0xd4>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004090:	d90a      	bls.n	80040a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004096:	2b00      	cmp	r3, #0
 8004098:	d006      	beq.n	80040a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <osThreadNew+0xd4>
        mem = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040a6:	e010      	b.n	80040ca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10c      	bne.n	80040ca <osThreadNew+0xf6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d108      	bne.n	80040ca <osThreadNew+0xf6>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <osThreadNew+0xf6>
          mem = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040c4:	e001      	b.n	80040ca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d110      	bne.n	80040f2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040d8:	9202      	str	r2, [sp, #8]
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fe24 	bl	8004d34 <xTaskCreateStatic>
 80040ec:	4603      	mov	r3, r0
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e013      	b.n	800411a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d110      	bne.n	800411a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	f107 0314 	add.w	r3, r7, #20
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fe71 	bl	8004df2 <xTaskCreate>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	d001      	beq.n	800411a <osThreadNew+0x146>
          hTask = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800411a:	697b      	ldr	r3, [r7, #20]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3738      	adds	r7, #56	@ 0x38
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000600 	.word	0x20000600

08004128 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004130:	f3ef 8305 	mrs	r3, IPSR
 8004134:	613b      	str	r3, [r7, #16]
  return(result);
 8004136:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10f      	bne.n	800415c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413c:	f3ef 8310 	mrs	r3, PRIMASK
 8004140:	60fb      	str	r3, [r7, #12]
  return(result);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <osDelay+0x34>
 8004148:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <osDelay+0x58>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d109      	bne.n	8004164 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004150:	f3ef 8311 	mrs	r3, BASEPRI
 8004154:	60bb      	str	r3, [r7, #8]
  return(result);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <osDelay+0x3c>
    stat = osErrorISR;
 800415c:	f06f 0305 	mvn.w	r3, #5
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e007      	b.n	8004174 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <osDelay+0x4c>
      vTaskDelay(ticks);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 ff7c 	bl	800506c <vTaskDelay>
    }
  }

  return (stat);
 8004174:	697b      	ldr	r3, [r7, #20]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000600 	.word	0x20000600

08004184 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a06      	ldr	r2, [pc, #24]	@ (80041ac <vApplicationGetIdleTaskMemory+0x28>)
 8004194:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a05      	ldr	r2, [pc, #20]	@ (80041b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800419a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2280      	movs	r2, #128	@ 0x80
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000604 	.word	0x20000604
 80041b0:	20000660 	.word	0x20000660

080041b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a07      	ldr	r2, [pc, #28]	@ (80041e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80041c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4a06      	ldr	r2, [pc, #24]	@ (80041e4 <vApplicationGetTimerTaskMemory+0x30>)
 80041ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000860 	.word	0x20000860
 80041e4:	200008bc 	.word	0x200008bc

080041e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f103 0208 	add.w	r2, r3, #8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004200:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f103 0208 	add.w	r2, r3, #8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f103 0208 	add.w	r2, r3, #8
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr

0800423e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d103      	bne.n	80042a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e00c      	b.n	80042be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3308      	adds	r3, #8
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e002      	b.n	80042b2 <vListInsert+0x2e>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d2f6      	bcs.n	80042ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6892      	ldr	r2, [r2, #8]
 800430a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6852      	ldr	r2, [r2, #4]
 8004314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	429a      	cmp	r2, r3
 800431e:	d103      	bne.n	8004328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr
	...

08004348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004374:	f001 fffa 	bl	800636c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	441a      	add	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a4:	3b01      	subs	r3, #1
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80043aa:	fb01 f303 	mul.w	r3, r1, r3
 80043ae:	441a      	add	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	22ff      	movs	r2, #255	@ 0xff
 80043b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	22ff      	movs	r2, #255	@ 0xff
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d114      	bne.n	80043f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01a      	beq.n	8004408 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3310      	adds	r3, #16
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 f910 	bl	80055fc <xTaskRemoveFromEventList>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d012      	beq.n	8004408 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <xQueueGenericReset+0xd0>)
 80043e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	e009      	b.n	8004408 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3310      	adds	r3, #16
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fef5 	bl	80041e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3324      	adds	r3, #36	@ 0x24
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fef0 	bl	80041e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004408:	f001 ffe0 	bl	80063cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800440c:	2301      	movs	r3, #1
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08e      	sub	sp, #56	@ 0x38
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <xQueueGenericCreateStatic+0x56>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <xQueueGenericCreateStatic+0x5a>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <xQueueGenericCreateStatic+0x5c>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	623b      	str	r3, [r7, #32]
}
 800448e:	bf00      	nop
 8004490:	bf00      	nop
 8004492:	e7fd      	b.n	8004490 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <xQueueGenericCreateStatic+0x84>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <xQueueGenericCreateStatic+0x88>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <xQueueGenericCreateStatic+0x8a>
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61fb      	str	r3, [r7, #28]
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	e7fd      	b.n	80044be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044c2:	2350      	movs	r3, #80	@ 0x50
 80044c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b50      	cmp	r3, #80	@ 0x50
 80044ca:	d00b      	beq.n	80044e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	61bb      	str	r3, [r7, #24]
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044f6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80044fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f805 	bl	8004514 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800450c:	4618      	mov	r0, r3
 800450e:	3730      	adds	r7, #48	@ 0x30
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e002      	b.n	8004536 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004542:	2101      	movs	r1, #1
 8004544:	69b8      	ldr	r0, [r7, #24]
 8004546:	f7ff feff 	bl	8004348 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	78fa      	ldrb	r2, [r7, #3]
 800454e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08e      	sub	sp, #56	@ 0x38
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800456a:	2300      	movs	r3, #0
 800456c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <xQueueGenericSend+0x34>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	e7fd      	b.n	800458c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <xQueueGenericSend+0x42>
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <xQueueGenericSend+0x46>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <xQueueGenericSend+0x48>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <xQueueGenericSend+0x64>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045ba:	bf00      	nop
 80045bc:	bf00      	nop
 80045be:	e7fd      	b.n	80045bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d103      	bne.n	80045ce <xQueueGenericSend+0x72>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <xQueueGenericSend+0x76>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGenericSend+0x78>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <xQueueGenericSend+0x94>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045f0:	f001 f9c8 	bl	8005984 <xTaskGetSchedulerState>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <xQueueGenericSend+0xa4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <xQueueGenericSend+0xa8>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <xQueueGenericSend+0xaa>
 8004604:	2300      	movs	r3, #0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <xQueueGenericSend+0xc6>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	61fb      	str	r3, [r7, #28]
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	e7fd      	b.n	800461e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004622:	f001 fea3 	bl	800636c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <xQueueGenericSend+0xdc>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d129      	bne.n	800468c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800463e:	f000 fa0d 	bl	8004a5c <prvCopyDataToQueue>
 8004642:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	2b00      	cmp	r3, #0
 800464a:	d010      	beq.n	800466e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464e:	3324      	adds	r3, #36	@ 0x24
 8004650:	4618      	mov	r0, r3
 8004652:	f000 ffd3 	bl	80055fc <xTaskRemoveFromEventList>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800465c:	4b3f      	ldr	r3, [pc, #252]	@ (800475c <xQueueGenericSend+0x200>)
 800465e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	e00a      	b.n	8004684 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800466e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004674:	4b39      	ldr	r3, [pc, #228]	@ (800475c <xQueueGenericSend+0x200>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004684:	f001 fea2 	bl	80063cc <vPortExitCritical>
				return pdPASS;
 8004688:	2301      	movs	r3, #1
 800468a:	e063      	b.n	8004754 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004692:	f001 fe9b 	bl	80063cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004696:	2300      	movs	r3, #0
 8004698:	e05c      	b.n	8004754 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 f80d 	bl	80056c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046ae:	f001 fe8d 	bl	80063cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046b2:	f000 fd79 	bl	80051a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046b6:	f001 fe59 	bl	800636c <vPortEnterCritical>
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046c0:	b25b      	sxtb	r3, r3
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d103      	bne.n	80046d0 <xQueueGenericSend+0x174>
 80046c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d103      	bne.n	80046e6 <xQueueGenericSend+0x18a>
 80046de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046e6:	f001 fe71 	bl	80063cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ea:	1d3a      	adds	r2, r7, #4
 80046ec:	f107 0314 	add.w	r3, r7, #20
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fffc 	bl	80056f0 <xTaskCheckForTimeOut>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d124      	bne.n	8004748 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004700:	f000 faa4 	bl	8004c4c <prvIsQueueFull>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d018      	beq.n	800473c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800470a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470c:	3310      	adds	r3, #16
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 ff20 	bl	8005558 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800471a:	f000 fa2f 	bl	8004b7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800471e:	f000 fd51 	bl	80051c4 <xTaskResumeAll>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	f47f af7c 	bne.w	8004622 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800472a:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <xQueueGenericSend+0x200>)
 800472c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	e772      	b.n	8004622 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800473c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800473e:	f000 fa1d 	bl	8004b7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004742:	f000 fd3f 	bl	80051c4 <xTaskResumeAll>
 8004746:	e76c      	b.n	8004622 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800474a:	f000 fa17 	bl	8004b7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800474e:	f000 fd39 	bl	80051c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004752:	2300      	movs	r3, #0
		}
	}
}
 8004754:	4618      	mov	r0, r3
 8004756:	3738      	adds	r7, #56	@ 0x38
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	e000ed04 	.word	0xe000ed04

08004760 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08e      	sub	sp, #56	@ 0x38
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	e7fd      	b.n	800478c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <xQueueGenericSendFromISR+0x3e>
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <xQueueGenericSendFromISR+0x42>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <xQueueGenericSendFromISR+0x44>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	623b      	str	r3, [r7, #32]
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d103      	bne.n	80047ce <xQueueGenericSendFromISR+0x6e>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <xQueueGenericSendFromISR+0x72>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericSendFromISR+0x74>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	61fb      	str	r3, [r7, #28]
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047f0:	f001 fe7e 	bl	80064f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047f4:	f3ef 8211 	mrs	r2, BASEPRI
 80047f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	61ba      	str	r2, [r7, #24]
 800480a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800480c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004812:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004818:	429a      	cmp	r2, r3
 800481a:	d302      	bcc.n	8004822 <xQueueGenericSendFromISR+0xc2>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d12c      	bne.n	800487c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004832:	f000 f913 	bl	8004a5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004836:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d112      	bne.n	8004866 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d016      	beq.n	8004876 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	3324      	adds	r3, #36	@ 0x24
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fed5 	bl	80055fc <xTaskRemoveFromEventList>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00e      	beq.n	8004876 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e007      	b.n	8004876 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004866:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800486a:	3301      	adds	r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	b25a      	sxtb	r2, r3
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004876:	2301      	movs	r3, #1
 8004878:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800487a:	e001      	b.n	8004880 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800487c:	2300      	movs	r3, #0
 800487e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004882:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800488a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800488c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800488e:	4618      	mov	r0, r3
 8004890:	3738      	adds	r7, #56	@ 0x38
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08c      	sub	sp, #48	@ 0x30
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <xQueueReceive+0x32>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	623b      	str	r3, [r7, #32]
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	e7fd      	b.n	80048c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <xQueueReceive+0x40>
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <xQueueReceive+0x44>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <xQueueReceive+0x46>
 80048dc:	2300      	movs	r3, #0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <xQueueReceive+0x62>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	61fb      	str	r3, [r7, #28]
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	e7fd      	b.n	80048f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048fa:	f001 f843 	bl	8005984 <xTaskGetSchedulerState>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <xQueueReceive+0x72>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <xQueueReceive+0x76>
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <xQueueReceive+0x78>
 800490e:	2300      	movs	r3, #0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <xQueueReceive+0x94>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	61bb      	str	r3, [r7, #24]
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800492c:	f001 fd1e 	bl	800636c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01f      	beq.n	800497c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004940:	f000 f8f6 	bl	8004b30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	1e5a      	subs	r2, r3, #1
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00f      	beq.n	8004974 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004956:	3310      	adds	r3, #16
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fe4f 	bl	80055fc <xTaskRemoveFromEventList>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004964:	4b3c      	ldr	r3, [pc, #240]	@ (8004a58 <xQueueReceive+0x1c0>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004974:	f001 fd2a 	bl	80063cc <vPortExitCritical>
				return pdPASS;
 8004978:	2301      	movs	r3, #1
 800497a:	e069      	b.n	8004a50 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004982:	f001 fd23 	bl	80063cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004986:	2300      	movs	r3, #0
 8004988:	e062      	b.n	8004a50 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800498a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004990:	f107 0310 	add.w	r3, r7, #16
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fe95 	bl	80056c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800499a:	2301      	movs	r3, #1
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800499e:	f001 fd15 	bl	80063cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049a2:	f000 fc01 	bl	80051a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049a6:	f001 fce1 	bl	800636c <vPortEnterCritical>
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049b0:	b25b      	sxtb	r3, r3
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d103      	bne.n	80049c0 <xQueueReceive+0x128>
 80049b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d103      	bne.n	80049d6 <xQueueReceive+0x13e>
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049d6:	f001 fcf9 	bl	80063cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049da:	1d3a      	adds	r2, r7, #4
 80049dc:	f107 0310 	add.w	r3, r7, #16
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fe84 	bl	80056f0 <xTaskCheckForTimeOut>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d123      	bne.n	8004a36 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049f0:	f000 f916 	bl	8004c20 <prvIsQueueEmpty>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d017      	beq.n	8004a2a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fc:	3324      	adds	r3, #36	@ 0x24
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4611      	mov	r1, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fda8 	bl	8005558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a0a:	f000 f8b7 	bl	8004b7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a0e:	f000 fbd9 	bl	80051c4 <xTaskResumeAll>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d189      	bne.n	800492c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004a18:	4b0f      	ldr	r3, [pc, #60]	@ (8004a58 <xQueueReceive+0x1c0>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	e780      	b.n	800492c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a2c:	f000 f8a6 	bl	8004b7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a30:	f000 fbc8 	bl	80051c4 <xTaskResumeAll>
 8004a34:	e77a      	b.n	800492c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a38:	f000 f8a0 	bl	8004b7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a3c:	f000 fbc2 	bl	80051c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a42:	f000 f8ed 	bl	8004c20 <prvIsQueueEmpty>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f43f af6f 	beq.w	800492c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3730      	adds	r7, #48	@ 0x30
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10d      	bne.n	8004a96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d14d      	bne.n	8004b1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 ff9a 	bl	80059c0 <xTaskPriorityDisinherit>
 8004a8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	e043      	b.n	8004b1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d119      	bne.n	8004ad0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6898      	ldr	r0, [r3, #8]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	f001 ff94 	bl	80069d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	441a      	add	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d32b      	bcc.n	8004b1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	609a      	str	r2, [r3, #8]
 8004ace:	e026      	b.n	8004b1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68d8      	ldr	r0, [r3, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	f001 ff7a 	bl	80069d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	425b      	negs	r3, r3
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d207      	bcs.n	8004b0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	425b      	negs	r3, r3
 8004b06:	441a      	add	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d105      	bne.n	8004b1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004b26:	697b      	ldr	r3, [r7, #20]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d018      	beq.n	8004b74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	441a      	add	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d303      	bcc.n	8004b64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68d9      	ldr	r1, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6838      	ldr	r0, [r7, #0]
 8004b70:	f001 ff30 	bl	80069d4 <memcpy>
	}
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b84:	f001 fbf2 	bl	800636c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b90:	e011      	b.n	8004bb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d012      	beq.n	8004bc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3324      	adds	r3, #36	@ 0x24
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fd2c 	bl	80055fc <xTaskRemoveFromEventList>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004baa:	f000 fe05 	bl	80057b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	dce9      	bgt.n	8004b92 <prvUnlockQueue+0x16>
 8004bbe:	e000      	b.n	8004bc2 <prvUnlockQueue+0x46>
					break;
 8004bc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	22ff      	movs	r2, #255	@ 0xff
 8004bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004bca:	f001 fbff 	bl	80063cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bce:	f001 fbcd 	bl	800636c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bda:	e011      	b.n	8004c00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d012      	beq.n	8004c0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3310      	adds	r3, #16
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fd07 	bl	80055fc <xTaskRemoveFromEventList>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bf4:	f000 fde0 	bl	80057b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bf8:	7bbb      	ldrb	r3, [r7, #14]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	dce9      	bgt.n	8004bdc <prvUnlockQueue+0x60>
 8004c08:	e000      	b.n	8004c0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	22ff      	movs	r2, #255	@ 0xff
 8004c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c14:	f001 fbda 	bl	80063cc <vPortExitCritical>
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c28:	f001 fba0 	bl	800636c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e001      	b.n	8004c3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c3e:	f001 fbc5 	bl	80063cc <vPortExitCritical>

	return xReturn;
 8004c42:	68fb      	ldr	r3, [r7, #12]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c54:	f001 fb8a 	bl	800636c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d102      	bne.n	8004c6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c64:	2301      	movs	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e001      	b.n	8004c6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c6e:	f001 fbad 	bl	80063cc <vPortExitCritical>

	return xReturn;
 8004c72:	68fb      	ldr	r3, [r7, #12]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	e014      	b.n	8004cb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc8 <vQueueAddToRegistry+0x4c>)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10b      	bne.n	8004cb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c98:	490b      	ldr	r1, [pc, #44]	@ (8004cc8 <vQueueAddToRegistry+0x4c>)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ca2:	4a09      	ldr	r2, [pc, #36]	@ (8004cc8 <vQueueAddToRegistry+0x4c>)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cae:	e006      	b.n	8004cbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b07      	cmp	r3, #7
 8004cba:	d9e7      	bls.n	8004c8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	20000cbc 	.word	0x20000cbc

08004ccc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cdc:	f001 fb46 	bl	800636c <vPortEnterCritical>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d103      	bne.n	8004cf6 <vQueueWaitForMessageRestricted+0x2a>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cfc:	b25b      	sxtb	r3, r3
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d103      	bne.n	8004d0c <vQueueWaitForMessageRestricted+0x40>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d0c:	f001 fb5e 	bl	80063cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3324      	adds	r3, #36	@ 0x24
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fc3f 	bl	80055a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f7ff ff28 	bl	8004b7c <prvUnlockQueue>
	}
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08e      	sub	sp, #56	@ 0x38
 8004d38:	af04      	add	r7, sp, #16
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	623b      	str	r3, [r7, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	e7fd      	b.n	8004d5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	61fb      	str	r3, [r7, #28]
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	e7fd      	b.n	8004d7a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d7e:	235c      	movs	r3, #92	@ 0x5c
 8004d80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b5c      	cmp	r3, #92	@ 0x5c
 8004d86:	d00b      	beq.n	8004da0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	61bb      	str	r3, [r7, #24]
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	e7fd      	b.n	8004d9c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01e      	beq.n	8004de4 <xTaskCreateStatic+0xb0>
 8004da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01b      	beq.n	8004de4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004db4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9303      	str	r3, [sp, #12]
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	9302      	str	r3, [sp, #8]
 8004dc6:	f107 0314 	add.w	r3, r7, #20
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f850 	bl	8004e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ddc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dde:	f000 f8d5 	bl	8004f8c <prvAddNewTaskToReadyList>
 8004de2:	e001      	b.n	8004de8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004de8:	697b      	ldr	r3, [r7, #20]
	}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3728      	adds	r7, #40	@ 0x28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b08c      	sub	sp, #48	@ 0x30
 8004df6:	af04      	add	r7, sp, #16
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f001 fbb2 	bl	8006570 <pvPortMalloc>
 8004e0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00e      	beq.n	8004e32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e14:	205c      	movs	r0, #92	@ 0x5c
 8004e16:	f001 fbab 	bl	8006570 <pvPortMalloc>
 8004e1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e28:	e005      	b.n	8004e36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e2a:	6978      	ldr	r0, [r7, #20]
 8004e2c:	f001 fc68 	bl	8006700 <vPortFree>
 8004e30:	e001      	b.n	8004e36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d017      	beq.n	8004e6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e44:	88fa      	ldrh	r2, [r7, #6]
 8004e46:	2300      	movs	r3, #0
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	9302      	str	r3, [sp, #8]
 8004e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f80e 	bl	8004e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e60:	69f8      	ldr	r0, [r7, #28]
 8004e62:	f000 f893 	bl	8004f8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e002      	b.n	8004e72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e72:	69bb      	ldr	r3, [r7, #24]
	}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	461a      	mov	r2, r3
 8004e94:	21a5      	movs	r1, #165	@ 0xa5
 8004e96:	f001 fd69 	bl	800696c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f023 0307 	bic.w	r3, r3, #7
 8004eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	617b      	str	r3, [r7, #20]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	e012      	b.n	8004f02 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	7819      	ldrb	r1, [r3, #0]
 8004ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	3334      	adds	r3, #52	@ 0x34
 8004eec:	460a      	mov	r2, r1
 8004eee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	3301      	adds	r3, #1
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b0f      	cmp	r3, #15
 8004f06:	d9e9      	bls.n	8004edc <prvInitialiseNewTask+0x60>
 8004f08:	e000      	b.n	8004f0c <prvInitialiseNewTask+0x90>
		{
			break;
 8004f0a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	2b37      	cmp	r3, #55	@ 0x37
 8004f18:	d901      	bls.n	8004f1e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f1a:	2337      	movs	r3, #55	@ 0x37
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff f976 	bl	8004226 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	3318      	adds	r3, #24
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff f971 	bl	8004226 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	69b8      	ldr	r0, [r7, #24]
 8004f6e:	f001 f90b 	bl	8006188 <pxPortInitialiseStack>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f84:	bf00      	nop
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f94:	f001 f9ea 	bl	800636c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f98:	4b2d      	ldr	r3, [pc, #180]	@ (8005050 <prvAddNewTaskToReadyList+0xc4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005050 <prvAddNewTaskToReadyList+0xc4>)
 8004fa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004faa:	4a2a      	ldr	r2, [pc, #168]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <prvAddNewTaskToReadyList+0xc4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d110      	bne.n	8004fda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fb8:	f000 fc22 	bl	8005800 <prvInitialiseTaskLists>
 8004fbc:	e00d      	b.n	8004fda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fbe:	4b26      	ldr	r3, [pc, #152]	@ (8005058 <prvAddNewTaskToReadyList+0xcc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fc6:	4b23      	ldr	r3, [pc, #140]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d802      	bhi.n	8004fda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fda:	4b20      	ldr	r3, [pc, #128]	@ (800505c <prvAddNewTaskToReadyList+0xd0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800505c <prvAddNewTaskToReadyList+0xd0>)
 8004fe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800505c <prvAddNewTaskToReadyList+0xd0>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8005060 <prvAddNewTaskToReadyList+0xd4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d903      	bls.n	8005000 <prvAddNewTaskToReadyList+0x74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	4a18      	ldr	r2, [pc, #96]	@ (8005060 <prvAddNewTaskToReadyList+0xd4>)
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4a15      	ldr	r2, [pc, #84]	@ (8005064 <prvAddNewTaskToReadyList+0xd8>)
 800500e:	441a      	add	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7ff f911 	bl	800423e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800501c:	f001 f9d6 	bl	80063cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005020:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <prvAddNewTaskToReadyList+0xcc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00e      	beq.n	8005046 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005028:	4b0a      	ldr	r3, [pc, #40]	@ (8005054 <prvAddNewTaskToReadyList+0xc8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	429a      	cmp	r2, r3
 8005034:	d207      	bcs.n	8005046 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005036:	4b0c      	ldr	r3, [pc, #48]	@ (8005068 <prvAddNewTaskToReadyList+0xdc>)
 8005038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	200011d0 	.word	0x200011d0
 8005054:	20000cfc 	.word	0x20000cfc
 8005058:	200011dc 	.word	0x200011dc
 800505c:	200011ec 	.word	0x200011ec
 8005060:	200011d8 	.word	0x200011d8
 8005064:	20000d00 	.word	0x20000d00
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800507e:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <vTaskDelay+0x64>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00b      	beq.n	800509e <vTaskDelay+0x32>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	60bb      	str	r3, [r7, #8]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800509e:	f000 f883 	bl	80051a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050a2:	2100      	movs	r1, #0
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fcfb 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050aa:	f000 f88b 	bl	80051c4 <xTaskResumeAll>
 80050ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d107      	bne.n	80050c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80050b6:	4b07      	ldr	r3, [pc, #28]	@ (80050d4 <vTaskDelay+0x68>)
 80050b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	200011f8 	.word	0x200011f8
 80050d4:	e000ed04 	.word	0xe000ed04

080050d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	@ 0x28
 80050dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050e6:	463a      	mov	r2, r7
 80050e8:	1d39      	adds	r1, r7, #4
 80050ea:	f107 0308 	add.w	r3, r7, #8
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff f848 	bl	8004184 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	9202      	str	r2, [sp, #8]
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	2300      	movs	r3, #0
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	460a      	mov	r2, r1
 8005106:	4922      	ldr	r1, [pc, #136]	@ (8005190 <vTaskStartScheduler+0xb8>)
 8005108:	4822      	ldr	r0, [pc, #136]	@ (8005194 <vTaskStartScheduler+0xbc>)
 800510a:	f7ff fe13 	bl	8004d34 <xTaskCreateStatic>
 800510e:	4603      	mov	r3, r0
 8005110:	4a21      	ldr	r2, [pc, #132]	@ (8005198 <vTaskStartScheduler+0xc0>)
 8005112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005114:	4b20      	ldr	r3, [pc, #128]	@ (8005198 <vTaskStartScheduler+0xc0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800511c:	2301      	movs	r3, #1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e001      	b.n	8005126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d102      	bne.n	8005132 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800512c:	f000 fd0c 	bl	8005b48 <xTimerCreateTimerTask>
 8005130:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d116      	bne.n	8005166 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	613b      	str	r3, [r7, #16]
}
 800514a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800514c:	4b13      	ldr	r3, [pc, #76]	@ (800519c <vTaskStartScheduler+0xc4>)
 800514e:	f04f 32ff 	mov.w	r2, #4294967295
 8005152:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005154:	4b12      	ldr	r3, [pc, #72]	@ (80051a0 <vTaskStartScheduler+0xc8>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800515a:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <vTaskStartScheduler+0xcc>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005160:	f001 f892 	bl	8006288 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005164:	e00f      	b.n	8005186 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d10b      	bne.n	8005186 <vTaskStartScheduler+0xae>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60fb      	str	r3, [r7, #12]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <vTaskStartScheduler+0xaa>
}
 8005186:	bf00      	nop
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	0800737c 	.word	0x0800737c
 8005194:	080057d1 	.word	0x080057d1
 8005198:	200011f4 	.word	0x200011f4
 800519c:	200011f0 	.word	0x200011f0
 80051a0:	200011dc 	.word	0x200011dc
 80051a4:	200011d4 	.word	0x200011d4

080051a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051ac:	4b04      	ldr	r3, [pc, #16]	@ (80051c0 <vTaskSuspendAll+0x18>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3301      	adds	r3, #1
 80051b2:	4a03      	ldr	r2, [pc, #12]	@ (80051c0 <vTaskSuspendAll+0x18>)
 80051b4:	6013      	str	r3, [r2, #0]
}
 80051b6:	bf00      	nop
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	200011f8 	.word	0x200011f8

080051c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051d2:	4b42      	ldr	r3, [pc, #264]	@ (80052dc <xTaskResumeAll+0x118>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10b      	bne.n	80051f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	603b      	str	r3, [r7, #0]
}
 80051ec:	bf00      	nop
 80051ee:	bf00      	nop
 80051f0:	e7fd      	b.n	80051ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051f2:	f001 f8bb 	bl	800636c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051f6:	4b39      	ldr	r3, [pc, #228]	@ (80052dc <xTaskResumeAll+0x118>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	4a37      	ldr	r2, [pc, #220]	@ (80052dc <xTaskResumeAll+0x118>)
 80051fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005200:	4b36      	ldr	r3, [pc, #216]	@ (80052dc <xTaskResumeAll+0x118>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d162      	bne.n	80052ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005208:	4b35      	ldr	r3, [pc, #212]	@ (80052e0 <xTaskResumeAll+0x11c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d05e      	beq.n	80052ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005210:	e02f      	b.n	8005272 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005212:	4b34      	ldr	r3, [pc, #208]	@ (80052e4 <xTaskResumeAll+0x120>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3318      	adds	r3, #24
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff f868 	bl	80042f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3304      	adds	r3, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff f863 	bl	80042f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005232:	4b2d      	ldr	r3, [pc, #180]	@ (80052e8 <xTaskResumeAll+0x124>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d903      	bls.n	8005242 <xTaskResumeAll+0x7e>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523e:	4a2a      	ldr	r2, [pc, #168]	@ (80052e8 <xTaskResumeAll+0x124>)
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4a27      	ldr	r2, [pc, #156]	@ (80052ec <xTaskResumeAll+0x128>)
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fe fff0 	bl	800423e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005262:	4b23      	ldr	r3, [pc, #140]	@ (80052f0 <xTaskResumeAll+0x12c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800526c:	4b21      	ldr	r3, [pc, #132]	@ (80052f4 <xTaskResumeAll+0x130>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005272:	4b1c      	ldr	r3, [pc, #112]	@ (80052e4 <xTaskResumeAll+0x120>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1cb      	bne.n	8005212 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005280:	f000 fb5c 	bl	800593c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005284:	4b1c      	ldr	r3, [pc, #112]	@ (80052f8 <xTaskResumeAll+0x134>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d010      	beq.n	80052b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005290:	f000 f844 	bl	800531c <xTaskIncrementTick>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800529a:	4b16      	ldr	r3, [pc, #88]	@ (80052f4 <xTaskResumeAll+0x130>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f1      	bne.n	8005290 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80052ac:	4b12      	ldr	r3, [pc, #72]	@ (80052f8 <xTaskResumeAll+0x134>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052b2:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <xTaskResumeAll+0x130>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052be:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <xTaskResumeAll+0x138>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052ce:	f001 f87d 	bl	80063cc <vPortExitCritical>

	return xAlreadyYielded;
 80052d2:	68bb      	ldr	r3, [r7, #8]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	200011f8 	.word	0x200011f8
 80052e0:	200011d0 	.word	0x200011d0
 80052e4:	20001190 	.word	0x20001190
 80052e8:	200011d8 	.word	0x200011d8
 80052ec:	20000d00 	.word	0x20000d00
 80052f0:	20000cfc 	.word	0x20000cfc
 80052f4:	200011e4 	.word	0x200011e4
 80052f8:	200011e0 	.word	0x200011e0
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005306:	4b04      	ldr	r3, [pc, #16]	@ (8005318 <xTaskGetTickCount+0x18>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800530c:	687b      	ldr	r3, [r7, #4]
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr
 8005318:	200011d4 	.word	0x200011d4

0800531c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005326:	4b52      	ldr	r3, [pc, #328]	@ (8005470 <xTaskIncrementTick+0x154>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 808f 	bne.w	800544e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005330:	4b50      	ldr	r3, [pc, #320]	@ (8005474 <xTaskIncrementTick+0x158>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005338:	4a4e      	ldr	r2, [pc, #312]	@ (8005474 <xTaskIncrementTick+0x158>)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d121      	bne.n	8005388 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005344:	4b4c      	ldr	r3, [pc, #304]	@ (8005478 <xTaskIncrementTick+0x15c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <xTaskIncrementTick+0x4a>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	603b      	str	r3, [r7, #0]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <xTaskIncrementTick+0x46>
 8005366:	4b44      	ldr	r3, [pc, #272]	@ (8005478 <xTaskIncrementTick+0x15c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	4b43      	ldr	r3, [pc, #268]	@ (800547c <xTaskIncrementTick+0x160>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a41      	ldr	r2, [pc, #260]	@ (8005478 <xTaskIncrementTick+0x15c>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4a41      	ldr	r2, [pc, #260]	@ (800547c <xTaskIncrementTick+0x160>)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4b41      	ldr	r3, [pc, #260]	@ (8005480 <xTaskIncrementTick+0x164>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3301      	adds	r3, #1
 8005380:	4a3f      	ldr	r2, [pc, #252]	@ (8005480 <xTaskIncrementTick+0x164>)
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	f000 fada 	bl	800593c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005388:	4b3e      	ldr	r3, [pc, #248]	@ (8005484 <xTaskIncrementTick+0x168>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	429a      	cmp	r2, r3
 8005390:	d34e      	bcc.n	8005430 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005392:	4b39      	ldr	r3, [pc, #228]	@ (8005478 <xTaskIncrementTick+0x15c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <xTaskIncrementTick+0x84>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <xTaskIncrementTick+0x86>
 80053a0:	2300      	movs	r3, #0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a6:	4b37      	ldr	r3, [pc, #220]	@ (8005484 <xTaskIncrementTick+0x168>)
 80053a8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ac:	601a      	str	r2, [r3, #0]
					break;
 80053ae:	e03f      	b.n	8005430 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053b0:	4b31      	ldr	r3, [pc, #196]	@ (8005478 <xTaskIncrementTick+0x15c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d203      	bcs.n	80053d0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005484 <xTaskIncrementTick+0x168>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6013      	str	r3, [r2, #0]
						break;
 80053ce:	e02f      	b.n	8005430 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe ff8d 	bl	80042f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	3318      	adds	r3, #24
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe ff84 	bl	80042f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f0:	4b25      	ldr	r3, [pc, #148]	@ (8005488 <xTaskIncrementTick+0x16c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d903      	bls.n	8005400 <xTaskIncrementTick+0xe4>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	4a22      	ldr	r2, [pc, #136]	@ (8005488 <xTaskIncrementTick+0x16c>)
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4a1f      	ldr	r2, [pc, #124]	@ (800548c <xTaskIncrementTick+0x170>)
 800540e:	441a      	add	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f7fe ff11 	bl	800423e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005420:	4b1b      	ldr	r3, [pc, #108]	@ (8005490 <xTaskIncrementTick+0x174>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005426:	429a      	cmp	r2, r3
 8005428:	d3b3      	bcc.n	8005392 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800542a:	2301      	movs	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800542e:	e7b0      	b.n	8005392 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005430:	4b17      	ldr	r3, [pc, #92]	@ (8005490 <xTaskIncrementTick+0x174>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005436:	4915      	ldr	r1, [pc, #84]	@ (800548c <xTaskIncrementTick+0x170>)
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d907      	bls.n	8005458 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e004      	b.n	8005458 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800544e:	4b11      	ldr	r3, [pc, #68]	@ (8005494 <xTaskIncrementTick+0x178>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	4a0f      	ldr	r2, [pc, #60]	@ (8005494 <xTaskIncrementTick+0x178>)
 8005456:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005458:	4b0f      	ldr	r3, [pc, #60]	@ (8005498 <xTaskIncrementTick+0x17c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005464:	697b      	ldr	r3, [r7, #20]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	200011f8 	.word	0x200011f8
 8005474:	200011d4 	.word	0x200011d4
 8005478:	20001188 	.word	0x20001188
 800547c:	2000118c 	.word	0x2000118c
 8005480:	200011e8 	.word	0x200011e8
 8005484:	200011f0 	.word	0x200011f0
 8005488:	200011d8 	.word	0x200011d8
 800548c:	20000d00 	.word	0x20000d00
 8005490:	20000cfc 	.word	0x20000cfc
 8005494:	200011e0 	.word	0x200011e0
 8005498:	200011e4 	.word	0x200011e4

0800549c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054a2:	4b28      	ldr	r3, [pc, #160]	@ (8005544 <vTaskSwitchContext+0xa8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054aa:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <vTaskSwitchContext+0xac>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054b0:	e042      	b.n	8005538 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80054b2:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <vTaskSwitchContext+0xac>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054b8:	4b24      	ldr	r3, [pc, #144]	@ (800554c <vTaskSwitchContext+0xb0>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e011      	b.n	80054e4 <vTaskSwitchContext+0x48>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10b      	bne.n	80054de <vTaskSwitchContext+0x42>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	607b      	str	r3, [r7, #4]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <vTaskSwitchContext+0x3e>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	491a      	ldr	r1, [pc, #104]	@ (8005550 <vTaskSwitchContext+0xb4>)
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0e3      	beq.n	80054c0 <vTaskSwitchContext+0x24>
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4613      	mov	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4a13      	ldr	r2, [pc, #76]	@ (8005550 <vTaskSwitchContext+0xb4>)
 8005504:	4413      	add	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	3308      	adds	r3, #8
 800551a:	429a      	cmp	r2, r3
 800551c:	d104      	bne.n	8005528 <vTaskSwitchContext+0x8c>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	4a09      	ldr	r2, [pc, #36]	@ (8005554 <vTaskSwitchContext+0xb8>)
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	4a06      	ldr	r2, [pc, #24]	@ (800554c <vTaskSwitchContext+0xb0>)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6013      	str	r3, [r2, #0]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	200011f8 	.word	0x200011f8
 8005548:	200011e4 	.word	0x200011e4
 800554c:	200011d8 	.word	0x200011d8
 8005550:	20000d00 	.word	0x20000d00
 8005554:	20000cfc 	.word	0x20000cfc

08005558 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	60fb      	str	r3, [r7, #12]
}
 800557a:	bf00      	nop
 800557c:	bf00      	nop
 800557e:	e7fd      	b.n	800557c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005580:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <vTaskPlaceOnEventList+0x48>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3318      	adds	r3, #24
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7fe fe7b 	bl	8004284 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800558e:	2101      	movs	r1, #1
 8005590:	6838      	ldr	r0, [r7, #0]
 8005592:	f000 fa85 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000cfc 	.word	0x20000cfc

080055a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	617b      	str	r3, [r7, #20]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055ce:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3318      	adds	r3, #24
 80055d4:	4619      	mov	r1, r3
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f7fe fe31 	bl	800423e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295
 80055e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	68b8      	ldr	r0, [r7, #8]
 80055ec:	f000 fa58 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>
	}
 80055f0:	bf00      	nop
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000cfc 	.word	0x20000cfc

080055fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10b      	bne.n	800562a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	60fb      	str	r3, [r7, #12]
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	3318      	adds	r3, #24
 800562e:	4618      	mov	r0, r3
 8005630:	f7fe fe60 	bl	80042f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005634:	4b1d      	ldr	r3, [pc, #116]	@ (80056ac <xTaskRemoveFromEventList+0xb0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d11d      	bne.n	8005678 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	3304      	adds	r3, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fe57 	bl	80042f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564a:	4b19      	ldr	r3, [pc, #100]	@ (80056b0 <xTaskRemoveFromEventList+0xb4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d903      	bls.n	800565a <xTaskRemoveFromEventList+0x5e>
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	4a16      	ldr	r2, [pc, #88]	@ (80056b0 <xTaskRemoveFromEventList+0xb4>)
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4a13      	ldr	r2, [pc, #76]	@ (80056b4 <xTaskRemoveFromEventList+0xb8>)
 8005668:	441a      	add	r2, r3
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f7fe fde4 	bl	800423e <vListInsertEnd>
 8005676:	e005      	b.n	8005684 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3318      	adds	r3, #24
 800567c:	4619      	mov	r1, r3
 800567e:	480e      	ldr	r0, [pc, #56]	@ (80056b8 <xTaskRemoveFromEventList+0xbc>)
 8005680:	f7fe fddd 	bl	800423e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005688:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <xTaskRemoveFromEventList+0xc0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	429a      	cmp	r2, r3
 8005690:	d905      	bls.n	800569e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005692:	2301      	movs	r3, #1
 8005694:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005696:	4b0a      	ldr	r3, [pc, #40]	@ (80056c0 <xTaskRemoveFromEventList+0xc4>)
 8005698:	2201      	movs	r2, #1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e001      	b.n	80056a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80056a2:	697b      	ldr	r3, [r7, #20]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	200011f8 	.word	0x200011f8
 80056b0:	200011d8 	.word	0x200011d8
 80056b4:	20000d00 	.word	0x20000d00
 80056b8:	20001190 	.word	0x20001190
 80056bc:	20000cfc 	.word	0x20000cfc
 80056c0:	200011e4 	.word	0x200011e4

080056c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <vTaskInternalSetTimeOutState+0x24>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056d4:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <vTaskInternalSetTimeOutState+0x28>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	605a      	str	r2, [r3, #4]
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	200011e8 	.word	0x200011e8
 80056ec:	200011d4 	.word	0x200011d4

080056f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	613b      	str	r3, [r7, #16]
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60fb      	str	r3, [r7, #12]
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	e7fd      	b.n	8005732 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005736:	f000 fe19 	bl	800636c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800573a:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <xTaskCheckForTimeOut+0xc0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d102      	bne.n	800575a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	e023      	b.n	80057a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b15      	ldr	r3, [pc, #84]	@ (80057b4 <xTaskCheckForTimeOut+0xc4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d007      	beq.n	8005776 <xTaskCheckForTimeOut+0x86>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	e015      	b.n	80057a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	429a      	cmp	r2, r3
 800577e:	d20b      	bcs.n	8005798 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad2      	subs	r2, r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ff99 	bl	80056c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	e004      	b.n	80057a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800579e:	2301      	movs	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057a2:	f000 fe13 	bl	80063cc <vPortExitCritical>

	return xReturn;
 80057a6:	69fb      	ldr	r3, [r7, #28]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200011d4 	.word	0x200011d4
 80057b4:	200011e8 	.word	0x200011e8

080057b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057bc:	4b03      	ldr	r3, [pc, #12]	@ (80057cc <vTaskMissedYield+0x14>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
}
 80057c2:	bf00      	nop
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	200011e4 	.word	0x200011e4

080057d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057d8:	f000 f852 	bl	8005880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057dc:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <prvIdleTask+0x28>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d9f9      	bls.n	80057d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057e4:	4b05      	ldr	r3, [pc, #20]	@ (80057fc <prvIdleTask+0x2c>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057f4:	e7f0      	b.n	80057d8 <prvIdleTask+0x8>
 80057f6:	bf00      	nop
 80057f8:	20000d00 	.word	0x20000d00
 80057fc:	e000ed04 	.word	0xe000ed04

08005800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	e00c      	b.n	8005826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4a12      	ldr	r2, [pc, #72]	@ (8005860 <prvInitialiseTaskLists+0x60>)
 8005818:	4413      	add	r3, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe fce4 	bl	80041e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3301      	adds	r3, #1
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b37      	cmp	r3, #55	@ 0x37
 800582a:	d9ef      	bls.n	800580c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800582c:	480d      	ldr	r0, [pc, #52]	@ (8005864 <prvInitialiseTaskLists+0x64>)
 800582e:	f7fe fcdb 	bl	80041e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005832:	480d      	ldr	r0, [pc, #52]	@ (8005868 <prvInitialiseTaskLists+0x68>)
 8005834:	f7fe fcd8 	bl	80041e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005838:	480c      	ldr	r0, [pc, #48]	@ (800586c <prvInitialiseTaskLists+0x6c>)
 800583a:	f7fe fcd5 	bl	80041e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800583e:	480c      	ldr	r0, [pc, #48]	@ (8005870 <prvInitialiseTaskLists+0x70>)
 8005840:	f7fe fcd2 	bl	80041e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005844:	480b      	ldr	r0, [pc, #44]	@ (8005874 <prvInitialiseTaskLists+0x74>)
 8005846:	f7fe fccf 	bl	80041e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800584a:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <prvInitialiseTaskLists+0x78>)
 800584c:	4a05      	ldr	r2, [pc, #20]	@ (8005864 <prvInitialiseTaskLists+0x64>)
 800584e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005850:	4b0a      	ldr	r3, [pc, #40]	@ (800587c <prvInitialiseTaskLists+0x7c>)
 8005852:	4a05      	ldr	r2, [pc, #20]	@ (8005868 <prvInitialiseTaskLists+0x68>)
 8005854:	601a      	str	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000d00 	.word	0x20000d00
 8005864:	20001160 	.word	0x20001160
 8005868:	20001174 	.word	0x20001174
 800586c:	20001190 	.word	0x20001190
 8005870:	200011a4 	.word	0x200011a4
 8005874:	200011bc 	.word	0x200011bc
 8005878:	20001188 	.word	0x20001188
 800587c:	2000118c 	.word	0x2000118c

08005880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005886:	e019      	b.n	80058bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005888:	f000 fd70 	bl	800636c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800588c:	4b10      	ldr	r3, [pc, #64]	@ (80058d0 <prvCheckTasksWaitingTermination+0x50>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fd2b 	bl	80042f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <prvCheckTasksWaitingTermination+0x54>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	4a0b      	ldr	r2, [pc, #44]	@ (80058d4 <prvCheckTasksWaitingTermination+0x54>)
 80058a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058a8:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <prvCheckTasksWaitingTermination+0x58>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	4a0a      	ldr	r2, [pc, #40]	@ (80058d8 <prvCheckTasksWaitingTermination+0x58>)
 80058b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058b2:	f000 fd8b 	bl	80063cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f810 	bl	80058dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058bc:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <prvCheckTasksWaitingTermination+0x58>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e1      	bne.n	8005888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200011a4 	.word	0x200011a4
 80058d4:	200011d0 	.word	0x200011d0
 80058d8:	200011b8 	.word	0x200011b8

080058dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d108      	bne.n	8005900 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 ff04 	bl	8006700 <vPortFree>
				vPortFree( pxTCB );
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 ff01 	bl	8006700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058fe:	e019      	b.n	8005934 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005906:	2b01      	cmp	r3, #1
 8005908:	d103      	bne.n	8005912 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fef8 	bl	8006700 <vPortFree>
	}
 8005910:	e010      	b.n	8005934 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005918:	2b02      	cmp	r3, #2
 800591a:	d00b      	beq.n	8005934 <prvDeleteTCB+0x58>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	60fb      	str	r3, [r7, #12]
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <prvDeleteTCB+0x54>
	}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005942:	4b0e      	ldr	r3, [pc, #56]	@ (800597c <prvResetNextTaskUnblockTime+0x40>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <prvResetNextTaskUnblockTime+0x14>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <prvResetNextTaskUnblockTime+0x16>
 8005950:	2300      	movs	r3, #0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d004      	beq.n	8005960 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005956:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <prvResetNextTaskUnblockTime+0x44>)
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800595e:	e008      	b.n	8005972 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005960:	4b06      	ldr	r3, [pc, #24]	@ (800597c <prvResetNextTaskUnblockTime+0x40>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	4a04      	ldr	r2, [pc, #16]	@ (8005980 <prvResetNextTaskUnblockTime+0x44>)
 8005970:	6013      	str	r3, [r2, #0]
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr
 800597c:	20001188 	.word	0x20001188
 8005980:	200011f0 	.word	0x200011f0

08005984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800598a:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <xTaskGetSchedulerState+0x34>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005992:	2301      	movs	r3, #1
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	e008      	b.n	80059aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005998:	4b08      	ldr	r3, [pc, #32]	@ (80059bc <xTaskGetSchedulerState+0x38>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059a0:	2302      	movs	r3, #2
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	e001      	b.n	80059aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059aa:	687b      	ldr	r3, [r7, #4]
	}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	200011dc 	.word	0x200011dc
 80059bc:	200011f8 	.word	0x200011f8

080059c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d058      	beq.n	8005a88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a94 <xTaskPriorityDisinherit+0xd4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d00b      	beq.n	80059f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10b      	bne.n	8005a18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60bb      	str	r3, [r7, #8]
}
 8005a12:	bf00      	nop
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a1c:	1e5a      	subs	r2, r3, #1
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d02c      	beq.n	8005a88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d128      	bne.n	8005a88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fc5a 	bl	80042f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a58:	4b0f      	ldr	r3, [pc, #60]	@ (8005a98 <xTaskPriorityDisinherit+0xd8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d903      	bls.n	8005a68 <xTaskPriorityDisinherit+0xa8>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	4a0c      	ldr	r2, [pc, #48]	@ (8005a98 <xTaskPriorityDisinherit+0xd8>)
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4a09      	ldr	r2, [pc, #36]	@ (8005a9c <xTaskPriorityDisinherit+0xdc>)
 8005a76:	441a      	add	r2, r3
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f7fe fbdd 	bl	800423e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a88:	697b      	ldr	r3, [r7, #20]
	}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000cfc 	.word	0x20000cfc
 8005a98:	200011d8 	.word	0x200011d8
 8005a9c:	20000d00 	.word	0x20000d00

08005aa0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aaa:	4b21      	ldr	r3, [pc, #132]	@ (8005b30 <prvAddCurrentTaskToDelayedList+0x90>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ab0:	4b20      	ldr	r3, [pc, #128]	@ (8005b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe fc1c 	bl	80042f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d10a      	bne.n	8005ada <prvAddCurrentTaskToDelayedList+0x3a>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aca:	4b1a      	ldr	r3, [pc, #104]	@ (8005b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4819      	ldr	r0, [pc, #100]	@ (8005b38 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ad4:	f7fe fbb3 	bl	800423e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ad8:	e026      	b.n	8005b28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4413      	add	r3, r2
 8005ae0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ae2:	4b14      	ldr	r3, [pc, #80]	@ (8005b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d209      	bcs.n	8005b06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005af2:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b0f      	ldr	r3, [pc, #60]	@ (8005b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f7fe fbc0 	bl	8004284 <vListInsert>
}
 8005b04:	e010      	b.n	8005b28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b06:	4b0e      	ldr	r3, [pc, #56]	@ (8005b40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f7fe fbb6 	bl	8004284 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b18:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d202      	bcs.n	8005b28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b22:	4a08      	ldr	r2, [pc, #32]	@ (8005b44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6013      	str	r3, [r2, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	200011d4 	.word	0x200011d4
 8005b34:	20000cfc 	.word	0x20000cfc
 8005b38:	200011bc 	.word	0x200011bc
 8005b3c:	2000118c 	.word	0x2000118c
 8005b40:	20001188 	.word	0x20001188
 8005b44:	200011f0 	.word	0x200011f0

08005b48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	@ 0x28
 8005b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b52:	f000 fad9 	bl	8006108 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b56:	4b1d      	ldr	r3, [pc, #116]	@ (8005bcc <xTimerCreateTimerTask+0x84>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d021      	beq.n	8005ba2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b66:	1d3a      	adds	r2, r7, #4
 8005b68:	f107 0108 	add.w	r1, r7, #8
 8005b6c:	f107 030c 	add.w	r3, r7, #12
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fe fb1f 	bl	80041b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	9202      	str	r2, [sp, #8]
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	2302      	movs	r3, #2
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	460a      	mov	r2, r1
 8005b88:	4911      	ldr	r1, [pc, #68]	@ (8005bd0 <xTimerCreateTimerTask+0x88>)
 8005b8a:	4812      	ldr	r0, [pc, #72]	@ (8005bd4 <xTimerCreateTimerTask+0x8c>)
 8005b8c:	f7ff f8d2 	bl	8004d34 <xTaskCreateStatic>
 8005b90:	4603      	mov	r3, r0
 8005b92:	4a11      	ldr	r2, [pc, #68]	@ (8005bd8 <xTimerCreateTimerTask+0x90>)
 8005b94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b96:	4b10      	ldr	r3, [pc, #64]	@ (8005bd8 <xTimerCreateTimerTask+0x90>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	613b      	str	r3, [r7, #16]
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bc0:	697b      	ldr	r3, [r7, #20]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2000122c 	.word	0x2000122c
 8005bd0:	08007384 	.word	0x08007384
 8005bd4:	08005cfd 	.word	0x08005cfd
 8005bd8:	20001230 	.word	0x20001230

08005bdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	@ 0x28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10b      	bne.n	8005c0c <xTimerGenericCommand+0x30>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	623b      	str	r3, [r7, #32]
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	e7fd      	b.n	8005c08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c0c:	4b19      	ldr	r3, [pc, #100]	@ (8005c74 <xTimerGenericCommand+0x98>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d02a      	beq.n	8005c6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	dc18      	bgt.n	8005c58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c26:	f7ff fead 	bl	8005984 <xTaskGetSchedulerState>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d109      	bne.n	8005c44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c30:	4b10      	ldr	r3, [pc, #64]	@ (8005c74 <xTimerGenericCommand+0x98>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	f107 0110 	add.w	r1, r7, #16
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c3c:	f7fe fc8e 	bl	800455c <xQueueGenericSend>
 8005c40:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c42:	e012      	b.n	8005c6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c44:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <xTimerGenericCommand+0x98>)
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	f107 0110 	add.w	r1, r7, #16
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f7fe fc84 	bl	800455c <xQueueGenericSend>
 8005c54:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c56:	e008      	b.n	8005c6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c58:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <xTimerGenericCommand+0x98>)
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	f107 0110 	add.w	r1, r7, #16
 8005c60:	2300      	movs	r3, #0
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	f7fe fd7c 	bl	8004760 <xQueueGenericSendFromISR>
 8005c68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3728      	adds	r7, #40	@ 0x28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	2000122c 	.word	0x2000122c

08005c78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c82:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf8 <prvProcessExpiredTimer+0x80>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe fb2f 	bl	80042f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d123      	bne.n	8005ce6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	18d1      	adds	r1, r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	6978      	ldr	r0, [r7, #20]
 8005cac:	f000 f8cc 	bl	8005e48 <prvInsertTimerInActiveList>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d017      	beq.n	8005ce6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	6978      	ldr	r0, [r7, #20]
 8005cc2:	f7ff ff8b 	bl	8005bdc <xTimerGenericCommand>
 8005cc6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60fb      	str	r3, [r7, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	6978      	ldr	r0, [r7, #20]
 8005cec:	4798      	blx	r3
}
 8005cee:	bf00      	nop
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20001224 	.word	0x20001224

08005cfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d04:	f107 0308 	add.w	r3, r7, #8
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 f859 	bl	8005dc0 <prvGetNextExpireTime>
 8005d0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4619      	mov	r1, r3
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f805 	bl	8005d24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d1a:	f000 f8d7 	bl	8005ecc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d1e:	bf00      	nop
 8005d20:	e7f0      	b.n	8005d04 <prvTimerTask+0x8>
	...

08005d24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d2e:	f7ff fa3b 	bl	80051a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f866 	bl	8005e08 <prvSampleTimeNow>
 8005d3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d130      	bne.n	8005da6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <prvProcessTimerOrBlockTask+0x3c>
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d806      	bhi.n	8005d60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d52:	f7ff fa37 	bl	80051c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff ff8d 	bl	8005c78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d5e:	e024      	b.n	8005daa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d66:	4b13      	ldr	r3, [pc, #76]	@ (8005db4 <prvProcessTimerOrBlockTask+0x90>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bf0c      	ite	eq
 8005d70:	2301      	moveq	r3, #1
 8005d72:	2300      	movne	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d78:	4b0f      	ldr	r3, [pc, #60]	@ (8005db8 <prvProcessTimerOrBlockTask+0x94>)
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	4619      	mov	r1, r3
 8005d86:	f7fe ffa1 	bl	8004ccc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d8a:	f7ff fa1b 	bl	80051c4 <xTaskResumeAll>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d94:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <prvProcessTimerOrBlockTask+0x98>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
}
 8005da4:	e001      	b.n	8005daa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005da6:	f7ff fa0d 	bl	80051c4 <xTaskResumeAll>
}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20001228 	.word	0x20001228
 8005db8:	2000122c 	.word	0x2000122c
 8005dbc:	e000ed04 	.word	0xe000ed04

08005dc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e04 <prvGetNextExpireTime+0x44>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bf0c      	ite	eq
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2300      	movne	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005de6:	4b07      	ldr	r3, [pc, #28]	@ (8005e04 <prvGetNextExpireTime+0x44>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e001      	b.n	8005df6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005df6:	68fb      	ldr	r3, [r7, #12]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20001224 	.word	0x20001224

08005e08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e10:	f7ff fa76 	bl	8005300 <xTaskGetTickCount>
 8005e14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e16:	4b0b      	ldr	r3, [pc, #44]	@ (8005e44 <prvSampleTimeNow+0x3c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d205      	bcs.n	8005e2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e20:	f000 f910 	bl	8006044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e002      	b.n	8005e32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e32:	4a04      	ldr	r2, [pc, #16]	@ (8005e44 <prvSampleTimeNow+0x3c>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20001234 	.word	0x20001234

08005e48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d812      	bhi.n	8005e94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	1ad2      	subs	r2, r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d302      	bcc.n	8005e82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e01b      	b.n	8005eba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e82:	4b10      	ldr	r3, [pc, #64]	@ (8005ec4 <prvInsertTimerInActiveList+0x7c>)
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f7fe f9f9 	bl	8004284 <vListInsert>
 8005e92:	e012      	b.n	8005eba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d206      	bcs.n	8005eaa <prvInsertTimerInActiveList+0x62>
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e007      	b.n	8005eba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ec8 <prvInsertTimerInActiveList+0x80>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	f7fe f9e5 	bl	8004284 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eba:	697b      	ldr	r3, [r7, #20]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20001228 	.word	0x20001228
 8005ec8:	20001224 	.word	0x20001224

08005ecc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08e      	sub	sp, #56	@ 0x38
 8005ed0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ed2:	e0a5      	b.n	8006020 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da19      	bge.n	8005f0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	3304      	adds	r3, #4
 8005ede:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	61fb      	str	r3, [r7, #28]
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f04:	6850      	ldr	r0, [r2, #4]
 8005f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f08:	6892      	ldr	r2, [r2, #8]
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f2c0 8085 	blt.w	8006020 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f24:	3304      	adds	r3, #4
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe f9e4 	bl	80042f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff ff6a 	bl	8005e08 <prvSampleTimeNow>
 8005f34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b09      	cmp	r3, #9
 8005f3a:	d86c      	bhi.n	8006016 <prvProcessReceivedCommands+0x14a>
 8005f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <prvProcessReceivedCommands+0x78>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f6d 	.word	0x08005f6d
 8005f48:	08005f6d 	.word	0x08005f6d
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	08006017 	.word	0x08006017
 8005f54:	08005fcb 	.word	0x08005fcb
 8005f58:	08006005 	.word	0x08006005
 8005f5c:	08005f6d 	.word	0x08005f6d
 8005f60:	08005f6d 	.word	0x08005f6d
 8005f64:	08006017 	.word	0x08006017
 8005f68:	08005fcb 	.word	0x08005fcb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	18d1      	adds	r1, r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f7a:	f7ff ff65 	bl	8005e48 <prvInsertTimerInActiveList>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d04a      	beq.n	800601a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f8a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d142      	bne.n	800601a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	441a      	add	r2, r3
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fa6:	f7ff fe19 	bl	8005bdc <xTimerGenericCommand>
 8005faa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d133      	bne.n	800601a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	61bb      	str	r3, [r7, #24]
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10b      	bne.n	8005ff0 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	617b      	str	r3, [r7, #20]
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	e7fd      	b.n	8005fec <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	18d1      	adds	r1, r2, r3
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ffe:	f7ff ff23 	bl	8005e48 <prvInsertTimerInActiveList>
					break;
 8006002:	e00d      	b.n	8006020 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d107      	bne.n	800601e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800600e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006010:	f000 fb76 	bl	8006700 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006014:	e003      	b.n	800601e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8006016:	bf00      	nop
 8006018:	e002      	b.n	8006020 <prvProcessReceivedCommands+0x154>
					break;
 800601a:	bf00      	nop
 800601c:	e000      	b.n	8006020 <prvProcessReceivedCommands+0x154>
					break;
 800601e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006020:	4b07      	ldr	r3, [pc, #28]	@ (8006040 <prvProcessReceivedCommands+0x174>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	1d39      	adds	r1, r7, #4
 8006026:	2200      	movs	r2, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f7fe fc35 	bl	8004898 <xQueueReceive>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f af4f 	bne.w	8005ed4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	3730      	adds	r7, #48	@ 0x30
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	2000122c 	.word	0x2000122c

08006044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800604a:	e046      	b.n	80060da <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800604c:	4b2c      	ldr	r3, [pc, #176]	@ (8006100 <prvSwitchTimerLists+0xbc>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006056:	4b2a      	ldr	r3, [pc, #168]	@ (8006100 <prvSwitchTimerLists+0xbc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3304      	adds	r3, #4
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe f945 	bl	80042f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d12f      	bne.n	80060da <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4413      	add	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	429a      	cmp	r2, r3
 800608a:	d90e      	bls.n	80060aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006098:	4b19      	ldr	r3, [pc, #100]	@ (8006100 <prvSwitchTimerLists+0xbc>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3304      	adds	r3, #4
 80060a0:	4619      	mov	r1, r3
 80060a2:	4610      	mov	r0, r2
 80060a4:	f7fe f8ee 	bl	8004284 <vListInsert>
 80060a8:	e017      	b.n	80060da <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060aa:	2300      	movs	r3, #0
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	2300      	movs	r3, #0
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	2100      	movs	r1, #0
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7ff fd91 	bl	8005bdc <xTimerGenericCommand>
 80060ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <prvSwitchTimerLists+0x96>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	603b      	str	r3, [r7, #0]
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	e7fd      	b.n	80060d6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060da:	4b09      	ldr	r3, [pc, #36]	@ (8006100 <prvSwitchTimerLists+0xbc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1b3      	bne.n	800604c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060e4:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <prvSwitchTimerLists+0xbc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060ea:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <prvSwitchTimerLists+0xc0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a04      	ldr	r2, [pc, #16]	@ (8006100 <prvSwitchTimerLists+0xbc>)
 80060f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060f2:	4a04      	ldr	r2, [pc, #16]	@ (8006104 <prvSwitchTimerLists+0xc0>)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	6013      	str	r3, [r2, #0]
}
 80060f8:	bf00      	nop
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20001224 	.word	0x20001224
 8006104:	20001228 	.word	0x20001228

08006108 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800610e:	f000 f92d 	bl	800636c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006112:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <prvCheckForValidListAndQueue+0x60>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d120      	bne.n	800615c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800611a:	4814      	ldr	r0, [pc, #80]	@ (800616c <prvCheckForValidListAndQueue+0x64>)
 800611c:	f7fe f864 	bl	80041e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006120:	4813      	ldr	r0, [pc, #76]	@ (8006170 <prvCheckForValidListAndQueue+0x68>)
 8006122:	f7fe f861 	bl	80041e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006126:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <prvCheckForValidListAndQueue+0x6c>)
 8006128:	4a10      	ldr	r2, [pc, #64]	@ (800616c <prvCheckForValidListAndQueue+0x64>)
 800612a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800612c:	4b12      	ldr	r3, [pc, #72]	@ (8006178 <prvCheckForValidListAndQueue+0x70>)
 800612e:	4a10      	ldr	r2, [pc, #64]	@ (8006170 <prvCheckForValidListAndQueue+0x68>)
 8006130:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006132:	2300      	movs	r3, #0
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	4b11      	ldr	r3, [pc, #68]	@ (800617c <prvCheckForValidListAndQueue+0x74>)
 8006138:	4a11      	ldr	r2, [pc, #68]	@ (8006180 <prvCheckForValidListAndQueue+0x78>)
 800613a:	2110      	movs	r1, #16
 800613c:	200a      	movs	r0, #10
 800613e:	f7fe f96d 	bl	800441c <xQueueGenericCreateStatic>
 8006142:	4603      	mov	r3, r0
 8006144:	4a08      	ldr	r2, [pc, #32]	@ (8006168 <prvCheckForValidListAndQueue+0x60>)
 8006146:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006148:	4b07      	ldr	r3, [pc, #28]	@ (8006168 <prvCheckForValidListAndQueue+0x60>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006150:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <prvCheckForValidListAndQueue+0x60>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	490b      	ldr	r1, [pc, #44]	@ (8006184 <prvCheckForValidListAndQueue+0x7c>)
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fd90 	bl	8004c7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800615c:	f000 f936 	bl	80063cc <vPortExitCritical>
}
 8006160:	bf00      	nop
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	2000122c 	.word	0x2000122c
 800616c:	200011fc 	.word	0x200011fc
 8006170:	20001210 	.word	0x20001210
 8006174:	20001224 	.word	0x20001224
 8006178:	20001228 	.word	0x20001228
 800617c:	200012d8 	.word	0x200012d8
 8006180:	20001238 	.word	0x20001238
 8006184:	0800738c 	.word	0x0800738c

08006188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3b04      	subs	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3b04      	subs	r3, #4
 80061a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3b04      	subs	r3, #4
 80061b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061b8:	4a08      	ldr	r2, [pc, #32]	@ (80061dc <pxPortInitialiseStack+0x54>)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3b14      	subs	r3, #20
 80061c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3b20      	subs	r3, #32
 80061ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061d0:	68fb      	ldr	r3, [r7, #12]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr
 80061dc:	080061e1 	.word	0x080061e1

080061e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061ea:	4b12      	ldr	r3, [pc, #72]	@ (8006234 <prvTaskExitError+0x54>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d00b      	beq.n	800620c <prvTaskExitError+0x2c>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60fb      	str	r3, [r7, #12]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <prvTaskExitError+0x28>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60bb      	str	r3, [r7, #8]
}
 800621e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006220:	bf00      	nop
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0fc      	beq.n	8006222 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr
 8006234:	20000014 	.word	0x20000014
	...

08006240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006240:	4b07      	ldr	r3, [pc, #28]	@ (8006260 <pxCurrentTCBConst2>)
 8006242:	6819      	ldr	r1, [r3, #0]
 8006244:	6808      	ldr	r0, [r1, #0]
 8006246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800624a:	f380 8809 	msr	PSP, r0
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f04f 0000 	mov.w	r0, #0
 8006256:	f380 8811 	msr	BASEPRI, r0
 800625a:	f04e 0e0d 	orr.w	lr, lr, #13
 800625e:	4770      	bx	lr

08006260 <pxCurrentTCBConst2>:
 8006260:	20000cfc 	.word	0x20000cfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop

08006268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006268:	4806      	ldr	r0, [pc, #24]	@ (8006284 <prvPortStartFirstTask+0x1c>)
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	6800      	ldr	r0, [r0, #0]
 800626e:	f380 8808 	msr	MSP, r0
 8006272:	b662      	cpsie	i
 8006274:	b661      	cpsie	f
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	df00      	svc	0
 8006280:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006282:	bf00      	nop
 8006284:	e000ed08 	.word	0xe000ed08

08006288 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800628e:	4b32      	ldr	r3, [pc, #200]	@ (8006358 <xPortStartScheduler+0xd0>)
 8006290:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	22ff      	movs	r2, #255	@ 0xff
 800629e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	4b2a      	ldr	r3, [pc, #168]	@ (800635c <xPortStartScheduler+0xd4>)
 80062b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006360 <xPortStartScheduler+0xd8>)
 80062b8:	2207      	movs	r2, #7
 80062ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062bc:	e009      	b.n	80062d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80062be:	4b28      	ldr	r3, [pc, #160]	@ (8006360 <xPortStartScheduler+0xd8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	4a26      	ldr	r2, [pc, #152]	@ (8006360 <xPortStartScheduler+0xd8>)
 80062c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	2b80      	cmp	r3, #128	@ 0x80
 80062dc:	d0ef      	beq.n	80062be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062de:	4b20      	ldr	r3, [pc, #128]	@ (8006360 <xPortStartScheduler+0xd8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1c3 0307 	rsb	r3, r3, #7
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d00b      	beq.n	8006302 <xPortStartScheduler+0x7a>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60bb      	str	r3, [r7, #8]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006302:	4b17      	ldr	r3, [pc, #92]	@ (8006360 <xPortStartScheduler+0xd8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	4a15      	ldr	r2, [pc, #84]	@ (8006360 <xPortStartScheduler+0xd8>)
 800630a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800630c:	4b14      	ldr	r3, [pc, #80]	@ (8006360 <xPortStartScheduler+0xd8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006314:	4a12      	ldr	r2, [pc, #72]	@ (8006360 <xPortStartScheduler+0xd8>)
 8006316:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006320:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <xPortStartScheduler+0xdc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a0f      	ldr	r2, [pc, #60]	@ (8006364 <xPortStartScheduler+0xdc>)
 8006326:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800632a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800632c:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <xPortStartScheduler+0xdc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0c      	ldr	r2, [pc, #48]	@ (8006364 <xPortStartScheduler+0xdc>)
 8006332:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006336:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006338:	f000 f8b8 	bl	80064ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800633c:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <xPortStartScheduler+0xe0>)
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006342:	f7ff ff91 	bl	8006268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006346:	f7ff f8a9 	bl	800549c <vTaskSwitchContext>
	prvTaskExitError();
 800634a:	f7ff ff49 	bl	80061e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000e400 	.word	0xe000e400
 800635c:	20001328 	.word	0x20001328
 8006360:	2000132c 	.word	0x2000132c
 8006364:	e000ed20 	.word	0xe000ed20
 8006368:	20000014 	.word	0x20000014

0800636c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	607b      	str	r3, [r7, #4]
}
 8006384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006386:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <vPortEnterCritical+0x58>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3301      	adds	r3, #1
 800638c:	4a0d      	ldr	r2, [pc, #52]	@ (80063c4 <vPortEnterCritical+0x58>)
 800638e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006390:	4b0c      	ldr	r3, [pc, #48]	@ (80063c4 <vPortEnterCritical+0x58>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d110      	bne.n	80063ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006398:	4b0b      	ldr	r3, [pc, #44]	@ (80063c8 <vPortEnterCritical+0x5c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <vPortEnterCritical+0x4e>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	603b      	str	r3, [r7, #0]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <vPortEnterCritical+0x4a>
	}
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	20000014 	.word	0x20000014
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063d2:	4b12      	ldr	r3, [pc, #72]	@ (800641c <vPortExitCritical+0x50>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <vPortExitCritical+0x26>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	607b      	str	r3, [r7, #4]
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063f2:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <vPortExitCritical+0x50>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	4a08      	ldr	r2, [pc, #32]	@ (800641c <vPortExitCritical+0x50>)
 80063fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063fc:	4b07      	ldr	r3, [pc, #28]	@ (800641c <vPortExitCritical+0x50>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <vPortExitCritical+0x44>
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f383 8811 	msr	BASEPRI, r3
}
 800640e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000014 	.word	0x20000014

08006420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006420:	f3ef 8009 	mrs	r0, PSP
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	4b0d      	ldr	r3, [pc, #52]	@ (8006460 <pxCurrentTCBConst>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006430:	6010      	str	r0, [r2, #0]
 8006432:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006436:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800643a:	f380 8811 	msr	BASEPRI, r0
 800643e:	f7ff f82d 	bl	800549c <vTaskSwitchContext>
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f380 8811 	msr	BASEPRI, r0
 800644a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	6808      	ldr	r0, [r1, #0]
 8006452:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006456:	f380 8809 	msr	PSP, r0
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	4770      	bx	lr

08006460 <pxCurrentTCBConst>:
 8006460:	20000cfc 	.word	0x20000cfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop

08006468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	607b      	str	r3, [r7, #4]
}
 8006480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006482:	f7fe ff4b 	bl	800531c <xTaskIncrementTick>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800648c:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <SysTick_Handler+0x40>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	f383 8811 	msr	BASEPRI, r3
}
 800649e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064b0:	4b0a      	ldr	r3, [pc, #40]	@ (80064dc <vPortSetupTimerInterrupt+0x30>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064b6:	4b0a      	ldr	r3, [pc, #40]	@ (80064e0 <vPortSetupTimerInterrupt+0x34>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064bc:	4b09      	ldr	r3, [pc, #36]	@ (80064e4 <vPortSetupTimerInterrupt+0x38>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a09      	ldr	r2, [pc, #36]	@ (80064e8 <vPortSetupTimerInterrupt+0x3c>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	099b      	lsrs	r3, r3, #6
 80064c8:	4a08      	ldr	r2, [pc, #32]	@ (80064ec <vPortSetupTimerInterrupt+0x40>)
 80064ca:	3b01      	subs	r3, #1
 80064cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ce:	4b03      	ldr	r3, [pc, #12]	@ (80064dc <vPortSetupTimerInterrupt+0x30>)
 80064d0:	2207      	movs	r2, #7
 80064d2:	601a      	str	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr
 80064dc:	e000e010 	.word	0xe000e010
 80064e0:	e000e018 	.word	0xe000e018
 80064e4:	20000008 	.word	0x20000008
 80064e8:	10624dd3 	.word	0x10624dd3
 80064ec:	e000e014 	.word	0xe000e014

080064f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064f6:	f3ef 8305 	mrs	r3, IPSR
 80064fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	d915      	bls.n	800652e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006502:	4a17      	ldr	r2, [pc, #92]	@ (8006560 <vPortValidateInterruptPriority+0x70>)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800650c:	4b15      	ldr	r3, [pc, #84]	@ (8006564 <vPortValidateInterruptPriority+0x74>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	7afa      	ldrb	r2, [r7, #11]
 8006512:	429a      	cmp	r2, r3
 8006514:	d20b      	bcs.n	800652e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	607b      	str	r3, [r7, #4]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800652e:	4b0e      	ldr	r3, [pc, #56]	@ (8006568 <vPortValidateInterruptPriority+0x78>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006536:	4b0d      	ldr	r3, [pc, #52]	@ (800656c <vPortValidateInterruptPriority+0x7c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d90b      	bls.n	8006556 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	603b      	str	r3, [r7, #0]
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <vPortValidateInterruptPriority+0x62>
	}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr
 8006560:	e000e3f0 	.word	0xe000e3f0
 8006564:	20001328 	.word	0x20001328
 8006568:	e000ed0c 	.word	0xe000ed0c
 800656c:	2000132c 	.word	0x2000132c

08006570 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	@ 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006578:	2300      	movs	r3, #0
 800657a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800657c:	f7fe fe14 	bl	80051a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006580:	4b5a      	ldr	r3, [pc, #360]	@ (80066ec <pvPortMalloc+0x17c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006588:	f000 f916 	bl	80067b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800658c:	4b58      	ldr	r3, [pc, #352]	@ (80066f0 <pvPortMalloc+0x180>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4013      	ands	r3, r2
 8006594:	2b00      	cmp	r3, #0
 8006596:	f040 8090 	bne.w	80066ba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01e      	beq.n	80065de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80065a0:	2208      	movs	r2, #8
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d015      	beq.n	80065de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f023 0307 	bic.w	r3, r3, #7
 80065b8:	3308      	adds	r3, #8
 80065ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <pvPortMalloc+0x6e>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	617b      	str	r3, [r7, #20]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d06a      	beq.n	80066ba <pvPortMalloc+0x14a>
 80065e4:	4b43      	ldr	r3, [pc, #268]	@ (80066f4 <pvPortMalloc+0x184>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d865      	bhi.n	80066ba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065ee:	4b42      	ldr	r3, [pc, #264]	@ (80066f8 <pvPortMalloc+0x188>)
 80065f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065f2:	4b41      	ldr	r3, [pc, #260]	@ (80066f8 <pvPortMalloc+0x188>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065f8:	e004      	b.n	8006604 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	429a      	cmp	r2, r3
 800660c:	d903      	bls.n	8006616 <pvPortMalloc+0xa6>
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f1      	bne.n	80065fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006616:	4b35      	ldr	r3, [pc, #212]	@ (80066ec <pvPortMalloc+0x17c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800661c:	429a      	cmp	r2, r3
 800661e:	d04c      	beq.n	80066ba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2208      	movs	r2, #8
 8006626:	4413      	add	r3, r2
 8006628:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	1ad2      	subs	r2, r2, r3
 800663a:	2308      	movs	r3, #8
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	429a      	cmp	r2, r3
 8006640:	d920      	bls.n	8006684 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4413      	add	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <pvPortMalloc+0xfc>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	613b      	str	r3, [r7, #16]
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	e7fd      	b.n	8006668 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	1ad2      	subs	r2, r2, r3
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800667e:	69b8      	ldr	r0, [r7, #24]
 8006680:	f000 f8fc 	bl	800687c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006684:	4b1b      	ldr	r3, [pc, #108]	@ (80066f4 <pvPortMalloc+0x184>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	4a19      	ldr	r2, [pc, #100]	@ (80066f4 <pvPortMalloc+0x184>)
 8006690:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006692:	4b18      	ldr	r3, [pc, #96]	@ (80066f4 <pvPortMalloc+0x184>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b19      	ldr	r3, [pc, #100]	@ (80066fc <pvPortMalloc+0x18c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d203      	bcs.n	80066a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800669e:	4b15      	ldr	r3, [pc, #84]	@ (80066f4 <pvPortMalloc+0x184>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a16      	ldr	r2, [pc, #88]	@ (80066fc <pvPortMalloc+0x18c>)
 80066a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <pvPortMalloc+0x180>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066ba:	f7fe fd83 	bl	80051c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <pvPortMalloc+0x170>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	60fb      	str	r3, [r7, #12]
}
 80066da:	bf00      	nop
 80066dc:	bf00      	nop
 80066de:	e7fd      	b.n	80066dc <pvPortMalloc+0x16c>
	return pvReturn;
 80066e0:	69fb      	ldr	r3, [r7, #28]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3728      	adds	r7, #40	@ 0x28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20002148 	.word	0x20002148
 80066f0:	20002154 	.word	0x20002154
 80066f4:	2000214c 	.word	0x2000214c
 80066f8:	20002140 	.word	0x20002140
 80066fc:	20002150 	.word	0x20002150

08006700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d04a      	beq.n	80067a8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006712:	2308      	movs	r3, #8
 8006714:	425b      	negs	r3, r3
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	4b22      	ldr	r3, [pc, #136]	@ (80067b0 <vPortFree+0xb0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4013      	ands	r3, r2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10b      	bne.n	8006746 <vPortFree+0x46>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	60fb      	str	r3, [r7, #12]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00b      	beq.n	8006766 <vPortFree+0x66>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	60bb      	str	r3, [r7, #8]
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	e7fd      	b.n	8006762 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	4b11      	ldr	r3, [pc, #68]	@ (80067b0 <vPortFree+0xb0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d019      	beq.n	80067a8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d115      	bne.n	80067a8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	4b0b      	ldr	r3, [pc, #44]	@ (80067b0 <vPortFree+0xb0>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	43db      	mvns	r3, r3
 8006786:	401a      	ands	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800678c:	f7fe fd0c 	bl	80051a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <vPortFree+0xb4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4413      	add	r3, r2
 800679a:	4a06      	ldr	r2, [pc, #24]	@ (80067b4 <vPortFree+0xb4>)
 800679c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800679e:	6938      	ldr	r0, [r7, #16]
 80067a0:	f000 f86c 	bl	800687c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80067a4:	f7fe fd0e 	bl	80051c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20002154 	.word	0x20002154
 80067b4:	2000214c 	.word	0x2000214c

080067b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067be:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80067c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067c4:	4b27      	ldr	r3, [pc, #156]	@ (8006864 <prvHeapInit+0xac>)
 80067c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00c      	beq.n	80067ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3307      	adds	r3, #7
 80067d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006864 <prvHeapInit+0xac>)
 80067e8:	4413      	add	r3, r2
 80067ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006868 <prvHeapInit+0xb0>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006868 <prvHeapInit+0xb0>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	4413      	add	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006804:	2208      	movs	r2, #8
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0307 	bic.w	r3, r3, #7
 8006812:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4a15      	ldr	r2, [pc, #84]	@ (800686c <prvHeapInit+0xb4>)
 8006818:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800681a:	4b14      	ldr	r3, [pc, #80]	@ (800686c <prvHeapInit+0xb4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006822:	4b12      	ldr	r3, [pc, #72]	@ (800686c <prvHeapInit+0xb4>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	1ad2      	subs	r2, r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006838:	4b0c      	ldr	r3, [pc, #48]	@ (800686c <prvHeapInit+0xb4>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	4a0a      	ldr	r2, [pc, #40]	@ (8006870 <prvHeapInit+0xb8>)
 8006846:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4a09      	ldr	r2, [pc, #36]	@ (8006874 <prvHeapInit+0xbc>)
 800684e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006850:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <prvHeapInit+0xc0>)
 8006852:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006856:	601a      	str	r2, [r3, #0]
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20001330 	.word	0x20001330
 8006868:	20002140 	.word	0x20002140
 800686c:	20002148 	.word	0x20002148
 8006870:	20002150 	.word	0x20002150
 8006874:	2000214c 	.word	0x2000214c
 8006878:	20002154 	.word	0x20002154

0800687c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006884:	4b27      	ldr	r3, [pc, #156]	@ (8006924 <prvInsertBlockIntoFreeList+0xa8>)
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e002      	b.n	8006890 <prvInsertBlockIntoFreeList+0x14>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d8f7      	bhi.n	800688a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	4413      	add	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d108      	bne.n	80068be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	441a      	add	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	441a      	add	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d118      	bne.n	8006904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4b14      	ldr	r3, [pc, #80]	@ (8006928 <prvInsertBlockIntoFreeList+0xac>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d00d      	beq.n	80068fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	441a      	add	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	e008      	b.n	800690c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <prvInsertBlockIntoFreeList+0xac>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e003      	b.n	800690c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d002      	beq.n	800691a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr
 8006924:	20002140 	.word	0x20002140
 8006928:	20002148 	.word	0x20002148

0800692c <siprintf>:
 800692c:	b40e      	push	{r1, r2, r3}
 800692e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006932:	b500      	push	{lr}
 8006934:	b09c      	sub	sp, #112	@ 0x70
 8006936:	ab1d      	add	r3, sp, #116	@ 0x74
 8006938:	9002      	str	r0, [sp, #8]
 800693a:	9006      	str	r0, [sp, #24]
 800693c:	9107      	str	r1, [sp, #28]
 800693e:	9104      	str	r1, [sp, #16]
 8006940:	4808      	ldr	r0, [pc, #32]	@ (8006964 <siprintf+0x38>)
 8006942:	4909      	ldr	r1, [pc, #36]	@ (8006968 <siprintf+0x3c>)
 8006944:	f853 2b04 	ldr.w	r2, [r3], #4
 8006948:	9105      	str	r1, [sp, #20]
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	a902      	add	r1, sp, #8
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	f000 f9a0 	bl	8006c94 <_svfiprintf_r>
 8006954:	2200      	movs	r2, #0
 8006956:	9b02      	ldr	r3, [sp, #8]
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	b01c      	add	sp, #112	@ 0x70
 800695c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006960:	b003      	add	sp, #12
 8006962:	4770      	bx	lr
 8006964:	20000018 	.word	0x20000018
 8006968:	ffff0208 	.word	0xffff0208

0800696c <memset>:
 800696c:	4603      	mov	r3, r0
 800696e:	4402      	add	r2, r0
 8006970:	4293      	cmp	r3, r2
 8006972:	d100      	bne.n	8006976 <memset+0xa>
 8006974:	4770      	bx	lr
 8006976:	f803 1b01 	strb.w	r1, [r3], #1
 800697a:	e7f9      	b.n	8006970 <memset+0x4>

0800697c <__errno>:
 800697c:	4b01      	ldr	r3, [pc, #4]	@ (8006984 <__errno+0x8>)
 800697e:	6818      	ldr	r0, [r3, #0]
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20000018 	.word	0x20000018

08006988 <__libc_init_array>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	2600      	movs	r6, #0
 800698c:	4d0c      	ldr	r5, [pc, #48]	@ (80069c0 <__libc_init_array+0x38>)
 800698e:	4c0d      	ldr	r4, [pc, #52]	@ (80069c4 <__libc_init_array+0x3c>)
 8006990:	1b64      	subs	r4, r4, r5
 8006992:	10a4      	asrs	r4, r4, #2
 8006994:	42a6      	cmp	r6, r4
 8006996:	d109      	bne.n	80069ac <__libc_init_array+0x24>
 8006998:	f000 fc78 	bl	800728c <_init>
 800699c:	2600      	movs	r6, #0
 800699e:	4d0a      	ldr	r5, [pc, #40]	@ (80069c8 <__libc_init_array+0x40>)
 80069a0:	4c0a      	ldr	r4, [pc, #40]	@ (80069cc <__libc_init_array+0x44>)
 80069a2:	1b64      	subs	r4, r4, r5
 80069a4:	10a4      	asrs	r4, r4, #2
 80069a6:	42a6      	cmp	r6, r4
 80069a8:	d105      	bne.n	80069b6 <__libc_init_array+0x2e>
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b0:	4798      	blx	r3
 80069b2:	3601      	adds	r6, #1
 80069b4:	e7ee      	b.n	8006994 <__libc_init_array+0xc>
 80069b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ba:	4798      	blx	r3
 80069bc:	3601      	adds	r6, #1
 80069be:	e7f2      	b.n	80069a6 <__libc_init_array+0x1e>
 80069c0:	08008218 	.word	0x08008218
 80069c4:	08008218 	.word	0x08008218
 80069c8:	08008218 	.word	0x08008218
 80069cc:	0800821c 	.word	0x0800821c

080069d0 <__retarget_lock_acquire_recursive>:
 80069d0:	4770      	bx	lr

080069d2 <__retarget_lock_release_recursive>:
 80069d2:	4770      	bx	lr

080069d4 <memcpy>:
 80069d4:	440a      	add	r2, r1
 80069d6:	4291      	cmp	r1, r2
 80069d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069dc:	d100      	bne.n	80069e0 <memcpy+0xc>
 80069de:	4770      	bx	lr
 80069e0:	b510      	push	{r4, lr}
 80069e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069e6:	4291      	cmp	r1, r2
 80069e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ec:	d1f9      	bne.n	80069e2 <memcpy+0xe>
 80069ee:	bd10      	pop	{r4, pc}

080069f0 <_free_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4605      	mov	r5, r0
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d040      	beq.n	8006a7a <_free_r+0x8a>
 80069f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fc:	1f0c      	subs	r4, r1, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bfb8      	it	lt
 8006a02:	18e4      	addlt	r4, r4, r3
 8006a04:	f000 f8de 	bl	8006bc4 <__malloc_lock>
 8006a08:	4a1c      	ldr	r2, [pc, #112]	@ (8006a7c <_free_r+0x8c>)
 8006a0a:	6813      	ldr	r3, [r2, #0]
 8006a0c:	b933      	cbnz	r3, 8006a1c <_free_r+0x2c>
 8006a0e:	6063      	str	r3, [r4, #4]
 8006a10:	6014      	str	r4, [r2, #0]
 8006a12:	4628      	mov	r0, r5
 8006a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a18:	f000 b8da 	b.w	8006bd0 <__malloc_unlock>
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	d908      	bls.n	8006a32 <_free_r+0x42>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	1821      	adds	r1, r4, r0
 8006a24:	428b      	cmp	r3, r1
 8006a26:	bf01      	itttt	eq
 8006a28:	6819      	ldreq	r1, [r3, #0]
 8006a2a:	685b      	ldreq	r3, [r3, #4]
 8006a2c:	1809      	addeq	r1, r1, r0
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	e7ed      	b.n	8006a0e <_free_r+0x1e>
 8006a32:	461a      	mov	r2, r3
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	b10b      	cbz	r3, 8006a3c <_free_r+0x4c>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d9fa      	bls.n	8006a32 <_free_r+0x42>
 8006a3c:	6811      	ldr	r1, [r2, #0]
 8006a3e:	1850      	adds	r0, r2, r1
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d10b      	bne.n	8006a5c <_free_r+0x6c>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	4401      	add	r1, r0
 8006a48:	1850      	adds	r0, r2, r1
 8006a4a:	4283      	cmp	r3, r0
 8006a4c:	6011      	str	r1, [r2, #0]
 8006a4e:	d1e0      	bne.n	8006a12 <_free_r+0x22>
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	4408      	add	r0, r1
 8006a56:	6010      	str	r0, [r2, #0]
 8006a58:	6053      	str	r3, [r2, #4]
 8006a5a:	e7da      	b.n	8006a12 <_free_r+0x22>
 8006a5c:	d902      	bls.n	8006a64 <_free_r+0x74>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	e7d6      	b.n	8006a12 <_free_r+0x22>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	1821      	adds	r1, r4, r0
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf01      	itttt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	1809      	addeq	r1, r1, r0
 8006a72:	6021      	streq	r1, [r4, #0]
 8006a74:	6063      	str	r3, [r4, #4]
 8006a76:	6054      	str	r4, [r2, #4]
 8006a78:	e7cb      	b.n	8006a12 <_free_r+0x22>
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	2000229c 	.word	0x2000229c

08006a80 <sbrk_aligned>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	4e0f      	ldr	r6, [pc, #60]	@ (8006ac0 <sbrk_aligned+0x40>)
 8006a84:	460c      	mov	r4, r1
 8006a86:	6831      	ldr	r1, [r6, #0]
 8006a88:	4605      	mov	r5, r0
 8006a8a:	b911      	cbnz	r1, 8006a92 <sbrk_aligned+0x12>
 8006a8c:	f000 fbaa 	bl	80071e4 <_sbrk_r>
 8006a90:	6030      	str	r0, [r6, #0]
 8006a92:	4621      	mov	r1, r4
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fba5 	bl	80071e4 <_sbrk_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d103      	bne.n	8006aa6 <sbrk_aligned+0x26>
 8006a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	1cc4      	adds	r4, r0, #3
 8006aa8:	f024 0403 	bic.w	r4, r4, #3
 8006aac:	42a0      	cmp	r0, r4
 8006aae:	d0f8      	beq.n	8006aa2 <sbrk_aligned+0x22>
 8006ab0:	1a21      	subs	r1, r4, r0
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 fb96 	bl	80071e4 <_sbrk_r>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d1f2      	bne.n	8006aa2 <sbrk_aligned+0x22>
 8006abc:	e7ef      	b.n	8006a9e <sbrk_aligned+0x1e>
 8006abe:	bf00      	nop
 8006ac0:	20002298 	.word	0x20002298

08006ac4 <_malloc_r>:
 8006ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac8:	1ccd      	adds	r5, r1, #3
 8006aca:	f025 0503 	bic.w	r5, r5, #3
 8006ace:	3508      	adds	r5, #8
 8006ad0:	2d0c      	cmp	r5, #12
 8006ad2:	bf38      	it	cc
 8006ad4:	250c      	movcc	r5, #12
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	4606      	mov	r6, r0
 8006ada:	db01      	blt.n	8006ae0 <_malloc_r+0x1c>
 8006adc:	42a9      	cmp	r1, r5
 8006ade:	d904      	bls.n	8006aea <_malloc_r+0x26>
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bc0 <_malloc_r+0xfc>
 8006aee:	f000 f869 	bl	8006bc4 <__malloc_lock>
 8006af2:	f8d8 3000 	ldr.w	r3, [r8]
 8006af6:	461c      	mov	r4, r3
 8006af8:	bb44      	cbnz	r4, 8006b4c <_malloc_r+0x88>
 8006afa:	4629      	mov	r1, r5
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7ff ffbf 	bl	8006a80 <sbrk_aligned>
 8006b02:	1c43      	adds	r3, r0, #1
 8006b04:	4604      	mov	r4, r0
 8006b06:	d158      	bne.n	8006bba <_malloc_r+0xf6>
 8006b08:	f8d8 4000 	ldr.w	r4, [r8]
 8006b0c:	4627      	mov	r7, r4
 8006b0e:	2f00      	cmp	r7, #0
 8006b10:	d143      	bne.n	8006b9a <_malloc_r+0xd6>
 8006b12:	2c00      	cmp	r4, #0
 8006b14:	d04b      	beq.n	8006bae <_malloc_r+0xea>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	4639      	mov	r1, r7
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	eb04 0903 	add.w	r9, r4, r3
 8006b20:	f000 fb60 	bl	80071e4 <_sbrk_r>
 8006b24:	4581      	cmp	r9, r0
 8006b26:	d142      	bne.n	8006bae <_malloc_r+0xea>
 8006b28:	6821      	ldr	r1, [r4, #0]
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	1a6d      	subs	r5, r5, r1
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f7ff ffa6 	bl	8006a80 <sbrk_aligned>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d03a      	beq.n	8006bae <_malloc_r+0xea>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	442b      	add	r3, r5
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	bb62      	cbnz	r2, 8006ba0 <_malloc_r+0xdc>
 8006b46:	f8c8 7000 	str.w	r7, [r8]
 8006b4a:	e00f      	b.n	8006b6c <_malloc_r+0xa8>
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	1b52      	subs	r2, r2, r5
 8006b50:	d420      	bmi.n	8006b94 <_malloc_r+0xd0>
 8006b52:	2a0b      	cmp	r2, #11
 8006b54:	d917      	bls.n	8006b86 <_malloc_r+0xc2>
 8006b56:	1961      	adds	r1, r4, r5
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	6025      	str	r5, [r4, #0]
 8006b5c:	bf18      	it	ne
 8006b5e:	6059      	strne	r1, [r3, #4]
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	bf08      	it	eq
 8006b64:	f8c8 1000 	streq.w	r1, [r8]
 8006b68:	5162      	str	r2, [r4, r5]
 8006b6a:	604b      	str	r3, [r1, #4]
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f000 f82f 	bl	8006bd0 <__malloc_unlock>
 8006b72:	f104 000b 	add.w	r0, r4, #11
 8006b76:	1d23      	adds	r3, r4, #4
 8006b78:	f020 0007 	bic.w	r0, r0, #7
 8006b7c:	1ac2      	subs	r2, r0, r3
 8006b7e:	bf1c      	itt	ne
 8006b80:	1a1b      	subne	r3, r3, r0
 8006b82:	50a3      	strne	r3, [r4, r2]
 8006b84:	e7af      	b.n	8006ae6 <_malloc_r+0x22>
 8006b86:	6862      	ldr	r2, [r4, #4]
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	bf0c      	ite	eq
 8006b8c:	f8c8 2000 	streq.w	r2, [r8]
 8006b90:	605a      	strne	r2, [r3, #4]
 8006b92:	e7eb      	b.n	8006b6c <_malloc_r+0xa8>
 8006b94:	4623      	mov	r3, r4
 8006b96:	6864      	ldr	r4, [r4, #4]
 8006b98:	e7ae      	b.n	8006af8 <_malloc_r+0x34>
 8006b9a:	463c      	mov	r4, r7
 8006b9c:	687f      	ldr	r7, [r7, #4]
 8006b9e:	e7b6      	b.n	8006b0e <_malloc_r+0x4a>
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	d1fb      	bne.n	8006ba0 <_malloc_r+0xdc>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	6053      	str	r3, [r2, #4]
 8006bac:	e7de      	b.n	8006b6c <_malloc_r+0xa8>
 8006bae:	230c      	movs	r3, #12
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	6033      	str	r3, [r6, #0]
 8006bb4:	f000 f80c 	bl	8006bd0 <__malloc_unlock>
 8006bb8:	e794      	b.n	8006ae4 <_malloc_r+0x20>
 8006bba:	6005      	str	r5, [r0, #0]
 8006bbc:	e7d6      	b.n	8006b6c <_malloc_r+0xa8>
 8006bbe:	bf00      	nop
 8006bc0:	2000229c 	.word	0x2000229c

08006bc4 <__malloc_lock>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	@ (8006bcc <__malloc_lock+0x8>)
 8006bc6:	f7ff bf03 	b.w	80069d0 <__retarget_lock_acquire_recursive>
 8006bca:	bf00      	nop
 8006bcc:	20002294 	.word	0x20002294

08006bd0 <__malloc_unlock>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	@ (8006bd8 <__malloc_unlock+0x8>)
 8006bd2:	f7ff befe 	b.w	80069d2 <__retarget_lock_release_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	20002294 	.word	0x20002294

08006bdc <__ssputs_r>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	461f      	mov	r7, r3
 8006be2:	688e      	ldr	r6, [r1, #8]
 8006be4:	4682      	mov	sl, r0
 8006be6:	42be      	cmp	r6, r7
 8006be8:	460c      	mov	r4, r1
 8006bea:	4690      	mov	r8, r2
 8006bec:	680b      	ldr	r3, [r1, #0]
 8006bee:	d82d      	bhi.n	8006c4c <__ssputs_r+0x70>
 8006bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bf8:	d026      	beq.n	8006c48 <__ssputs_r+0x6c>
 8006bfa:	6965      	ldr	r5, [r4, #20]
 8006bfc:	6909      	ldr	r1, [r1, #16]
 8006bfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c02:	eba3 0901 	sub.w	r9, r3, r1
 8006c06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c0a:	1c7b      	adds	r3, r7, #1
 8006c0c:	444b      	add	r3, r9
 8006c0e:	106d      	asrs	r5, r5, #1
 8006c10:	429d      	cmp	r5, r3
 8006c12:	bf38      	it	cc
 8006c14:	461d      	movcc	r5, r3
 8006c16:	0553      	lsls	r3, r2, #21
 8006c18:	d527      	bpl.n	8006c6a <__ssputs_r+0x8e>
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f7ff ff52 	bl	8006ac4 <_malloc_r>
 8006c20:	4606      	mov	r6, r0
 8006c22:	b360      	cbz	r0, 8006c7e <__ssputs_r+0xa2>
 8006c24:	464a      	mov	r2, r9
 8006c26:	6921      	ldr	r1, [r4, #16]
 8006c28:	f7ff fed4 	bl	80069d4 <memcpy>
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c36:	81a3      	strh	r3, [r4, #12]
 8006c38:	6126      	str	r6, [r4, #16]
 8006c3a:	444e      	add	r6, r9
 8006c3c:	6026      	str	r6, [r4, #0]
 8006c3e:	463e      	mov	r6, r7
 8006c40:	6165      	str	r5, [r4, #20]
 8006c42:	eba5 0509 	sub.w	r5, r5, r9
 8006c46:	60a5      	str	r5, [r4, #8]
 8006c48:	42be      	cmp	r6, r7
 8006c4a:	d900      	bls.n	8006c4e <__ssputs_r+0x72>
 8006c4c:	463e      	mov	r6, r7
 8006c4e:	4632      	mov	r2, r6
 8006c50:	4641      	mov	r1, r8
 8006c52:	6820      	ldr	r0, [r4, #0]
 8006c54:	f000 faac 	bl	80071b0 <memmove>
 8006c58:	2000      	movs	r0, #0
 8006c5a:	68a3      	ldr	r3, [r4, #8]
 8006c5c:	1b9b      	subs	r3, r3, r6
 8006c5e:	60a3      	str	r3, [r4, #8]
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	4433      	add	r3, r6
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	f000 fad8 	bl	8007220 <_realloc_r>
 8006c70:	4606      	mov	r6, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1e0      	bne.n	8006c38 <__ssputs_r+0x5c>
 8006c76:	4650      	mov	r0, sl
 8006c78:	6921      	ldr	r1, [r4, #16]
 8006c7a:	f7ff feb9 	bl	80069f0 <_free_r>
 8006c7e:	230c      	movs	r3, #12
 8006c80:	f8ca 3000 	str.w	r3, [sl]
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	e7e9      	b.n	8006c66 <__ssputs_r+0x8a>
	...

08006c94 <_svfiprintf_r>:
 8006c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c98:	4698      	mov	r8, r3
 8006c9a:	898b      	ldrh	r3, [r1, #12]
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	061b      	lsls	r3, r3, #24
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	4614      	mov	r4, r2
 8006ca4:	b09d      	sub	sp, #116	@ 0x74
 8006ca6:	d510      	bpl.n	8006cca <_svfiprintf_r+0x36>
 8006ca8:	690b      	ldr	r3, [r1, #16]
 8006caa:	b973      	cbnz	r3, 8006cca <_svfiprintf_r+0x36>
 8006cac:	2140      	movs	r1, #64	@ 0x40
 8006cae:	f7ff ff09 	bl	8006ac4 <_malloc_r>
 8006cb2:	6028      	str	r0, [r5, #0]
 8006cb4:	6128      	str	r0, [r5, #16]
 8006cb6:	b930      	cbnz	r0, 8006cc6 <_svfiprintf_r+0x32>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	b01d      	add	sp, #116	@ 0x74
 8006cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc6:	2340      	movs	r3, #64	@ 0x40
 8006cc8:	616b      	str	r3, [r5, #20]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cce:	2320      	movs	r3, #32
 8006cd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cd4:	2330      	movs	r3, #48	@ 0x30
 8006cd6:	f04f 0901 	mov.w	r9, #1
 8006cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e78 <_svfiprintf_r+0x1e4>
 8006ce2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ce6:	4623      	mov	r3, r4
 8006ce8:	469a      	mov	sl, r3
 8006cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cee:	b10a      	cbz	r2, 8006cf4 <_svfiprintf_r+0x60>
 8006cf0:	2a25      	cmp	r2, #37	@ 0x25
 8006cf2:	d1f9      	bne.n	8006ce8 <_svfiprintf_r+0x54>
 8006cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8006cf8:	d00b      	beq.n	8006d12 <_svfiprintf_r+0x7e>
 8006cfa:	465b      	mov	r3, fp
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	4638      	mov	r0, r7
 8006d02:	f7ff ff6b 	bl	8006bdc <__ssputs_r>
 8006d06:	3001      	adds	r0, #1
 8006d08:	f000 80a7 	beq.w	8006e5a <_svfiprintf_r+0x1c6>
 8006d0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d0e:	445a      	add	r2, fp
 8006d10:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d12:	f89a 3000 	ldrb.w	r3, [sl]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 809f 	beq.w	8006e5a <_svfiprintf_r+0x1c6>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d26:	f10a 0a01 	add.w	sl, sl, #1
 8006d2a:	9304      	str	r3, [sp, #16]
 8006d2c:	9307      	str	r3, [sp, #28]
 8006d2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d32:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d34:	4654      	mov	r4, sl
 8006d36:	2205      	movs	r2, #5
 8006d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3c:	484e      	ldr	r0, [pc, #312]	@ (8006e78 <_svfiprintf_r+0x1e4>)
 8006d3e:	f000 fa61 	bl	8007204 <memchr>
 8006d42:	9a04      	ldr	r2, [sp, #16]
 8006d44:	b9d8      	cbnz	r0, 8006d7e <_svfiprintf_r+0xea>
 8006d46:	06d0      	lsls	r0, r2, #27
 8006d48:	bf44      	itt	mi
 8006d4a:	2320      	movmi	r3, #32
 8006d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d50:	0711      	lsls	r1, r2, #28
 8006d52:	bf44      	itt	mi
 8006d54:	232b      	movmi	r3, #43	@ 0x2b
 8006d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d60:	d015      	beq.n	8006d8e <_svfiprintf_r+0xfa>
 8006d62:	4654      	mov	r4, sl
 8006d64:	2000      	movs	r0, #0
 8006d66:	f04f 0c0a 	mov.w	ip, #10
 8006d6a:	9a07      	ldr	r2, [sp, #28]
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d72:	3b30      	subs	r3, #48	@ 0x30
 8006d74:	2b09      	cmp	r3, #9
 8006d76:	d94b      	bls.n	8006e10 <_svfiprintf_r+0x17c>
 8006d78:	b1b0      	cbz	r0, 8006da8 <_svfiprintf_r+0x114>
 8006d7a:	9207      	str	r2, [sp, #28]
 8006d7c:	e014      	b.n	8006da8 <_svfiprintf_r+0x114>
 8006d7e:	eba0 0308 	sub.w	r3, r0, r8
 8006d82:	fa09 f303 	lsl.w	r3, r9, r3
 8006d86:	4313      	orrs	r3, r2
 8006d88:	46a2      	mov	sl, r4
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	e7d2      	b.n	8006d34 <_svfiprintf_r+0xa0>
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	1d19      	adds	r1, r3, #4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	9103      	str	r1, [sp, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bfbb      	ittet	lt
 8006d9a:	425b      	neglt	r3, r3
 8006d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8006da0:	9307      	strge	r3, [sp, #28]
 8006da2:	9307      	strlt	r3, [sp, #28]
 8006da4:	bfb8      	it	lt
 8006da6:	9204      	strlt	r2, [sp, #16]
 8006da8:	7823      	ldrb	r3, [r4, #0]
 8006daa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dac:	d10a      	bne.n	8006dc4 <_svfiprintf_r+0x130>
 8006dae:	7863      	ldrb	r3, [r4, #1]
 8006db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006db2:	d132      	bne.n	8006e1a <_svfiprintf_r+0x186>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	3402      	adds	r4, #2
 8006db8:	1d1a      	adds	r2, r3, #4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	9203      	str	r2, [sp, #12]
 8006dbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e7c <_svfiprintf_r+0x1e8>
 8006dc8:	2203      	movs	r2, #3
 8006dca:	4650      	mov	r0, sl
 8006dcc:	7821      	ldrb	r1, [r4, #0]
 8006dce:	f000 fa19 	bl	8007204 <memchr>
 8006dd2:	b138      	cbz	r0, 8006de4 <_svfiprintf_r+0x150>
 8006dd4:	2240      	movs	r2, #64	@ 0x40
 8006dd6:	9b04      	ldr	r3, [sp, #16]
 8006dd8:	eba0 000a 	sub.w	r0, r0, sl
 8006ddc:	4082      	lsls	r2, r0
 8006dde:	4313      	orrs	r3, r2
 8006de0:	3401      	adds	r4, #1
 8006de2:	9304      	str	r3, [sp, #16]
 8006de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de8:	2206      	movs	r2, #6
 8006dea:	4825      	ldr	r0, [pc, #148]	@ (8006e80 <_svfiprintf_r+0x1ec>)
 8006dec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006df0:	f000 fa08 	bl	8007204 <memchr>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d036      	beq.n	8006e66 <_svfiprintf_r+0x1d2>
 8006df8:	4b22      	ldr	r3, [pc, #136]	@ (8006e84 <_svfiprintf_r+0x1f0>)
 8006dfa:	bb1b      	cbnz	r3, 8006e44 <_svfiprintf_r+0x1b0>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	3307      	adds	r3, #7
 8006e00:	f023 0307 	bic.w	r3, r3, #7
 8006e04:	3308      	adds	r3, #8
 8006e06:	9303      	str	r3, [sp, #12]
 8006e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e0a:	4433      	add	r3, r6
 8006e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e0e:	e76a      	b.n	8006ce6 <_svfiprintf_r+0x52>
 8006e10:	460c      	mov	r4, r1
 8006e12:	2001      	movs	r0, #1
 8006e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e18:	e7a8      	b.n	8006d6c <_svfiprintf_r+0xd8>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f04f 0c0a 	mov.w	ip, #10
 8006e20:	4619      	mov	r1, r3
 8006e22:	3401      	adds	r4, #1
 8006e24:	9305      	str	r3, [sp, #20]
 8006e26:	4620      	mov	r0, r4
 8006e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e2c:	3a30      	subs	r2, #48	@ 0x30
 8006e2e:	2a09      	cmp	r2, #9
 8006e30:	d903      	bls.n	8006e3a <_svfiprintf_r+0x1a6>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0c6      	beq.n	8006dc4 <_svfiprintf_r+0x130>
 8006e36:	9105      	str	r1, [sp, #20]
 8006e38:	e7c4      	b.n	8006dc4 <_svfiprintf_r+0x130>
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e42:	e7f0      	b.n	8006e26 <_svfiprintf_r+0x192>
 8006e44:	ab03      	add	r3, sp, #12
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e88 <_svfiprintf_r+0x1f4>)
 8006e4e:	a904      	add	r1, sp, #16
 8006e50:	f3af 8000 	nop.w
 8006e54:	1c42      	adds	r2, r0, #1
 8006e56:	4606      	mov	r6, r0
 8006e58:	d1d6      	bne.n	8006e08 <_svfiprintf_r+0x174>
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	065b      	lsls	r3, r3, #25
 8006e5e:	f53f af2d 	bmi.w	8006cbc <_svfiprintf_r+0x28>
 8006e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e64:	e72c      	b.n	8006cc0 <_svfiprintf_r+0x2c>
 8006e66:	ab03      	add	r3, sp, #12
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	462a      	mov	r2, r5
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <_svfiprintf_r+0x1f4>)
 8006e70:	a904      	add	r1, sp, #16
 8006e72:	f000 f87d 	bl	8006f70 <_printf_i>
 8006e76:	e7ed      	b.n	8006e54 <_svfiprintf_r+0x1c0>
 8006e78:	080081e2 	.word	0x080081e2
 8006e7c:	080081e8 	.word	0x080081e8
 8006e80:	080081ec 	.word	0x080081ec
 8006e84:	00000000 	.word	0x00000000
 8006e88:	08006bdd 	.word	0x08006bdd

08006e8c <_printf_common>:
 8006e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	4616      	mov	r6, r2
 8006e92:	4698      	mov	r8, r3
 8006e94:	688a      	ldr	r2, [r1, #8]
 8006e96:	690b      	ldr	r3, [r1, #16]
 8006e98:	4607      	mov	r7, r0
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	bfb8      	it	lt
 8006e9e:	4613      	movlt	r3, r2
 8006ea0:	6033      	str	r3, [r6, #0]
 8006ea2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eac:	b10a      	cbz	r2, 8006eb2 <_printf_common+0x26>
 8006eae:	3301      	adds	r3, #1
 8006eb0:	6033      	str	r3, [r6, #0]
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	0699      	lsls	r1, r3, #26
 8006eb6:	bf42      	ittt	mi
 8006eb8:	6833      	ldrmi	r3, [r6, #0]
 8006eba:	3302      	addmi	r3, #2
 8006ebc:	6033      	strmi	r3, [r6, #0]
 8006ebe:	6825      	ldr	r5, [r4, #0]
 8006ec0:	f015 0506 	ands.w	r5, r5, #6
 8006ec4:	d106      	bne.n	8006ed4 <_printf_common+0x48>
 8006ec6:	f104 0a19 	add.w	sl, r4, #25
 8006eca:	68e3      	ldr	r3, [r4, #12]
 8006ecc:	6832      	ldr	r2, [r6, #0]
 8006ece:	1a9b      	subs	r3, r3, r2
 8006ed0:	42ab      	cmp	r3, r5
 8006ed2:	dc2b      	bgt.n	8006f2c <_printf_common+0xa0>
 8006ed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	3b00      	subs	r3, #0
 8006edc:	bf18      	it	ne
 8006ede:	2301      	movne	r3, #1
 8006ee0:	0692      	lsls	r2, r2, #26
 8006ee2:	d430      	bmi.n	8006f46 <_printf_common+0xba>
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006eec:	47c8      	blx	r9
 8006eee:	3001      	adds	r0, #1
 8006ef0:	d023      	beq.n	8006f3a <_printf_common+0xae>
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	6922      	ldr	r2, [r4, #16]
 8006ef6:	f003 0306 	and.w	r3, r3, #6
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	bf14      	ite	ne
 8006efe:	2500      	movne	r5, #0
 8006f00:	6833      	ldreq	r3, [r6, #0]
 8006f02:	f04f 0600 	mov.w	r6, #0
 8006f06:	bf08      	it	eq
 8006f08:	68e5      	ldreq	r5, [r4, #12]
 8006f0a:	f104 041a 	add.w	r4, r4, #26
 8006f0e:	bf08      	it	eq
 8006f10:	1aed      	subeq	r5, r5, r3
 8006f12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f16:	bf08      	it	eq
 8006f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	bfc4      	itt	gt
 8006f20:	1a9b      	subgt	r3, r3, r2
 8006f22:	18ed      	addgt	r5, r5, r3
 8006f24:	42b5      	cmp	r5, r6
 8006f26:	d11a      	bne.n	8006f5e <_printf_common+0xd2>
 8006f28:	2000      	movs	r0, #0
 8006f2a:	e008      	b.n	8006f3e <_printf_common+0xb2>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4652      	mov	r2, sl
 8006f30:	4641      	mov	r1, r8
 8006f32:	4638      	mov	r0, r7
 8006f34:	47c8      	blx	r9
 8006f36:	3001      	adds	r0, #1
 8006f38:	d103      	bne.n	8006f42 <_printf_common+0xb6>
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f42:	3501      	adds	r5, #1
 8006f44:	e7c1      	b.n	8006eca <_printf_common+0x3e>
 8006f46:	2030      	movs	r0, #48	@ 0x30
 8006f48:	18e1      	adds	r1, r4, r3
 8006f4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f54:	4422      	add	r2, r4
 8006f56:	3302      	adds	r3, #2
 8006f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f5c:	e7c2      	b.n	8006ee4 <_printf_common+0x58>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4622      	mov	r2, r4
 8006f62:	4641      	mov	r1, r8
 8006f64:	4638      	mov	r0, r7
 8006f66:	47c8      	blx	r9
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d0e6      	beq.n	8006f3a <_printf_common+0xae>
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	e7d9      	b.n	8006f24 <_printf_common+0x98>

08006f70 <_printf_i>:
 8006f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	7e0f      	ldrb	r7, [r1, #24]
 8006f76:	4691      	mov	r9, r2
 8006f78:	2f78      	cmp	r7, #120	@ 0x78
 8006f7a:	4680      	mov	r8, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	469a      	mov	sl, r3
 8006f80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f86:	d807      	bhi.n	8006f98 <_printf_i+0x28>
 8006f88:	2f62      	cmp	r7, #98	@ 0x62
 8006f8a:	d80a      	bhi.n	8006fa2 <_printf_i+0x32>
 8006f8c:	2f00      	cmp	r7, #0
 8006f8e:	f000 80d3 	beq.w	8007138 <_printf_i+0x1c8>
 8006f92:	2f58      	cmp	r7, #88	@ 0x58
 8006f94:	f000 80ba 	beq.w	800710c <_printf_i+0x19c>
 8006f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fa0:	e03a      	b.n	8007018 <_printf_i+0xa8>
 8006fa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fa6:	2b15      	cmp	r3, #21
 8006fa8:	d8f6      	bhi.n	8006f98 <_printf_i+0x28>
 8006faa:	a101      	add	r1, pc, #4	@ (adr r1, 8006fb0 <_printf_i+0x40>)
 8006fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fb0:	08007009 	.word	0x08007009
 8006fb4:	0800701d 	.word	0x0800701d
 8006fb8:	08006f99 	.word	0x08006f99
 8006fbc:	08006f99 	.word	0x08006f99
 8006fc0:	08006f99 	.word	0x08006f99
 8006fc4:	08006f99 	.word	0x08006f99
 8006fc8:	0800701d 	.word	0x0800701d
 8006fcc:	08006f99 	.word	0x08006f99
 8006fd0:	08006f99 	.word	0x08006f99
 8006fd4:	08006f99 	.word	0x08006f99
 8006fd8:	08006f99 	.word	0x08006f99
 8006fdc:	0800711f 	.word	0x0800711f
 8006fe0:	08007047 	.word	0x08007047
 8006fe4:	080070d9 	.word	0x080070d9
 8006fe8:	08006f99 	.word	0x08006f99
 8006fec:	08006f99 	.word	0x08006f99
 8006ff0:	08007141 	.word	0x08007141
 8006ff4:	08006f99 	.word	0x08006f99
 8006ff8:	08007047 	.word	0x08007047
 8006ffc:	08006f99 	.word	0x08006f99
 8007000:	08006f99 	.word	0x08006f99
 8007004:	080070e1 	.word	0x080070e1
 8007008:	6833      	ldr	r3, [r6, #0]
 800700a:	1d1a      	adds	r2, r3, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6032      	str	r2, [r6, #0]
 8007010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007014:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007018:	2301      	movs	r3, #1
 800701a:	e09e      	b.n	800715a <_printf_i+0x1ea>
 800701c:	6833      	ldr	r3, [r6, #0]
 800701e:	6820      	ldr	r0, [r4, #0]
 8007020:	1d19      	adds	r1, r3, #4
 8007022:	6031      	str	r1, [r6, #0]
 8007024:	0606      	lsls	r6, r0, #24
 8007026:	d501      	bpl.n	800702c <_printf_i+0xbc>
 8007028:	681d      	ldr	r5, [r3, #0]
 800702a:	e003      	b.n	8007034 <_printf_i+0xc4>
 800702c:	0645      	lsls	r5, r0, #25
 800702e:	d5fb      	bpl.n	8007028 <_printf_i+0xb8>
 8007030:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007034:	2d00      	cmp	r5, #0
 8007036:	da03      	bge.n	8007040 <_printf_i+0xd0>
 8007038:	232d      	movs	r3, #45	@ 0x2d
 800703a:	426d      	negs	r5, r5
 800703c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007040:	230a      	movs	r3, #10
 8007042:	4859      	ldr	r0, [pc, #356]	@ (80071a8 <_printf_i+0x238>)
 8007044:	e011      	b.n	800706a <_printf_i+0xfa>
 8007046:	6821      	ldr	r1, [r4, #0]
 8007048:	6833      	ldr	r3, [r6, #0]
 800704a:	0608      	lsls	r0, r1, #24
 800704c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007050:	d402      	bmi.n	8007058 <_printf_i+0xe8>
 8007052:	0649      	lsls	r1, r1, #25
 8007054:	bf48      	it	mi
 8007056:	b2ad      	uxthmi	r5, r5
 8007058:	2f6f      	cmp	r7, #111	@ 0x6f
 800705a:	6033      	str	r3, [r6, #0]
 800705c:	bf14      	ite	ne
 800705e:	230a      	movne	r3, #10
 8007060:	2308      	moveq	r3, #8
 8007062:	4851      	ldr	r0, [pc, #324]	@ (80071a8 <_printf_i+0x238>)
 8007064:	2100      	movs	r1, #0
 8007066:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800706a:	6866      	ldr	r6, [r4, #4]
 800706c:	2e00      	cmp	r6, #0
 800706e:	bfa8      	it	ge
 8007070:	6821      	ldrge	r1, [r4, #0]
 8007072:	60a6      	str	r6, [r4, #8]
 8007074:	bfa4      	itt	ge
 8007076:	f021 0104 	bicge.w	r1, r1, #4
 800707a:	6021      	strge	r1, [r4, #0]
 800707c:	b90d      	cbnz	r5, 8007082 <_printf_i+0x112>
 800707e:	2e00      	cmp	r6, #0
 8007080:	d04b      	beq.n	800711a <_printf_i+0x1aa>
 8007082:	4616      	mov	r6, r2
 8007084:	fbb5 f1f3 	udiv	r1, r5, r3
 8007088:	fb03 5711 	mls	r7, r3, r1, r5
 800708c:	5dc7      	ldrb	r7, [r0, r7]
 800708e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007092:	462f      	mov	r7, r5
 8007094:	42bb      	cmp	r3, r7
 8007096:	460d      	mov	r5, r1
 8007098:	d9f4      	bls.n	8007084 <_printf_i+0x114>
 800709a:	2b08      	cmp	r3, #8
 800709c:	d10b      	bne.n	80070b6 <_printf_i+0x146>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	07df      	lsls	r7, r3, #31
 80070a2:	d508      	bpl.n	80070b6 <_printf_i+0x146>
 80070a4:	6923      	ldr	r3, [r4, #16]
 80070a6:	6861      	ldr	r1, [r4, #4]
 80070a8:	4299      	cmp	r1, r3
 80070aa:	bfde      	ittt	le
 80070ac:	2330      	movle	r3, #48	@ 0x30
 80070ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070b6:	1b92      	subs	r2, r2, r6
 80070b8:	6122      	str	r2, [r4, #16]
 80070ba:	464b      	mov	r3, r9
 80070bc:	4621      	mov	r1, r4
 80070be:	4640      	mov	r0, r8
 80070c0:	f8cd a000 	str.w	sl, [sp]
 80070c4:	aa03      	add	r2, sp, #12
 80070c6:	f7ff fee1 	bl	8006e8c <_printf_common>
 80070ca:	3001      	adds	r0, #1
 80070cc:	d14a      	bne.n	8007164 <_printf_i+0x1f4>
 80070ce:	f04f 30ff 	mov.w	r0, #4294967295
 80070d2:	b004      	add	sp, #16
 80070d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	f043 0320 	orr.w	r3, r3, #32
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	2778      	movs	r7, #120	@ 0x78
 80070e2:	4832      	ldr	r0, [pc, #200]	@ (80071ac <_printf_i+0x23c>)
 80070e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	6831      	ldr	r1, [r6, #0]
 80070ec:	061f      	lsls	r7, r3, #24
 80070ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80070f2:	d402      	bmi.n	80070fa <_printf_i+0x18a>
 80070f4:	065f      	lsls	r7, r3, #25
 80070f6:	bf48      	it	mi
 80070f8:	b2ad      	uxthmi	r5, r5
 80070fa:	6031      	str	r1, [r6, #0]
 80070fc:	07d9      	lsls	r1, r3, #31
 80070fe:	bf44      	itt	mi
 8007100:	f043 0320 	orrmi.w	r3, r3, #32
 8007104:	6023      	strmi	r3, [r4, #0]
 8007106:	b11d      	cbz	r5, 8007110 <_printf_i+0x1a0>
 8007108:	2310      	movs	r3, #16
 800710a:	e7ab      	b.n	8007064 <_printf_i+0xf4>
 800710c:	4826      	ldr	r0, [pc, #152]	@ (80071a8 <_printf_i+0x238>)
 800710e:	e7e9      	b.n	80070e4 <_printf_i+0x174>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	f023 0320 	bic.w	r3, r3, #32
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	e7f6      	b.n	8007108 <_printf_i+0x198>
 800711a:	4616      	mov	r6, r2
 800711c:	e7bd      	b.n	800709a <_printf_i+0x12a>
 800711e:	6833      	ldr	r3, [r6, #0]
 8007120:	6825      	ldr	r5, [r4, #0]
 8007122:	1d18      	adds	r0, r3, #4
 8007124:	6961      	ldr	r1, [r4, #20]
 8007126:	6030      	str	r0, [r6, #0]
 8007128:	062e      	lsls	r6, r5, #24
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	d501      	bpl.n	8007132 <_printf_i+0x1c2>
 800712e:	6019      	str	r1, [r3, #0]
 8007130:	e002      	b.n	8007138 <_printf_i+0x1c8>
 8007132:	0668      	lsls	r0, r5, #25
 8007134:	d5fb      	bpl.n	800712e <_printf_i+0x1be>
 8007136:	8019      	strh	r1, [r3, #0]
 8007138:	2300      	movs	r3, #0
 800713a:	4616      	mov	r6, r2
 800713c:	6123      	str	r3, [r4, #16]
 800713e:	e7bc      	b.n	80070ba <_printf_i+0x14a>
 8007140:	6833      	ldr	r3, [r6, #0]
 8007142:	2100      	movs	r1, #0
 8007144:	1d1a      	adds	r2, r3, #4
 8007146:	6032      	str	r2, [r6, #0]
 8007148:	681e      	ldr	r6, [r3, #0]
 800714a:	6862      	ldr	r2, [r4, #4]
 800714c:	4630      	mov	r0, r6
 800714e:	f000 f859 	bl	8007204 <memchr>
 8007152:	b108      	cbz	r0, 8007158 <_printf_i+0x1e8>
 8007154:	1b80      	subs	r0, r0, r6
 8007156:	6060      	str	r0, [r4, #4]
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	6123      	str	r3, [r4, #16]
 800715c:	2300      	movs	r3, #0
 800715e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007162:	e7aa      	b.n	80070ba <_printf_i+0x14a>
 8007164:	4632      	mov	r2, r6
 8007166:	4649      	mov	r1, r9
 8007168:	4640      	mov	r0, r8
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	47d0      	blx	sl
 800716e:	3001      	adds	r0, #1
 8007170:	d0ad      	beq.n	80070ce <_printf_i+0x15e>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	079b      	lsls	r3, r3, #30
 8007176:	d413      	bmi.n	80071a0 <_printf_i+0x230>
 8007178:	68e0      	ldr	r0, [r4, #12]
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	4298      	cmp	r0, r3
 800717e:	bfb8      	it	lt
 8007180:	4618      	movlt	r0, r3
 8007182:	e7a6      	b.n	80070d2 <_printf_i+0x162>
 8007184:	2301      	movs	r3, #1
 8007186:	4632      	mov	r2, r6
 8007188:	4649      	mov	r1, r9
 800718a:	4640      	mov	r0, r8
 800718c:	47d0      	blx	sl
 800718e:	3001      	adds	r0, #1
 8007190:	d09d      	beq.n	80070ce <_printf_i+0x15e>
 8007192:	3501      	adds	r5, #1
 8007194:	68e3      	ldr	r3, [r4, #12]
 8007196:	9903      	ldr	r1, [sp, #12]
 8007198:	1a5b      	subs	r3, r3, r1
 800719a:	42ab      	cmp	r3, r5
 800719c:	dcf2      	bgt.n	8007184 <_printf_i+0x214>
 800719e:	e7eb      	b.n	8007178 <_printf_i+0x208>
 80071a0:	2500      	movs	r5, #0
 80071a2:	f104 0619 	add.w	r6, r4, #25
 80071a6:	e7f5      	b.n	8007194 <_printf_i+0x224>
 80071a8:	080081f3 	.word	0x080081f3
 80071ac:	08008204 	.word	0x08008204

080071b0 <memmove>:
 80071b0:	4288      	cmp	r0, r1
 80071b2:	b510      	push	{r4, lr}
 80071b4:	eb01 0402 	add.w	r4, r1, r2
 80071b8:	d902      	bls.n	80071c0 <memmove+0x10>
 80071ba:	4284      	cmp	r4, r0
 80071bc:	4623      	mov	r3, r4
 80071be:	d807      	bhi.n	80071d0 <memmove+0x20>
 80071c0:	1e43      	subs	r3, r0, #1
 80071c2:	42a1      	cmp	r1, r4
 80071c4:	d008      	beq.n	80071d8 <memmove+0x28>
 80071c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071ce:	e7f8      	b.n	80071c2 <memmove+0x12>
 80071d0:	4601      	mov	r1, r0
 80071d2:	4402      	add	r2, r0
 80071d4:	428a      	cmp	r2, r1
 80071d6:	d100      	bne.n	80071da <memmove+0x2a>
 80071d8:	bd10      	pop	{r4, pc}
 80071da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071e2:	e7f7      	b.n	80071d4 <memmove+0x24>

080071e4 <_sbrk_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	2300      	movs	r3, #0
 80071e8:	4d05      	ldr	r5, [pc, #20]	@ (8007200 <_sbrk_r+0x1c>)
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	f7f9 fedc 	bl	8000fac <_sbrk>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_sbrk_r+0x1a>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_sbrk_r+0x1a>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	20002290 	.word	0x20002290

08007204 <memchr>:
 8007204:	4603      	mov	r3, r0
 8007206:	b510      	push	{r4, lr}
 8007208:	b2c9      	uxtb	r1, r1
 800720a:	4402      	add	r2, r0
 800720c:	4293      	cmp	r3, r2
 800720e:	4618      	mov	r0, r3
 8007210:	d101      	bne.n	8007216 <memchr+0x12>
 8007212:	2000      	movs	r0, #0
 8007214:	e003      	b.n	800721e <memchr+0x1a>
 8007216:	7804      	ldrb	r4, [r0, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	428c      	cmp	r4, r1
 800721c:	d1f6      	bne.n	800720c <memchr+0x8>
 800721e:	bd10      	pop	{r4, pc}

08007220 <_realloc_r>:
 8007220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007224:	4680      	mov	r8, r0
 8007226:	4615      	mov	r5, r2
 8007228:	460c      	mov	r4, r1
 800722a:	b921      	cbnz	r1, 8007236 <_realloc_r+0x16>
 800722c:	4611      	mov	r1, r2
 800722e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007232:	f7ff bc47 	b.w	8006ac4 <_malloc_r>
 8007236:	b92a      	cbnz	r2, 8007244 <_realloc_r+0x24>
 8007238:	f7ff fbda 	bl	80069f0 <_free_r>
 800723c:	2400      	movs	r4, #0
 800723e:	4620      	mov	r0, r4
 8007240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007244:	f000 f81a 	bl	800727c <_malloc_usable_size_r>
 8007248:	4285      	cmp	r5, r0
 800724a:	4606      	mov	r6, r0
 800724c:	d802      	bhi.n	8007254 <_realloc_r+0x34>
 800724e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007252:	d8f4      	bhi.n	800723e <_realloc_r+0x1e>
 8007254:	4629      	mov	r1, r5
 8007256:	4640      	mov	r0, r8
 8007258:	f7ff fc34 	bl	8006ac4 <_malloc_r>
 800725c:	4607      	mov	r7, r0
 800725e:	2800      	cmp	r0, #0
 8007260:	d0ec      	beq.n	800723c <_realloc_r+0x1c>
 8007262:	42b5      	cmp	r5, r6
 8007264:	462a      	mov	r2, r5
 8007266:	4621      	mov	r1, r4
 8007268:	bf28      	it	cs
 800726a:	4632      	movcs	r2, r6
 800726c:	f7ff fbb2 	bl	80069d4 <memcpy>
 8007270:	4621      	mov	r1, r4
 8007272:	4640      	mov	r0, r8
 8007274:	f7ff fbbc 	bl	80069f0 <_free_r>
 8007278:	463c      	mov	r4, r7
 800727a:	e7e0      	b.n	800723e <_realloc_r+0x1e>

0800727c <_malloc_usable_size_r>:
 800727c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007280:	1f18      	subs	r0, r3, #4
 8007282:	2b00      	cmp	r3, #0
 8007284:	bfbc      	itt	lt
 8007286:	580b      	ldrlt	r3, [r1, r0]
 8007288:	18c0      	addlt	r0, r0, r3
 800728a:	4770      	bx	lr

0800728c <_init>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	bf00      	nop
 8007290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007292:	bc08      	pop	{r3}
 8007294:	469e      	mov	lr, r3
 8007296:	4770      	bx	lr

08007298 <_fini>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	bf00      	nop
 800729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729e:	bc08      	pop	{r3}
 80072a0:	469e      	mov	lr, r3
 80072a2:	4770      	bx	lr
